May-28 15:58:24 DEBUG    MAIN :: importing downloader
May-28 15:58:24 INFO     MAIN :: libtorrent is NOT available
May-28 15:58:24 INFO     MAIN :: Checking database structure...
May-28 15:58:24 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Initial Schema
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE TABLE tv_shows (show_id INTEGER PRIMARY KEY, location TEXT, show_name TEXT, tvdb_id NUMERIC, network TEXT, genre TEXT, runtime NUMERIC, quality NUMERIC, airs TEXT, status TEXT, seasonfolders NUMERIC, paused NUMERIC, startyear NUMERIC);
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE TABLE tv_episodes (episode_id INTEGER PRIMARY KEY, showid NUMERIC, tvdbid NUMERIC, name TEXT, season NUMERIC, episode NUMERIC, description TEXT, airdate NUMERIC, hasnfo NUMERIC, hastbn NUMERIC, status NUMERIC, location TEXT);
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE TABLE info (last_backlog NUMERIC, last_tvdb NUMERIC);
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE TABLE history (action NUMERIC, date NUMERIC, showid NUMERIC, season NUMERIC, episode NUMERIC, quality NUMERIC, resource TEXT, provider NUMERIC);
May-28 15:58:24 DEBUG    MAIN :: InitialSchema upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Add Tvr Id database upgrade
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Add Tvr Id
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_shows ADD tvr_id NUMERIC
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET tvr_id = ? with args (0,)
May-28 15:58:24 DEBUG    MAIN :: AddTvrId upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Add Tvr Name database upgrade
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Add Tvr Name
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_shows ADD tvr_name TEXT
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET tvr_name = ? with args ('',)
May-28 15:58:24 DEBUG    MAIN :: AddTvrName upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Add Airdate Index database upgrade
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('idx_tv_episodes_showid_airdate',)
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Add Airdate Index
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE INDEX idx_tv_episodes_showid_airdate ON tv_episodes(showid,airdate);
May-28 15:58:24 DEBUG    MAIN :: AddAirdateIndex upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Numeric Providers database upgrade
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Numeric Providers
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: ALTER TABLE history RENAME TO history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE TABLE history (action NUMERIC, date NUMERIC, showid NUMERIC, season NUMERIC, episode NUMERIC, quality NUMERIC, resource TEXT, provider TEXT);
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history_old
May-28 15:58:24 DEBUG    MAIN :: NumericProviders upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking New Quality Settings database upgrade
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
May-28 15:58:24 INFO     MAIN :: Database upgrade required: New Quality Settings
May-28 15:58:24 INFO     MAIN :: Attempting to back up /root/.xbmc/userdata/addon_data/service.downloadmanager.InternetPVR/sickbeard.db before migration...
May-28 15:58:24 INFO     MAIN :: Done backup, proceeding with migration.
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, location, status FROM tv_episodes WHERE status IN (?, ?, ?, ?, ?, ?, ?) with args [4, 2, 3, 6, 7, 8, 10]
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: CREATE TABLE db_version (db_version INTEGER);
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: INSERT INTO db_version (db_version) VALUES (?) with args [1]
May-28 15:58:24 DEBUG    MAIN :: NewQualitySettings upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Drop Old History Table database upgrade
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Drop Old History Table
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: DROP TABLE history_old
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [2]
May-28 15:58:24 DEBUG    MAIN :: DropOldHistoryTable upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Upgrade History For Generic Providers database upgrade
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Upgrade History For Generic Providers
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE history SET provider = ? WHERE provider = ? with args ['NZBs.org', 'NZBs']
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE history SET provider = ? WHERE provider = ? with args ["NZBs'R'US", 'NZBsRUS']
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE history SET provider = ? WHERE provider = ? with args ['Bin-Req', 'BinReq']
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE history SET provider = ? WHERE provider = ? with args ['EZTV@BT-Chat', 'EZTV']
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [3]
May-28 15:58:24 DEBUG    MAIN :: UpgradeHistoryForGenericProviders upgrade completed
May-28 15:58:24 DEBUG    MAIN :: Checking Add Air By Date Option database upgrade
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:24 INFO     MAIN :: Database upgrade required: Add Air By Date Option
May-28 15:58:24 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_shows ADD air_by_date NUMERIC
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [4]
May-28 15:58:25 DEBUG    MAIN :: AddAirByDateOption upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Change Sab Config From Ip To Host database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Change Sab Config From Ip To Host
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [5]
May-28 15:58:25 DEBUG    MAIN :: ChangeSabConfigFromIpToHost upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Fix Sab Host database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Fix Sab Host
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [6]
May-28 15:58:25 DEBUG    MAIN :: FixSabHostURL upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Add Lang database upgrade
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Add Lang
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_shows ADD lang TEXT
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET lang = ? with args ('en',)
May-28 15:58:25 DEBUG    MAIN :: AddLang upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Populate Root Dirs database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Populate Root Dirs
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT location FROM tv_shows
May-28 15:58:25 DEBUG    MAIN :: Dir counts: {}
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [7]
May-28 15:58:25 DEBUG    MAIN :: PopulateRootDirs upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Set Nzb Torrent Settings database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Set Nzb Torrent Settings
May-28 15:58:25 INFO     MAIN :: Provider EZRSS is enabled, enabling Torrents in the upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [8]
May-28 15:58:25 DEBUG    MAIN :: SetNzbTorrentSettings upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Fix Air By Date Setting database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Fix Air By Date Setting
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [9]
May-28 15:58:25 DEBUG    MAIN :: FixAirByDateSetting upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Add Size And Scene Name Fields
May-28 15:58:25 INFO     MAIN :: Attempting to back up /root/.xbmc/userdata/addon_data/service.downloadmanager.InternetPVR/sickbeard.db before migration...
May-28 15:58:25 INFO     MAIN :: Done backup, proceeding with migration.
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_episodes ADD file_size NUMERIC
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE tv_episodes SET file_size = ? with args (0,)
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_episodes ADD release_name TEXT
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE tv_episodes SET release_name = ? with args ('',)
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, location, file_size FROM tv_episodes
May-28 15:58:25 INFO     MAIN :: Adding file size to all episodes in DB, please be patient
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history WHERE provider != -1 ORDER BY date ASC
May-28 15:58:25 INFO     MAIN :: Adding release name to all episodes still in history
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, location FROM tv_episodes WHERE release_name = ''
May-28 15:58:25 INFO     MAIN :: Adding release name to all episodes with obvious scene filenames
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [10]
May-28 15:58:25 DEBUG    MAIN :: AddSizeAndSceneNameFields upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Rename Season Folders
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: ALTER TABLE tv_shows RENAME TO tmp_tv_shows
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: CREATE TABLE tv_shows (show_id INTEGER PRIMARY KEY, location TEXT, show_name TEXT, tvdb_id NUMERIC, network TEXT, genre TEXT, runtime NUMERIC, quality NUMERIC, airs TEXT, status TEXT, flatten_folders NUMERIC, paused NUMERIC, startyear NUMERIC, tvr_id NUMERIC, tvr_name TEXT, air_by_date NUMERIC, lang TEXT)
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: INSERT INTO tv_shows(show_id, location, show_name, tvdb_id, network, genre, runtime, quality, airs, status, flatten_folders, paused, startyear, tvr_id, tvr_name, air_by_date, lang) SELECT show_id, location, show_name, tvdb_id, network, genre, runtime, quality, airs, status, seasonfolders, paused, startyear, tvr_id, tvr_name, air_by_date, lang FROM tmp_tv_shows
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET flatten_folders = 2 WHERE flatten_folders = 1
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET flatten_folders = 1 WHERE flatten_folders = 0
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET flatten_folders = 0 WHERE flatten_folders = 2
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: DROP TABLE tmp_tv_shows
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [11]
May-28 15:58:25 DEBUG    MAIN :: RenameSeasonFolders upgrade completed
May-28 15:58:25 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Add1080p And Raw Qualities
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 INFO     MAIN :: Attempting to back up /root/.xbmc/userdata/addon_data/service.downloadmanager.InternetPVR/sickbeard.db before migration...
May-28 15:58:25 INFO     MAIN :: Done backup, proceeding with migration.
May-28 15:58:25 INFO     MAIN :: [1/4] Updating pre-defined templates and the quality for each show...
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
May-28 15:58:25 DEBUG    MAIN :: Transaction with 0 query's executed
May-28 15:58:25 INFO     MAIN :: [2/4] Updating the status for the episodes within each show...
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_episodes WHERE status < 3276800 AND status >= 800
May-28 15:58:25 DEBUG    MAIN :: Transaction with 0 query's executed
May-28 15:58:25 INFO     MAIN :: [3/4] Updating history to reflect the correct action...
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history WHERE action < 3276800 AND action >= 800
May-28 15:58:25 DEBUG    MAIN :: Transaction with 0 query's executed
May-28 15:58:25 INFO     MAIN :: [4/4] Updating history to reflect the correct quality...
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT * FROM history WHERE quality < 32768 AND quality >= 8
May-28 15:58:25 DEBUG    MAIN :: Transaction with 0 query's executed
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: UPDATE db_version SET db_version = ? with args [12]
May-28 15:58:25 DEBUG    MAIN :: Performing a vacuum on the database.
May-28 15:58:25 DEBUG    MAIN :: sickbeard.db: VACUUM
May-28 15:58:25 DEBUG    MAIN :: Add1080pAndRawHDQualities upgrade completed
May-28 15:58:25 INFO     MAIN :: Checking database structure...
May-28 15:58:25 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 15:58:25 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
May-28 15:58:25 INFO     MAIN :: Database upgrade required: Initial Schema
May-28 15:58:25 DEBUG    MAIN :: cache.db: CREATE TABLE lastUpdate (provider TEXT, time NUMERIC);
May-28 15:58:25 DEBUG    MAIN :: cache.db: CREATE TABLE db_version (db_version INTEGER);
May-28 15:58:26 DEBUG    MAIN :: cache.db: INSERT INTO db_version (db_version) VALUES (?) with args (1,)
May-28 15:58:26 DEBUG    MAIN :: InitialSchema upgrade completed
May-28 15:58:26 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
May-28 15:58:26 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
May-28 15:58:26 INFO     MAIN :: Database upgrade required: Add Scene Exceptions
May-28 15:58:26 DEBUG    MAIN :: cache.db: CREATE TABLE scene_exceptions (exception_id INTEGER PRIMARY KEY, tvdb_id INTEGER KEY, show_name TEXT)
May-28 15:58:26 DEBUG    MAIN :: AddSceneExceptions upgrade completed
May-28 15:58:26 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
May-28 15:58:26 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
May-28 15:58:26 INFO     MAIN :: Database upgrade required: Add Scene Name Cache
May-28 15:58:26 DEBUG    MAIN :: cache.db: CREATE TABLE scene_names (tvdb_id INTEGER, name TEXT)
May-28 15:58:26 DEBUG    MAIN :: AddSceneNameCache upgrade completed
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
May-28 15:58:26 INFO     MAIN :: No duplicate show, check passed
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
May-28 15:58:26 INFO     MAIN :: No duplicate episode, check passed
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
May-28 15:58:26 INFO     MAIN :: No orphan episode, check passed
May-28 15:58:26 DEBUG    MAIN :: config_version -> 0
May-28 15:58:26 INFO     MAIN :: Attempting to back up /root/.xbmc/userdata/addon_data/service.downloadmanager.InternetPVR/sickbeard.ini before migration...
May-28 15:58:26 INFO     MAIN :: Done backup, proceeding with migration.
May-28 15:58:26 INFO     MAIN :: Migrating config up to version 1: Custom naming
May-28 15:58:26 DEBUG    MAIN :: naming_use_periods -> 1
May-28 15:58:26 DEBUG    MAIN :: naming_ep_type -> 1
May-28 15:58:26 DEBUG    MAIN :: naming_sep_type -> 1
May-28 15:58:26 DEBUG    MAIN :: naming_quality -> 0
May-28 15:58:26 DEBUG    MAIN :: naming_show_name -> 1
May-28 15:58:26 DEBUG    MAIN :: naming_ep_name -> 0
May-28 15:58:26 INFO     MAIN :: Based on your old settings I'm setting your new naming pattern to: %S.N.s%0Se%0E
May-28 15:58:26 DEBUG    MAIN :: naming_dates -> 0
May-28 15:58:26 DEBUG    MAIN :: naming_multi_ep_type -> 1
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows WHERE flatten_folders = 0
May-28 15:58:26 INFO     MAIN :: No shows were using season folders before so I'm disabling flattening on all shows
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: UPDATE tv_shows SET flatten_folders = 0
May-28 15:58:26 DEBUG    MAIN :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 15:58:26 DEBUG    MAIN :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 15:58:26 DEBUG    MAIN :: Trying to parse Show.Name.s02e03.ext
May-28 15:58:26 DEBUG    MAIN :: The name Show.Name.s02e03.ext parsed into Show Name - S2E3 [ABD: False]
May-28 15:58:26 INFO     MAIN :: Saving config file to disk
May-28 15:58:26 INFO     MAIN :: Attempting to back up /root/.xbmc/userdata/addon_data/service.downloadmanager.InternetPVR/sickbeard.ini before migration...
May-28 15:58:26 INFO     MAIN :: Done backup, proceeding with migration.
May-28 15:58:26 INFO     MAIN :: Migrating config up to version 2: Sync backup number with version number
May-28 15:58:26 INFO     MAIN :: Saving config file to disk
May-28 15:58:26 INFO     MAIN :: Attempting to back up /root/.xbmc/userdata/addon_data/service.downloadmanager.InternetPVR/sickbeard.ini before migration...
May-28 15:58:26 INFO     MAIN :: Done backup, proceeding with migration.
May-28 15:58:26 INFO     MAIN :: Migrating config up to version 3: Rename omgwtfnzb variables
May-28 15:58:26 DEBUG    MAIN :: omgwtfnzbs_uid -> 
May-28 15:58:26 DEBUG    MAIN :: omgwtfnzbs_key -> 
May-28 15:58:26 INFO     MAIN :: Saving config file to disk
May-28 15:58:26 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /root/.xbmc/addons/service.downloadmanager.InternetPVR/SickBeard
May-28 15:58:26 DEBUG    MAIN :: git output: /bin/sh: git: not found

May-28 15:58:26 DEBUG    MAIN :: Unable to find git with command git symbolic-ref -q HEAD
May-28 15:58:26 DEBUG    MAIN :: Retrieving the last check time from the DB
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
May-28 15:58:26 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8082/
May-28 15:58:26 INFO     MAIN :: Loading initial show list
May-28 15:58:26 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
May-28 15:58:27 DEBUG    SEARCH :: Starting new thread: SEARCH
May-28 15:58:27 DEBUG    BACKLOG :: Starting new thread: BACKLOG
May-28 15:58:27 DEBUG    BACKLOG :: Retrieving the last check time from the DB
May-28 15:58:27 DEBUG    BACKLOG :: sickbeard.db: SELECT * FROM info
May-28 15:58:27 DEBUG    BACKLOG :: Air-by-date segments: []
May-28 15:58:27 DEBUG    BACKLOG :: Setting the last backlog in the DB to 735381
May-28 15:58:27 DEBUG    BACKLOG :: sickbeard.db: SELECT * FROM info
May-28 15:58:27 DEBUG    BACKLOG :: sickbeard.db: INSERT INTO info (last_backlog, last_TVDB) VALUES (?,?) with args ['735381', 0]
May-28 15:58:27 DEBUG    CHECKVERSION :: Starting new thread: CHECKVERSION
May-28 15:58:27 INFO     CHECKVERSION :: Version checking is disabled, not checking for the newest version
May-28 15:58:27 INFO     CHECKVERSION :: Check scene exceptions update
May-28 15:58:27 INFO     SEARCHQUEUE-RSS-SEARCH :: Changing all old missing episodes to status WANTED
May-28 15:58:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_episodes WHERE status = ? AND airdate < ? with args [1, 735381]
May-28 15:58:27 INFO     SEARCHQUEUE-RSS-SEARCH :: Beginning search for new episodes on RSS
May-28 15:58:27 INFO     SEARCHQUEUE-RSS-SEARCH :: Searching all providers for any needed episodes
May-28 15:58:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['ezrss']
May-28 15:58:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying EZRSS URL: https://www.ezrss.it/feed/
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73545']
May-28 15:58:29 DEBUG    CHECKVERSION :: Adding exception 73545: Battlestar Galactica
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73545', u'Battlestar Galactica']
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72549']
May-28 15:58:29 DEBUG    CHECKVERSION :: Adding exception 72549: Big Brother UK
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72549', u'Big Brother UK']
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'256300']
May-28 15:58:29 DEBUG    CHECKVERSION :: Adding exception 256300: Richard Hammonds Crash Course
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'256300', u'Richard Hammonds Crash Course']
May-28 15:58:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Success with url: https://www.ezrss.it/feed/
May-28 15:58:29 DEBUG    CHECKVERSION :: Adding exception 256300: Richard Hammond's Crash Course
May-28 15:58:29 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409) AND location != '')) AND season != 0 and episode != 0 AND airdate <= 735381 GROUP BY showid
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'256300', u"Richard Hammond's Crash Course"]
May-28 15:58:29 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7 GROUP BY showid
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'140141']
May-28 15:58:29 DEBUG    CHECKVERSION :: Adding exception 140141: Undercover Boss (US)
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'140141', u'Undercover Boss (US)']
May-28 15:58:29 DEBUG    CHECKVERSION :: Adding exception 140141: Undercover Boss US
May-28 15:58:29 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'140141', u'Undercover Boss US']
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72546']
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 72546: CSI
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72546', u'CSI']
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76808']
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 76808: Whose Line is it Anyway US
May-28 15:58:30 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401249509, 'ezrss']
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO lastUpdate (time, provider) VALUES (?, ?) with args [1401249509, 'ezrss']
May-28 15:58:30 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 15:58:30 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing EZRSS cache and updating with new information
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76808', u'Whose Line is it Anyway US']
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM ezrss WHERE 1
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'92091']
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 92091: MasterChef Australia
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'92091', u'MasterChef Australia']
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.720p.HDTV.X264-DIMENSION from the torrent link
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 92091: MasterChef AU
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'92091', u'MasterChef AU']
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82448']
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 82448: Project Runway Australia
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82448', u'Project Runway Australia']
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 82448: Project Runway AU
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82448', u'Project Runway AU']
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'164451']
May-28 15:58:30 DEBUG    CHECKVERSION :: Adding exception 164451: Carlos (2010)
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:30 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'164451', u'Carlos (2010)']
May-28 15:58:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: CREATE TABLE if not exists custom_exceptions (exception_id INTEGER PRIMARY KEY, tvdb_id INTEGER KEY, show_name TEXT)
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'279603']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 279603: The Face AU
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'279603', u'The Face AU']
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276360']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 276360: 19-2 CA
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'276360', u'19-2 CA']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248699']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 248699: 24 Hours In A And E
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248699', u'24 Hours In A And E']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'120431']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 120431: Food Factory
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'120431', u'Food Factory']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264141']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 264141: Falcon
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264141', u'Falcon']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71985']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 71985: Taboo
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71985', u'Taboo']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 71985: National Geographic Taboo
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71985', u'National Geographic Taboo']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'280446']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 280446: The Tom and Jerry Show
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'280446', u'The Tom and Jerry Show']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'100061']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 100061: Undercover Boss
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'100061', u'Undercover Boss']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 100061: Undercover Boss UK
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'100061', u'Undercover Boss UK']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'275493']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 275493: Backchat With Jack Whitehall And His Dad
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'275493', u'Backchat With Jack Whitehall And His Dad']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77444']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 77444: This Old House Program
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77444', u'This Old House Program']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'256394']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 256394: Lab Rats
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'256394', u'Lab Rats']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'166251']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 166251: Four Corners
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'166251', u'Four Corners']
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70994']
May-28 15:58:31 DEBUG    CHECKVERSION :: Adding exception 70994: MASH
May-28 15:58:31 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70994', u'MASH']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265467']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 265467: Polar Bear Family and Me
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265467', u'Polar Bear Family and Me']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249708']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 249708: The Car Show
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249708', u'The Car Show']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 249708: The Car Show 2011
May-28 15:58:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:58:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:58:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249708', u'The Car Show 2011']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253323']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 253323: Ninjago Masters Of Spinjitzu
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253323', u'Ninjago Masters Of Spinjitzu']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 253323: LEGO NinjaGo: Masters of Spinjitzu
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253323', u'LEGO NinjaGo: Masters of Spinjitzu']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71462']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 71462: Sharpes
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71462', u'Sharpes']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'120541']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 120541: Russell Howards Good News
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'120541', u'Russell Howards Good News']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 120541: Russell Howards Good News (UK)
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'120541', u'Russell Howards Good News (UK)']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273424']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 273424: David Attenboroughs Rise Of Animals
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'273424', u'David Attenboroughs Rise Of Animals']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'95521']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 95521: National Geographic Ancient Megastructures
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'95521', u'National Geographic Ancient Megastructures']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277169']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 277169: Faking It 2014
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'277169', u'Faking It 2014']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'178141']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 178141: My Ghost Story
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'178141', u'My Ghost Story']
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72164']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 72164: The O.C.
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72164', u'The O.C.']
May-28 15:58:32 DEBUG    CHECKVERSION :: Adding exception 72164: The OC
May-28 15:58:32 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72164', u'The OC']
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'210171']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 210171: The Killing (2011)
May-28 15:58:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Fargo']
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'210171', u'The Killing (2011)']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 210171: The Killing
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'210171', u'The Killing']
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71489']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 71489: Law & Order: CI
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71489', u'Law & Order: CI']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 71489: Law and Order CI
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71489', u'Law and Order CI']
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'212171']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 212171: My Little Pony: Friendship is Magic
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'212171', u'My Little Pony: Friendship is Magic']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 212171: My Little Pony Friendship is Magic
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'212171', u'My Little Pony Friendship is Magic']
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262927']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 262927: Ian Hislop's Stiff Upper Lip
May-28 15:58:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://re.zoink.it/0786782797', 1401249513, 4]
May-28 15:58:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Awkward.S04E07.HDTV.x264-2HD.[eztv].torrent
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262927', u"Ian Hislop's Stiff Upper Lip"]
May-28 15:58:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Awkward.S04E07.HDTV.x264-2HD from the torrent link
May-28 15:58:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.x264-2HD
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 262927: Ian Hislops Stiff Upper Lip An Emotional History Of Britain
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262927', u'Ian Hislops Stiff Upper Lip An Emotional History Of Britain']
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259047']
May-28 15:58:33 DEBUG    CHECKVERSION :: Adding exception 259047: VGHS
May-28 15:58:33 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'259047', u'VGHS']
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81580']
May-28 15:58:34 DEBUG    CHECKVERSION :: Adding exception 81580: Come Dine With Me UK
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81580', u'Come Dine With Me UK']
May-28 15:58:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'139481']
May-28 15:58:34 DEBUG    CHECKVERSION :: Adding exception 139481: 18 Kids And Counting
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139481', u'18 Kids And Counting']
May-28 15:58:34 DEBUG    CHECKVERSION :: Adding exception 139481: 17 Kids And Counting
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139481', u'17 Kids And Counting']
May-28 15:58:34 DEBUG    CHECKVERSION :: Adding exception 139481: 18 Kids And Counting
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139481', u'18 Kids And Counting']
May-28 15:58:34 DEBUG    CHECKVERSION :: Adding exception 139481: 17 Kids And Counting
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139481', u'17 Kids And Counting']
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79040']
May-28 15:58:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:58:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:34 DEBUG    CHECKVERSION :: Adding exception 79040: Britains Next Top Model
May-28 15:58:34 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79040', u'Britains Next Top Model']
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 79040: Britain and Irelands Next Top Model
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79040', u'Britain and Irelands Next Top Model']
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76237']
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 76237: Big Brother (Australia)
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76237', u'Big Brother (Australia)']
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 15:58:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 76237: Big Brother AU
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76237', u'Big Brother AU']
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76235']
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 76235: America's Funniest Home Videos
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76235', u"America's Funniest Home Videos"]
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 76235: AFHV
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76235', u'AFHV']
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79668']
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 79668: Anthony Bourdain: No Reservations
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79668', u'Anthony Bourdain: No Reservations']
May-28 15:58:35 DEBUG    CHECKVERSION :: Adding exception 79668: No Reservations
May-28 15:58:35 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79668', u'No Reservations']
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267206']
May-28 15:58:36 DEBUG    CHECKVERSION :: Adding exception 267206: Low Winter Sun US
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Awkward']
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.x264-2HD', 4, '|7|', 0, 0, 'http://re.zoink.it/7E86780eBE', 1401249516, 1]
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Riot.S01E02.HDTV.x264-BAJSKORV.[eztv].torrent
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Riot.S01E02.HDTV.x264-BAJSKORV from the torrent link
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Riot
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'267206', u'Low Winter Sun US']
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'202571']
May-28 15:58:36 DEBUG    CHECKVERSION :: Adding exception 202571: The Trip to Italy
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'202571', u'The Trip to Italy']
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271902']
May-28 15:58:36 DEBUG    CHECKVERSION :: Adding exception 271902: Legend of Shelby The Swamp Man
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271902', u'Legend of Shelby The Swamp Man']
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'156771']
May-28 15:58:36 DEBUG    CHECKVERSION :: Adding exception 156771: National Geographic Shark Men
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'156771', u'National Geographic Shark Men']
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'210771']
May-28 15:58:36 DEBUG    CHECKVERSION :: Adding exception 210771: Cake Boss Next Great Baker
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'210771', u'Cake Boss Next Great Baker']
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'196351']
May-28 15:58:36 DEBUG    CHECKVERSION :: Adding exception 196351: T.U.F.F. Puppy
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Riot in the DB
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Riot', u'Riot']
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Riot
May-28 15:58:36 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'196351', u'T.U.F.F. Puppy']
May-28 15:58:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Riot
May-28 15:58:37 DEBUG    CHECKVERSION :: Adding exception 196351: TUFF Puppy
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Riot']
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'196351', u'TUFF Puppy']
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Riot', u'Riot']
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Riot
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'257804']
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:37 DEBUG    CHECKVERSION :: Adding exception 257804: Too Cute!
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Riot']
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Riot.S01E02.HDTV.x264-BAJSKORV', 1, '|2|', 0, 0, 'http://re.zoink.it/7F86780aCC', 1401249517, 1]
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Night.Shift.S01E01.HDTV.x264-LOL.[eztv].torrent
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Night.Shift.S01E01.HDTV.x264-LOL from the torrent link
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'257804', u'Too Cute!']
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79590']
May-28 15:58:37 DEBUG    CHECKVERSION :: Adding exception 79590: Dancing With The Stars (US)
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79590', u'Dancing With The Stars (US)']
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77120']
May-28 15:58:37 DEBUG    CHECKVERSION :: Adding exception 77120: Aqua Teen Hunger Force
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:58:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77120', u'Aqua Teen Hunger Force']
May-28 15:58:37 DEBUG    CHECKVERSION :: Adding exception 77120: Aqua Unit Patrol Squad
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77120', u'Aqua Unit Patrol Squad']
May-28 15:58:37 DEBUG    CHECKVERSION :: Adding exception 77120: Aqua Unit Patrol Squad 1
May-28 15:58:37 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77120', u'Aqua Unit Patrol Squad 1']
May-28 15:58:38 DEBUG    CHECKVERSION :: Adding exception 77120: Aqua Something You Know Whatever
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77120', u'Aqua Something You Know Whatever']
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74626']
May-28 15:58:38 DEBUG    CHECKVERSION :: Adding exception 74626: The X Factor
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74626', u'The X Factor']
May-28 15:58:38 DEBUG    CHECKVERSION :: Adding exception 74626: The X Factor UK
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74626', u'The X Factor UK']
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'88321']
May-28 15:58:38 DEBUG    CHECKVERSION :: Adding exception 88321: Tabatha's Salon Takeover
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'88321', u"Tabatha's Salon Takeover"]
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'168161']
May-28 15:58:38 DEBUG    CHECKVERSION :: Adding exception 168161: Law & Order: Los Angeles
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'168161', u'Law & Order: Los Angeles']
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 15:58:38 DEBUG    CHECKVERSION :: Adding exception 168161: Law & Order: LA
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 15:58:38 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'168161', u'Law & Order: LA']
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249980']
May-28 15:58:39 DEBUG    CHECKVERSION :: Adding exception 249980: Restoration Home
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249980', u'Restoration Home']
May-28 15:58:39 DEBUG    CHECKVERSION :: Adding exception 249980: Restoration Home UK
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249980', u'Restoration Home UK']
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73696']
May-28 15:58:39 DEBUG    CHECKVERSION :: Adding exception 73696: CSI: New York
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Night.Shift']
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Night.Shift.S01E01.HDTV.x264-LOL', 1, '|1|', 0, 0, 'http://re.zoink.it/868678063E', 1401249519, 1]
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.HDTV.x264-LOL.[eztv].torrent
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.HDTV.x264-LOL from the torrent link
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.HDTV.x264-LOL
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73696', u'CSI: New York']
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'247381']
May-28 15:58:39 DEBUG    CHECKVERSION :: Adding exception 247381: Superscrimpers
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:39 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'247381', u'Superscrimpers']
May-28 15:58:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276148']
May-28 15:58:40 DEBUG    CHECKVERSION :: Adding exception 276148: Review With Forrest MacNeil
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'276148', u'Review With Forrest MacNeil']
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'131791']
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:58:40 DEBUG    CHECKVERSION :: Adding exception 131791: Sci-Fi Science
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.HDTV.x264-LOL', 1, '|7|', 0, 0, 'http://re.zoink.it/578677d62F', 1401249520, 1]
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'131791', u'Sci-Fi Science']
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Playing.House.S01E06.HDTV.x264-LOL.[eztv].torrent
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Playing.House.S01E06.HDTV.x264-LOL from the torrent link
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Playing.House.S01E06.HDTV.x264-LOL
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Playing House
May-28 15:58:40 DEBUG    CHECKVERSION :: Adding exception 131791: Sci-Fi Science: Physics of the Impossible
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'131791', u'Sci-Fi Science: Physics of the Impossible']
May-28 15:58:40 DEBUG    CHECKVERSION :: Adding exception 131791: Sci Fi Science Physics of the Impossible
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'131791', u'Sci Fi Science Physics of the Impossible']
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 15:58:40 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80379']
May-28 15:58:40 DEBUG    CHECKVERSION :: Adding exception 80379: The Big Bang Theory
May-28 15:58:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80379', u'The Big Bang Theory']
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Playing House in the DB
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 80379: Big Bang Theory
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80379', u'Big Bang Theory']
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 80379: TBBT
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80379', u'TBBT']
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'251418']
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Playing House
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 251418: Frozen Planet
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251418', u'Frozen Planet']
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 251418: David Attenborough Frozen Planet
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Playing.House']
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251418', u'David Attenborough Frozen Planet']
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 251418: BBC Frozen Planet
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251418', u'BBC Frozen Planet']
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'193821']
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 193821: Iron Man 2010
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'193821', u'Iron Man 2010']
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 193821: Iron Man 2011
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'193821', u'Iron Man 2011']
May-28 15:58:41 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270528']
May-28 15:58:41 DEBUG    CHECKVERSION :: Adding exception 270528: Blood And Oil 2013
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Playing.House']
May-28 15:58:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Playing.House.S01E06.HDTV.x264-LOL', 1, '|6|', 0, 0, 'http://re.zoink.it/2486768838', 1401249522, 1]
May-28 15:58:42 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'270528', u'Blood And Oil 2013']
May-28 15:58:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F.[eztv].torrent
May-28 15:58:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F from the torrent link
May-28 15:58:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 15:58:42 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262787']
May-28 15:58:42 DEBUG    CHECKVERSION :: Adding exception 262787: Homefront UK
May-28 15:58:42 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262787', u'Homefront UK']
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70327']
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 70327: Buffy the Vampire Slayer
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70327', u'Buffy the Vampire Slayer']
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Anthony Bourdain Parts Unknown
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 70327: Buffy
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70327', u'Buffy']
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269641']
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 269641: Chicago P D
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269641', u'Chicago P D']
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 269641: Chicago PD
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269641', u'Chicago PD']
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'230371']
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 230371: David Attenborough Madagascar
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'230371', u'David Attenborough Madagascar']
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74281']
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 74281: Have I Got News for You Uncut
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Anthony Bourdain Parts Unknown in the DB
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Anthony Bourdain Parts Unknown', u'Anthony Bourdain Parts Unknown']
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Anthony Bourdain Parts Unknown
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Anthony Bourdain Parts Unknown
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Anthony.Bourdain.Parts.Unknown']
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74281', u'Have I Got News for You Uncut']
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Anthony Bourdain Parts Unknown', u'Anthony Bourdain Parts Unknown']
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Anthony Bourdain Parts Unknown
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248835']
May-28 15:58:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 248835: Once Upon a Time (2011)
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248835', u'Once Upon a Time (2011)']
May-28 15:58:43 DEBUG    CHECKVERSION :: Adding exception 248835: Once Upon a Time
May-28 15:58:43 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248835', u'Once Upon a Time']
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248834']
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 248834: Last Man Standing (2011)
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248834', u'Last Man Standing (2011)']
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 248834: Last Man Standing US
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248834', u'Last Man Standing US']
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 248834: Last Man Standing
May-28 15:58:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Anthony.Bourdain.Parts.Unknown']
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248834', u'Last Man Standing']
May-28 15:58:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F', 3, '|6|', 0, 0, 'http://re.zoink.it/E879ec89eEB', 1401249524, 1]
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248836']
May-28 15:58:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Happy.Valley.S01E05.HDTV.x264-TLA.[eztv].torrent
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 248836: The River
May-28 15:58:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Happy.Valley.S01E05.HDTV.x264-TLA from the torrent link
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248836', u'The River']
May-28 15:58:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'139681']
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 139681: The Smoking Gun Presents: The World's Dumbest
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139681', u"The Smoking Gun Presents: The World's Dumbest"]
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 139681: World's Dumbest
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139681', u"World's Dumbest"]
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250153']
May-28 15:58:44 DEBUG    CHECKVERSION :: Adding exception 250153: Top Design Australia
May-28 15:58:44 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250153', u'Top Design Australia']
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 250153: Top Design AU
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250153', u'Top Design AU']
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250525']
May-28 15:58:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Happy Valley
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 250525: Hamish And Andys Gap Year
May-28 15:58:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250525', u'Hamish And Andys Gap Year']
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 250525: Hamish And Andys Euro Gap Year
May-28 15:58:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250525', u'Hamish And Andys Euro Gap Year']
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264450']
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 264450: Legit
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264450', u'Legit']
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83123']
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 83123: Merlin
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83123', u'Merlin']
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 83123: Merlin (2008)
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83123', u'Merlin (2008)']
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81391']
May-28 15:58:45 DEBUG    CHECKVERSION :: Adding exception 81391: Wie is de mol?
May-28 15:58:45 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81391', u'Wie is de mol?']
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 81391: Wie is de mol
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81391', u'Wie is de mol']
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 81391: widm
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81391', u'widm']
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262980']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Happy Valley in the DB
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Happy Valley', u'Happy Valley']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Happy Valley
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 262980: House of Cards 2013
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262980', u'House of Cards 2013']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Happy Valley
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74372']
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 74372: Blue Planet
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74372', u'Blue Planet']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Happy.Valley']
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'149101']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 149101: A League of Their Own (2010)
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'149101', u'A League of Their Own (2010)']
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 149101: A League of Their Own UK
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Happy Valley', u'Happy Valley']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Happy Valley
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'149101', u'A League of Their Own UK']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Happy.Valley']
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253543']
May-28 15:58:46 DEBUG    CHECKVERSION :: Adding exception 253543: All American Muslim
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Happy.Valley.S01E05.HDTV.x264-TLA', 1, '|5|', 0, 0, 'http://re.zoink.it/488675d3CD', 1401249526, 1]
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup from the torrent link
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup into a valid episode
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 15:58:46 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253543', u'All American Muslim']
May-28 15:58:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup.[MVGroup.org].torrent
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup from the torrent link
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 253543: All-American Muslim
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253543', u'All-American Muslim']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80159']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 80159: Sanctuary
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80159', u'Sanctuary']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 80159: Sanctuary US
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80159', u'Sanctuary US']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80625']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 80625: MegaStructures
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80625', u'MegaStructures']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 80625: National Geographic Megastructures
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80625', u'National Geographic Megastructures']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'198841']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 198841: Undercover Boss (Au)
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'198841', u'Undercover Boss (Au)']
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup into a valid episode
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Jonah.From.Tonga.S01E03.HDTV.x264-RiVER.[eztv].torrent
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Jonah.From.Tonga.S01E03.HDTV.x264-RiVER from the torrent link
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 198841: Undercover Boss Australia
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'198841', u'Undercover Boss Australia']
May-28 15:58:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Jonah From Tonga
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'174681']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 174681: Scooby-Doo! Mystery Incorporated
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'174681', u'Scooby-Doo! Mystery Incorporated']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 174681: Scooby Doo Mystery Incorporated
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'174681', u'Scooby Doo Mystery Incorporated']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264776']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 264776: Adam Hills In Gordon St Tonight
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264776', u'Adam Hills In Gordon St Tonight']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72829']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 72829: The Apprentice
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72829', u'The Apprentice']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 72829: The Apprentice US
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72829', u'The Apprentice US']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270307']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 270307: Family SOS with Jo Frost
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'270307', u'Family SOS with Jo Frost']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262353']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 262353: Leaving
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262353', u'Leaving']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 262353: Leaving UK
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262353', u'Leaving UK']
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'268855']
May-28 15:58:47 DEBUG    CHECKVERSION :: Adding exception 268855: Turbo FAST
May-28 15:58:47 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'268855', u'Turbo FAST']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75393']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 75393: The X Factor (AU)
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75393', u'The X Factor (AU)']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 75393: The X Factor Australia
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75393', u'The X Factor Australia']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82374']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 82374: Ultimate Factories
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82374', u'Ultimate Factories']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 82374: National Geographic Ultimate Factories
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82374', u'National Geographic Ultimate Factories']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73893']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 73893: Enterprise
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73893', u'Enterprise']
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72224']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 72224: The Outer Limits (1995)
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72224', u'The Outer Limits (1995)']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 72224: The Outer Limits: TNS
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72224', u'The Outer Limits: TNS']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 72224: The Outer Limits: The New Series
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Jonah From Tonga in the DB
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jonah From Tonga', u'Jonah From Tonga']
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jonah From Tonga
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jonah From Tonga
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jonah.From.Tonga']
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:48 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72224', u'The Outer Limits: The New Series']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'274129']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 274129: Klondike 2014
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'274129', u'Klondike 2014']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265252']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 265252: MasterChef Australia The Professionals
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265252', u'MasterChef Australia The Professionals']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'139941']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 139941: Childrens Hospital (US)
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139941', u'Childrens Hospital (US)']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 139941: Childrens Hospital
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'139941', u'Childrens Hospital']
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78846']
May-28 15:58:48 DEBUG    CHECKVERSION :: Adding exception 78846: Shameless UK
May-28 15:58:48 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78846', u'Shameless UK']
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72553']
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Mighty Morphin Power Rangers
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Mighty Morphin Power Rangers']
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Zeo
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Zeo']
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Turbo
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Turbo']
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers in Space
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jonah From Tonga', u'Jonah From Tonga']
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jonah From Tonga
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers in Space']
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Lost Galaxy
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Jonah.From.Tonga']
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Lost Galaxy']
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Ninja Storm
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jonah.From.Tonga.S01E03.HDTV.x264-RiVER', 1, '|3|', 0, 0, 'http://re.zoink.it/7A8672f3CB', 1401249529, 1]
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Ninja Storm']
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup from the torrent link
May-28 15:58:49 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Operation Overdrive
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Operation Overdrive']
May-28 15:58:49 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Samurai
May-28 15:58:49 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Samurai']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Super Samurai
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Super Samurai']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 72553: Power Rangers Megaforce
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72553', u'Power Rangers Megaforce']
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248261']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 248261: National Terrorism Strike Force: San Diego: Sport Utility Vehicle
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248261', u'National Terrorism Strike Force: San Diego: Sport Utility Vehicle']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 248261: National Terrorism Strike Force: San Diego: SUV
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248261', u'National Terrorism Strike Force: San Diego: SUV']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 248261: NTSF:SD:SUV::
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248261', u'NTSF:SD:SUV::']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 248261: NTSF SD SUV
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248261', u'NTSF SD SUV']
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83430']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 83430: National Geographic Banged Up Abroad
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83430', u'National Geographic Banged Up Abroad']
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'175101']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 175101: Travel Channel Culture Shock
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'175101', u'Travel Channel Culture Shock']
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'275723']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 275723: Panic Button US
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'275723', u'Panic Button US']
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'255045']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 255045: The L.A. Complex
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'255045', u'The L.A. Complex']
May-28 15:58:50 DEBUG    CHECKVERSION :: Adding exception 255045: The LA Complex
May-28 15:58:50 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'255045', u'The LA Complex']
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265406']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 265406: Out There 2013
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265406', u'Out There 2013']
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'213211']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 213211: Love Hate
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'213211', u'Love Hate']
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70870']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Real World Road Rules Challenge
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Real World Road Rules Challenge']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Cutthroat
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Cutthroat']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Battle Of The Exes
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Battle Of The Exes']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Rivals
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Rivals']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Battle Of The Seasons 2
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Battle Of The Seasons 2']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Rivals II
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Rivals II']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Rivals 2
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Rivals 2']
May-28 15:58:51 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 70870: The Challenge Free Agents
May-28 15:58:51 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70870', u'The Challenge Free Agents']
May-28 15:58:51 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'88631']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 88631: Krod Mandoon
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'88631', u'Krod Mandoon']
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77780']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 77780: G.I. Joe
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77780', u'G.I. Joe']
May-28 15:58:51 DEBUG    CHECKVERSION :: Adding exception 77780: GI Joe
May-28 15:58:51 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77780', u'GI Joe']
May-28 15:58:52 DEBUG    CHECKVERSION :: Adding exception 77780: G I Joe
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77780', u'G I Joe']
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250445']
May-28 15:58:52 DEBUG    CHECKVERSION :: Adding exception 250445: The Renovators
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250445', u'The Renovators']
May-28 15:58:52 DEBUG    CHECKVERSION :: Adding exception 250445: The Renovators AU
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250445', u'The Renovators AU']
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253485']
May-28 15:58:52 DEBUG    CHECKVERSION :: Adding exception 253485: The Syndicate 2012
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253485', u'The Syndicate 2012']
May-28 15:58:52 DEBUG    CHECKVERSION :: Adding exception 253485: The Syndicate
May-28 15:58:52 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253485', u'The Syndicate']
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73387']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 73387: The Late Late Show with Craig Ferguson
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73387', u'The Late Late Show with Craig Ferguson']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 73387: Craig Ferguson
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73387', u'Craig Ferguson']
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83897']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 83897: Life After People: The Series
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83897', u'Life After People: The Series']
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'187351']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 187351: This is England
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'187351', u'This is England']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 187351: This is England 86
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'187351', u'This is England 86']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 187351: This is England 88
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'187351', u'This is England 88']
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71470']
May-28 15:58:53 DEBUG    CHECKVERSION :: Adding exception 71470: Star Trek: The Next Generation
May-28 15:58:53 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71470', u'Star Trek: The Next Generation']
May-28 15:58:54 DEBUG    CHECKVERSION :: Adding exception 71470: Star Trek TNG
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71470', u'Star Trek TNG']
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248841']
May-28 15:58:54 DEBUG    CHECKVERSION :: Adding exception 248841: Scandal US
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248841', u'Scandal US']
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263387']
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:54 DEBUG    CHECKVERSION :: Adding exception 263387: Cedar Cove
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263387', u'Cedar Cove']
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'220441']
May-28 15:58:54 DEBUG    CHECKVERSION :: Adding exception 220441: R L Stines The Haunting Hour The Series
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'220441', u'R L Stines The Haunting Hour The Series']
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:54 DEBUG    CHECKVERSION :: Adding exception 220441: R L Stines The Haunting Hour
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'220441', u'R L Stines The Haunting Hour']
May-28 15:58:54 DEBUG    CHECKVERSION :: Adding exception 220441: R.L. Stine's The Haunting Hour The Series
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Tims.Vermeer']
May-28 15:58:54 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'220441', u"R.L. Stine's The Haunting Hour The Series"]
May-28 15:58:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup', 1, '|6|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=NbXVq5lF6DqYPi4MqcO9XzWI%2F5I%3D', 1401249534, 2]
May-28 15:58:55 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:58:55 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup from the torrent link
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72073']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 72073: Star Trek DS9
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72073', u'Star Trek DS9']
May-28 15:58:55 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80665']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 80665: The Next Iron Chef Redemption
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80665', u'The Next Iron Chef Redemption']
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260586']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 260586: Cosmos A Space Time Odyssey
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260586', u'Cosmos A Space Time Odyssey']
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'222551']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 222551: Only in America With Larry the Cable Guy
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'222551', u'Only in America With Larry the Cable Guy']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 222551: Only in America
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'222551', u'Only in America']
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81346']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: The Underbelly Files
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'The Underbelly Files']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly Files
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly Files']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly A Tale of Two Cities
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly A Tale of Two Cities']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly Razor
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly Razor']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly The Golden Mile
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly The Golden Mile']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly Badness
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly Badness']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly Squizzy
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly Squizzy']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 81346: Underbelly A Tale Of Two Cities UNCUT
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81346', u'Underbelly A Tale Of Two Cities UNCUT']
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264030']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 264030: Avengers Assemble
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264030', u'Avengers Assemble']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 264030: Marvels Avengers Assemble
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264030', u'Marvels Avengers Assemble']
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78051']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 78051: Never Mind the Buzzcocks
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78051', u'Never Mind the Buzzcocks']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 78051: Never Mind the Buzzcocks UK
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78051', u'Never Mind the Buzzcocks UK']
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'97731']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 97731: Tosh.0
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'97731', u'Tosh.0']
May-28 15:58:55 DEBUG    CHECKVERSION :: Adding exception 97731: Tosh 0
May-28 15:58:55 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'97731', u'Tosh 0']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79824']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 79824: Naruto Shippuden
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79824', u'Naruto Shippuden']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'278976']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 278976: The Comic Artist and His Assistants
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'278976', u'The Comic Artist and His Assistants']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75748']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 75748: The Culture Show Uncut
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75748', u'The Culture Show Uncut']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80101']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 80101: Harry And Paul
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80101', u'Harry And Paul']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'152831']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 152831: Adventure Time with Finn and Jake
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'152831', u'Adventure Time with Finn and Jake']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271936']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 271936: Played CA
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271936', u'Played CA']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'205901']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 205901: Transformers Prime
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'205901', u'Transformers Prime']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 205901: Transformers Prime Beast Hunters
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'205901', u'Transformers Prime Beast Hunters']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261202']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 261202: DreamWorks Dragons: Riders of Berk
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261202', u'DreamWorks Dragons: Riders of Berk']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 261202: Dragons Riders of Berk
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261202', u'Dragons Riders of Berk']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 261202: DreamWorks Dragons Riders of Berk
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261202', u'DreamWorks Dragons Riders of Berk']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 261202: Dragons Defenders of Berk
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261202', u'Dragons Defenders of Berk']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75692']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 75692: Law & Order: SVU
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75692', u'Law & Order: SVU']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77526']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 77526: Star Trek: TOS
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77526', u'Star Trek: TOS']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'105521']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 105521: The Colony
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'105521', u'The Colony']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 105521: The Colony (US)
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'105521', u'The Colony (US)']
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78804']
May-28 15:58:56 DEBUG    CHECKVERSION :: Adding exception 78804: Doctor Who 2005
May-28 15:58:56 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78804', u'Doctor Who 2005']
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'204371']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 204371: AuctionHunters
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'204371', u'AuctionHunters']
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70726']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 70726: Babylon 5
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70726', u'Babylon 5']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 70726: Babylon5
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70726', u'Babylon5']
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73587']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 73587: The Twilight Zone 1959
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73587', u'The Twilight Zone 1959']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 73587: The Twilight Zone 1960
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73587', u'The Twilight Zone 1960']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 73587: The Twilight Zone 1961
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73587', u'The Twilight Zone 1961']
May-28 15:58:57 DEBUG    CHECKVERSION :: Adding exception 73587: The Twilight Zone 1962
May-28 15:58:57 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73587', u'The Twilight Zone 1962']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 73587: The Twilight Zone 1963
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73587', u'The Twilight Zone 1963']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 73587: The Twilight Zone 1964
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73587', u'The Twilight Zone 1964']
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'132591']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 132591: 7 Days (2009)
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'132591', u'7 Days (2009)']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 132591: 7 Days NZ
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'132591', u'7 Days NZ']
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260165']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 260165: Chasing UFOs
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260165', u'Chasing UFOs']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 260165: National Geographic Chasing UFOs
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260165', u'National Geographic Chasing UFOs']
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'85168']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 85168: How the Earth Was Made
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'85168', u'How the Earth Was Made']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 85168: History channel How the Earth Was Made
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'85168', u'History channel How the Earth Was Made']
May-28 15:58:58 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250015']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 250015: The Indestructibles
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250015', u'The Indestructibles']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 250015: The Indestructibles US
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250015', u'The Indestructibles US']
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'227161']
May-28 15:58:58 DEBUG    CHECKVERSION :: Adding exception 227161: Oprah Presents Master Class
May-28 15:58:58 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'227161', u'Oprah Presents Master Class']
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 227161: Oprah's Master Class
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'227161', u"Oprah's Master Class"]
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'254067']
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 254067: DUI
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'254067', u'DUI']
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 254067: D U I
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'254067', u'D U I']
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 254067: D.U.I
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'254067', u'D.U.I']
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248789']
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 248789: Smash (2012)
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Great Crimes And Trials Collection', u'Great Crimes And Trials Collection']
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Great Crimes And Trials Collection
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Great.Crimes.And.Trials.Collection']
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=EFRTNO4n%2BSjhqqyZJtyQsDM2VZ8%3D', 1401249539, 1]
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup from the torrent link
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248789', u'Smash (2012)']
May-28 15:58:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 248789: Smash
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248789', u'Smash']
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'88771']
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 88771: The Apprentice: You're Fired!
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'88771', u"The Apprentice: You're Fired!"]
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 88771: The Apprentice UK Youre Fired
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'88771', u'The Apprentice UK Youre Fired']
May-28 15:58:59 DEBUG    CHECKVERSION :: Adding exception 88771: The Apprentice UK Your Fired
May-28 15:58:59 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'88771', u'The Apprentice UK Your Fired']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 88771: The Apprentice Youre Fired
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'88771', u'The Apprentice Youre Fired']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74768']
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=y6hsBryKUyTKN1R7Q9NFjUBf%2FiE%3D', 1401249540, 1]
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS.[eztv].torrent
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS from the torrent link
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block']
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block AU
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block AU']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block All Stars
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block All Stars']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block All Stars AU
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block All Stars AU']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block AU All Stars
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block AU All Stars']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block AU Sky High
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block AU Sky High']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 74768: The Block AU Fans vs Faves
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74768', u'The Block AU Fans vs Faves']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267543']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 267543: Hulk and the Agents of S M A S H
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Craig Ferguson', u'Craig Ferguson']
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Craig Ferguson
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'267543', u'Hulk and the Agents of S M A S H']
May-28 15:59:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 267543: Hulk and the Agents of SMASH
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'267543', u'Hulk and the Agents of SMASH']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80964']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 80964: Yo Gabba Gabba
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80964', u'Yo Gabba Gabba']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271241']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 271241: Deal With It US
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271241', u'Deal With It US']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83268']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 83268: Star Wars The Clone Wars 2008
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83268', u'Star Wars The Clone Wars 2008']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 83268: Star Wars The Clone Wars
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83268', u'Star Wars The Clone Wars']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'194261']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 194261: PhoneShop
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'194261', u'PhoneShop']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 194261: Phone Shop
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'194261', u'Phone Shop']
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'251334']
May-28 15:59:00 DEBUG    CHECKVERSION :: Adding exception 251334: Lawless UK
May-28 15:59:00 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251334', u'Lawless UK']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70336']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 70336: The Tonight Show with Jay Leno
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70336', u'The Tonight Show with Jay Leno']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 70336: Jay Leno
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70336', u'Jay Leno']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'155201']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 155201: Louie (2010)
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'155201', u'Louie (2010)']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 155201: Louie
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'155201', u'Louie']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269584']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 269584: Rake US
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269584', u'Rake US']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82467']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 82467: Eastbound and Down
May-28 15:59:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Craig.Ferguson']
May-28 15:59:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS', 1, '||', 0, 0, 'http://re.zoink.it/236ec13378', 1401249541, 1]
May-28 15:59:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.HDTV.x264-2HD.[eztv].torrent
May-28 15:59:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.HDTV.x264-2HD from the torrent link
May-28 15:59:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 15:59:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82467', u'Eastbound and Down']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 82467: Eastbound Down
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82467', u'Eastbound Down']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83462']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 83462: Castle (2009)
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83462', u'Castle (2009)']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 83462: Castle
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83462', u'Castle']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 83462: Castle 2009
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83462', u'Castle 2009']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269637']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 269637: The Michael J Fox Show
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269637', u'The Michael J Fox Show']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277528']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 277528: Love Child AU
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'277528', u'Love Child AU']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'94551']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 94551: Parenthood (2010)
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'94551', u'Parenthood (2010)']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 94551: Parenthood
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'94551', u'Parenthood']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 94551: Parenthood 2010
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'94551', u'Parenthood 2010']
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'122521']
May-28 15:59:01 DEBUG    CHECKVERSION :: Adding exception 122521: The Fresh Beat Band
May-28 15:59:01 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'122521', u'The Fresh Beat Band']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 122521: Fresh Beat Band
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'122521', u'Fresh Beat Band']
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75567']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 75567: The Xtra Factor
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75567', u'The Xtra Factor']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 75567: The Xtra Factor UK
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75567', u'The Xtra Factor UK']
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73244']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 73244: The Office (US)
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73244', u'The Office (US)']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 73244: The Office
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73244', u'The Office']
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73246']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 73246: 30 Minute Meals
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73246', u'30 Minute Meals']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 73246: 30 Minute Meals with Rachel Ray
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73246', u'30 Minute Meals with Rachel Ray']
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'193501']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 193501: XIII
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'193501', u'XIII']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 193501: XIII (2011)
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'193501', u'XIII (2011)']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 193501: XIII The Series (2011)
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'193501', u'XIII The Series (2011)']
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84489']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 84489: Masterchef
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84489', u'Masterchef']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 84489: MasterChef UK
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84489', u'MasterChef UK']
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81491']
May-28 15:59:02 DEBUG    CHECKVERSION :: Adding exception 81491: Big Brother After Dark
May-28 15:59:02 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81491', u'Big Brother After Dark']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 81491: Big Brother US After Dark
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81491', u'Big Brother US After Dark']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 81491: Big Brother After Dark US
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81491', u'Big Brother After Dark US']
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248935']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 248935: Touch (2012)
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248935', u'Touch (2012)']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 248935: Touch
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248935', u'Touch']
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'252019']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 252019: The Bridge 2011
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'252019', u'The Bridge 2011']
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74946']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 74946: C O P S
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74946', u'C O P S']
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261240']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 261240: H+
May-28 15:59:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261240', u'H+']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 261240: H
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261240', u'H']
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'280361']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 280361: Prey UK
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'280361', u'Prey UK']
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79905']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 79905: Tim and Eric Awesome Show
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79905', u'Tim and Eric Awesome Show']
May-28 15:59:03 DEBUG    CHECKVERSION :: Adding exception 79905: Tim and Erics Awesome Show Great Job
May-28 15:59:03 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79905', u'Tim and Erics Awesome Show Great Job']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80018']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 80018: Nick Cannon Presents Wild N Out
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80018', u'Nick Cannon Presents Wild N Out']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250331']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 250331: Richard Hammond's Journey To...
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250331', u"Richard Hammond's Journey To..."]
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 250331: Richard Hammonds Journey To
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250331', u'Richard Hammonds Journey To']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80226']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 80226: Inspector George Gently
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80226', u'Inspector George Gently']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 80226: George Gently
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80226', u'George Gently']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'212571']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 212571: Come Fly With Me (2010)
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'212571', u'Come Fly With Me (2010)']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78125']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 78125: 22 Minutes
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78125', u'22 Minutes']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76168']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 76168: Batman: The Animated Series
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76168', u'Batman: The Animated Series']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 76168: Batman: TAS
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76168', u'Batman: TAS']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79330']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 79330: Jericho
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79330', u'Jericho']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260839']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 260839: MasterChef Allstars AU
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260839', u'MasterChef Allstars AU']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72716']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 72716: QI XL
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72716', u'QI XL']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 72716: BBC QI XL
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72716', u'BBC QI XL']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 72716: BBC QI XL (Quite Interesting)
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72716', u'BBC QI XL (Quite Interesting)']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 72716: BBC QI
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72716', u'BBC QI']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 72716: BBC QI (Quite Interesting)
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72716', u'BBC QI (Quite Interesting)']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267260']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 267260: Intelligence US
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'267260', u'Intelligence US']
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83714']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 83714: Genius
May-28 15:59:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 15:59:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83714', u'Genius']
May-28 15:59:04 DEBUG    CHECKVERSION :: Adding exception 83714: Genius With Dave Gormand
May-28 15:59:04 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83714', u'Genius With Dave Gormand']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260206']
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 260206: Gordon Behind Bars
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260206', u'Gordon Behind Bars']
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 260206: Gordon Ramsay Behind Bars
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260206', u'Gordon Ramsay Behind Bars']
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Boondocks']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'195831']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 195831: Zane Lamprey's Drinking Made Easy
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.HDTV.x264-2HD', 4, '|6|', 0, 0, 'http://re.zoink.it/41866ed9D2', 1401249545, 1]
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'195831', u"Zane Lamprey's Drinking Made Easy"]
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL.[eztv].torrent
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL from the torrent link
May-28 15:59:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84146']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 84146: Secret Millionaire
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84146', u'Secret Millionaire']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 84146: Secret Millionaire US
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84146', u'Secret Millionaire US']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75382']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 75382: The Ultimate Fighter Live
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75382', u'The Ultimate Fighter Live']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 75382: The Ultimate Fighter Fridays
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75382', u'The Ultimate Fighter Fridays']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 75382: The Ultimate Fighter
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75382', u'The Ultimate Fighter']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265145']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 265145: David Attenboroughs Africa
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265145', u'David Attenboroughs Africa']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81230']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 81230: Celebrity Rehab with Dr Drew
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81230', u'Celebrity Rehab with Dr Drew']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80522']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 80522: Who Do You Think You Are?
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80522', u'Who Do You Think You Are?']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 80522: Who Do You Think You Are UK
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80522', u'Who Do You Think You Are UK']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248503']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 248503: The Hour (2011)
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248503', u'The Hour (2011)']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 248503: The Hour UK 2011
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248503', u'The Hour UK 2011']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 248503: The Hour 2011
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248503', u'The Hour 2011']
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73562']
May-28 15:59:05 DEBUG    CHECKVERSION :: Adding exception 73562: Beast Wars Transformers
May-28 15:59:05 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73562', u'Beast Wars Transformers']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'220141']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 220141: Wolverine
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'220141', u'Wolverine']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 220141: Wolverine 2011
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'220141', u'Wolverine 2011']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265393']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 265393: The Legends of Chima
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265393', u'The Legends of Chima']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 265393: The Legends of Chima
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265393', u'The Legends of Chima']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273383']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 273383: The House That 100k Built
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'273383', u'The House That 100k Built']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'255693']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 255693: Undercover Boss Canada
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'255693', u'Undercover Boss Canada']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 255693: Undercover Boss CA
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'255693', u'Undercover Boss CA']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75032']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 75032: Cathouse The Series
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75032', u'Cathouse The Series']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 75032: CatHouse
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75032', u'CatHouse']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270262']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 270262: Seth Meyers
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'270262', u'Seth Meyers']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270261']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 270261: Jimmy Fallon
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'270261', u'Jimmy Fallon']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249892']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 249892: Extreme Chef
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249892', u'Extreme Chef']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 249892: Extreme Chefs
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249892', u'Extreme Chefs']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'221001']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 221001: 10 O Clock Live
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'221001', u'10 O Clock Live']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71998']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 71998: Jimmy Kimmel Live
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71998', u'Jimmy Kimmel Live']
May-28 15:59:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 71998: Jimmy Kimmel
May-28 15:59:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71998', u'Jimmy Kimmel']
May-28 15:59:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'254112']
May-28 15:59:06 DEBUG    CHECKVERSION :: Adding exception 254112: Titanic 2012
May-28 15:59:06 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'254112', u'Titanic 2012']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276515']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 276515: Curse of Oak Island
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'276515', u'Curse of Oak Island']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70760']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 70760: Celebrity Big Brother
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70760', u'Celebrity Big Brother']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 70760: Celebrity Big Brother UK
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70760', u'Celebrity Big Brother UK']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264535']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 264535: Storage Wars NY
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264535', u'Storage Wars NY']
May-28 15:59:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253982']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 253982: Common Law (2012)
May-28 15:59:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253982', u'Common Law (2012)']
May-28 15:59:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 253982: Common Law
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253982', u'Common Law']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261690']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 261690: The Americans
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261690', u'The Americans']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80915']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 80915: La Linea 1972
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80915', u'La Linea 1972']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 80915: La Linea 1972
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80915', u'La Linea 1972']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259669']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 259669: DaVincis Demons
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'259669', u'DaVincis Demons']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'110381']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 110381: Archer
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'110381', u'Archer']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'251807']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 251807: Green Lantern: The Animated Series
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251807', u'Green Lantern: The Animated Series']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 251807: Green Lantern TAS
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251807', u'Green Lantern TAS']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 251807: Green Lantern The Animated Series
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'251807', u'Green Lantern The Animated Series']
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81386']
May-28 15:59:07 DEBUG    CHECKVERSION :: Adding exception 81386: Being Human
May-28 15:59:07 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81386', u'Being Human']
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 81386: Being Human (UK)
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81386', u'Being Human (UK)']
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'118001']
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 118001: Beauty and the Geek Australia
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'118001', u'Beauty and the Geek Australia']
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 118001: Beauty and the Geek AU
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'118001', u'Beauty and the Geek AU']
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74512']
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 74512: Wife Swap (US)
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74512', u'Wife Swap (US)']
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'199031']
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 199031: Click and Clack As the Wrench Turns
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'199031', u'Click and Clack As the Wrench Turns']
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77733']
May-28 15:59:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 15:59:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 15:59:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 77733: Degrassi: The Next Generation
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77733', u'Degrassi: The Next Generation']
May-28 15:59:08 DEBUG    CHECKVERSION :: Adding exception 77733: Degrassi TNG
May-28 15:59:08 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77733', u'Degrassi TNG']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 77733: Degrassi
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77733', u'Degrassi']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259106']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 259106: Emily Owens M D
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL', 4, '|6|', 0, 0, 'http://re.zoink.it/EE866ed155', 1401249548, 1]
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Listener.S05E01.HDTV.x264-KILLERS.[eztv].torrent
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Listener.S05E01.HDTV.x264-KILLERS from the torrent link
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'259106', u'Emily Owens M D']
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 259106: Emily Owens MD
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'259106', u'Emily Owens MD']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'85228']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 85228: Law & Order: UK
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 15:59:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'85228', u'Law & Order: UK']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 85228: Law and Order UK
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'85228', u'Law and Order UK']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71788']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 71788: Superman: The Animated Series
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71788', u'Superman: The Animated Series']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 71788: Superman TAS
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71788', u'Superman TAS']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76736']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 76736: The Black Adder
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76736', u'The Black Adder']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 76736: BlackAdder
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76736', u'BlackAdder']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277568']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 277568: Babylon
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'277568', u'Babylon']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83774']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 83774: Antiques Roadshow (UK)
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83774', u'Antiques Roadshow (UK)']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 83774: Antiques Roadshow UK
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83774', u'Antiques Roadshow UK']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249229']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 249229: A.N.T Farm
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249229', u'A.N.T Farm']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 249229: ANT Farm
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249229', u'ANT Farm']
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79565']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 79565: The Real Hustle
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79565', u'The Real Hustle']
May-28 15:59:09 DEBUG    CHECKVERSION :: Adding exception 79565: The Real Hustle UK
May-28 15:59:09 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79565', u'The Real Hustle UK']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79836']
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 79836: Dragon's Den (UK)
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79836', u"Dragon's Den (UK)"]
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273986']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 273986: Breathless UK
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'273986', u'Breathless UK']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72194']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 72194: The Ellen Degeneres Show
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72194', u'The Ellen Degeneres Show']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 72194: Ellen Degeneres
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72194', u'Ellen Degeneres']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'223161']
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Listener']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 223161: CBC Marketplace
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Listener.S05E01.HDTV.x264-KILLERS', 5, '|1|', 0, 0, 'http://piratebaytorrents.info/10238027/The_Listener_S05E01_HDTV_x264-KILLERS.10238027.TPB.torrent', 1401249550, 1]
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup from the torrent link
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'223161', u'CBC Marketplace']
May-28 15:59:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260489']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 260489: National Geographic Caught In The Act
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'260489', u'National Geographic Caught In The Act']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250095']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 250095: The Marriage Ref(UK)
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250095', u'The Marriage Ref(UK)']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 250095: The Marriage Ref UK
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250095', u'The Marriage Ref UK']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271632']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 271632: Lucas Bros Moving Company
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271632', u'Lucas Bros Moving Company']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'198861']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 198861: Film 2013 with Claudia Winkleman
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'198861', u'Film 2013 with Claudia Winkleman']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 198861: Film 2012 with Claudia Winkleman
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'198861', u'Film 2012 with Claudia Winkleman']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 198861: Film 2011 with Claudia Winkleman
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'198861', u'Film 2011 with Claudia Winkleman']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 198861: Film 2014 with Claudia Winkleman
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'198861', u'Film 2014 with Claudia Winkleman']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81670']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 81670: The Murdoch Mysteries
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81670', u'The Murdoch Mysteries']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 81670: Murdoch Mysteries
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81670', u'Murdoch Mysteries']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 81670: The Murdoch Mysteries (2008)
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81670', u'The Murdoch Mysteries (2008)']
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76133']
May-28 15:59:10 DEBUG    CHECKVERSION :: Adding exception 76133: Poirot
May-28 15:59:10 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76133', u'Poirot']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 76133: Agatha Christie's Poirot
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76133', u"Agatha Christie's Poirot"]
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 76133: Agatha Christie Poirot
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76133', u'Agatha Christie Poirot']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72663']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 72663: Accused
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72663', u'Accused']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 72663: Accused UK
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72663', u'Accused UK']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'256204']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 256204: 666 Park Avenue
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'256204', u'666 Park Avenue']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 256204: Park Avenue
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'256204', u'Park Avenue']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72449']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 72449: Stargate SG1
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72449', u'Stargate SG1']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267709']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 267709: Kesha My Crazy Beautiful Life
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'267709', u'Kesha My Crazy Beautiful Life']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76119']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 76119: NOVA
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76119', u'NOVA']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 76119: PBS NOVA
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76119', u'PBS NOVA']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77398']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 77398: X-Files
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'77398', u'X-Files']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80290']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 80290: Jamie Oliver Jamies Kitchen
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80290', u'Jamie Oliver Jamies Kitchen']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269538']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 269538: Satisfaction CA
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269538', u'Satisfaction CA']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'92361']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 92361: Known Universe
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'92361', u'Known Universe']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 92361: National Geographic Known Universe
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'92361', u'National Geographic Known Universe']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80552']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 80552: Kitchen Nightmares (US)
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80552', u'Kitchen Nightmares (US)']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 80552: Kitchen Nightmares US
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80552', u'Kitchen Nightmares US']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271958']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 271958: Arsenio Hall
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271958', u'Arsenio Hall']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264679']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 264679: National Geographic UFO Europe Untold Stories
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264679', u'National Geographic UFO Europe Untold Stories']
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'168621']
May-28 15:59:11 DEBUG    CHECKVERSION :: Adding exception 168621: Melissa & Joey
May-28 15:59:11 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'168621', u'Melissa & Joey']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 168621: Melissa and Joey
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'168621', u'Melissa and Joey']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71699']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 71699: The Outer Limits (1963)
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71699', u'The Outer Limits (1963)']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265373']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 265373: David Attenboroughs Galapagos
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'265373', u'David Attenboroughs Galapagos']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81559']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 81559: The Biggest Loser Australia
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81559', u'The Biggest Loser Australia']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 81559: The Biggest Loser AU
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81559', u'The Biggest Loser AU']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'122401']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 122401: Discovery Channel Cool Stuff and How it works
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'122401', u'Discovery Channel Cool Stuff and How it works']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 122401: Cool Stuff and How it works
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'122401', u'Cool Stuff and How it works']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'268591']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 268591: The Tomorrow People US
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'268591', u'The Tomorrow People US']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 268591: Tomorrow People
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'268591', u'Tomorrow People']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 268591: The Tomorrow People
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'268591', u'The Tomorrow People']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76817']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 76817: The Ponderosa
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76817', u'The Ponderosa']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276526']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 276526: Legend of Mick Dodge
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'276526', u'Legend of Mick Dodge']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'254798']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 254798: Stella (2012)
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'254798', u'Stella (2012)']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 254798: Stella UK
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'254798', u'Stella UK']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269586']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 269586: Brooklyn Nine Nine
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269586', u'Brooklyn Nine Nine']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269589']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 269589: Dads
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269589', u'Dads']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84312']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 84312: Click (2000)
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84312', u'Click (2000)']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 84312: Click UK
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84312', u'Click UK']
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82918']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 82918: Diners, Drive-ins and Dives
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82918', u'Diners, Drive-ins and Dives']
May-28 15:59:12 DEBUG    CHECKVERSION :: Adding exception 82918: Diners Drive ins and Dives
May-28 15:59:12 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82918', u'Diners Drive ins and Dives']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 82918: Diners Driveins and Dives
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82918', u'Diners Driveins and Dives']
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'208111']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 208111: Gold Rush
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'208111', u'Gold Rush']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 208111: Gold Rush: Alaska
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'208111', u'Gold Rush: Alaska']
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'113901']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 113901: The Super Hero Squad Show
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'113901', u'The Super Hero Squad Show']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 113901: The Super Hero Squad
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'113901', u'The Super Hero Squad']
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'257550']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 257550: Bellator FC
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'257550', u'Bellator FC']
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73255']
May-28 15:59:13 DEBUG    CHECKVERSION :: Adding exception 73255: House
May-28 15:59:13 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73255', u'House']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 73255: House M D
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73255', u'House M D']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273005']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 273005: Ace of The Diamond
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'273005', u'Ace of The Diamond']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273002']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 273002: I Couldnt Become a Hero So I Reluctantly Decided to Get a Job
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'273002', u'I Couldnt Become a Hero So I Reluctantly Decided to Get a Job']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264085']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 264085: The Bridge US
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'264085', u'The Bridge US']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'192061']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 192061: Young Justice
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'192061', u'Young Justice']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 192061: Young Justice Invasion
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'192061', u'Young Justice Invasion']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76779']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 76779: WWE Monday Night RAW
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76779', u'WWE Monday Night RAW']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74897']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 74897: Hells Kitchen US
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74897', u'Hells Kitchen US']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 74897: Hells Kitchen
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'74897', u'Hells Kitchen']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'266388']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 266388: David Attenboroughs Natural Curiosities
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'266388', u'David Attenboroughs Natural Curiosities']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277171']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 277171: Tough Young Teachers UK
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'277171', u'Tough Young Teachers UK']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76104']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 76104: The Mole AU
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76104', u'The Mole AU']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76107']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 76107: Doctor Who Classic
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76107', u'Doctor Who Classic']
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248618']
May-28 15:59:14 DEBUG    CHECKVERSION :: Adding exception 248618: The Amazing Race Australia
May-28 15:59:14 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248618', u'The Amazing Race Australia']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 248618: The Amazing Race AU
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248618', u'The Amazing Race AU']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'197001']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 197001: Supernatural The Animation
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'197001', u'Supernatural The Animation']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 197001: Supernatural: TAS
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'197001', u'Supernatural: TAS']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'252312']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 252312: Jessie
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'252312', u'Jessie']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253931']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 253931: Rob
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253931', u'Rob']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'189931']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 189931: RBT (AU)
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'189931', u'RBT (AU)']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'252319']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 252319: Dragons' Den: How To Win In The Den
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'252319', u"Dragons' Den: How To Win In The Den"]
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 252319: How to win in the Den
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'252319', u'How to win in the Den']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70578']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 70578: Highway Patrol
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70578', u'Highway Patrol']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 70578: Highway Patrol (AU)
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70578', u'Highway Patrol (AU)']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70572']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 70572: Little Rascals
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70572', u'Little Rascals']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 70572: The Little Rascals
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'70572', u'The Little Rascals']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'274099']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 274099: At Midnight
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'274099', u'At Midnight']
May-28 15:59:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82135']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 82135: The Gruen Transfer
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82135', u'The Gruen Transfer']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 82135: Gruen Nation
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82135', u'Gruen Nation']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 82135: Gruen Sweat
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'82135', u'Gruen Sweat']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'272391']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 272391: Karl Pilkington The Moaning Of Life
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'272391', u'Karl Pilkington The Moaning Of Life']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72306']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 72306: The Venture Brothers
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72306', u'The Venture Brothers']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'90621']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 90621: Discovery Channel Sunrise Earth
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'90621', u'Discovery Channel Sunrise Earth']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 90621: Sunrise Earth
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'90621', u'Sunrise Earth']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84133']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 84133: Manhunters: Fugitive Task Force
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84133', u'Manhunters: Fugitive Task Force']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 84133: Manhunters - Fugitive Task Force
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'84133', u'Manhunters - Fugitive Task Force']
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248812']
May-28 15:59:15 DEBUG    CHECKVERSION :: Adding exception 248812: Dont Trust the Bitch in Apartment 23
May-28 15:59:15 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248812', u'Dont Trust the Bitch in Apartment 23']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 248812: Apartment 23
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248812', u'Apartment 23']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'194751']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 194751: Conan
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'194751', u'Conan']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 194751: Conan (2010)
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'194751', u'Conan (2010)']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'129261']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 129261: Spartacus
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'129261', u'Spartacus']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 129261: Spartacus Blood and Sand
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'129261', u'Spartacus Blood and Sand']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 129261: Spartacus Vengeance
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'129261', u'Spartacus Vengeance']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79212']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 79212: The Dog Whisperer
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79212', u'The Dog Whisperer']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 79212: Dog Whisperer
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79212', u'Dog Whisperer']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78949']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 78949: Thomas The Tank Engine & Friends
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78949', u'Thomas The Tank Engine & Friends']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 78949: Thomas And Friends
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78949', u'Thomas And Friends']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'275777']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 275777: Wild Burma
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'275777', u'Wild Burma']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80994']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 80994: National Geographic Channel Naked Science
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80994', u'National Geographic Channel Naked Science']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 80994: National Geographic Naked Science
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80994', u'National Geographic Naked Science']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'164951']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 164951: Shit My Dad Says
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'164951', u'Shit My Dad Says']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'238521']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 238521: Adam Eva
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'238521', u'Adam Eva']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71256']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 71256: The Daily Show
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71256', u'The Daily Show']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 71256: The Daily Show with Jon Stewart
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'71256', u'The Daily Show with Jon Stewart']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73599']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 73599: Dark Shadows (1966)
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73599', u'Dark Shadows (1966)']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 73599: Dark Shadows The Beginning
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73599', u'Dark Shadows The Beginning']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'90651']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 90651: Selling Houses Australia
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'90651', u'Selling Houses Australia']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 90651: Selling Houses Australia Extreme
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'90651', u'Selling Houses Australia Extreme']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73178']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 73178: Two Guys a Girl and a Pizza Place
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73178', u'Two Guys a Girl and a Pizza Place']
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75088']
May-28 15:59:16 DEBUG    CHECKVERSION :: Adding exception 75088: David Letterman
May-28 15:59:16 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75088', u'David Letterman']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'122281']
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=kDhIQ7kNBt%2BZJJqCJAcIPFT5mjM%3D', 1401249557, 1]
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 122281: Garrow's Law - Tales from the Old Bailey
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup from the torrent link
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'122281', u"Garrow's Law - Tales from the Old Bailey"]
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 122281: Garrows Law
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'122281', u'Garrows Law']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276312']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 276312: From Dusk Til Dawn
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'276312', u'From Dusk Til Dawn']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 276312: From Dusk Till Dawn
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'276312', u'From Dusk Till Dawn']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73290']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 73290: 60 Minutes (US)
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73290', u'60 Minutes (US)']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81563']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 81563: Border Security Australia's Frontline
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81563', u"Border Security Australia's Frontline"]
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 81563: Border Security AU Front Line
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'81563', u'Border Security AU Front Line']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250544']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 250544: Match of the Day Two
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250544', u'Match of the Day Two']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76925']
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=2mmsjqyR2H8JVgtEs069pPwzyf0%3D', 1401249557, 1]
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 76925: Dark Shadows The Revival Series 1991
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup from the torrent link
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 15:59:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76925', u'Dark Shadows The Revival Series 1991']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248962']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 248962: Transporter The Series
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'248962', u'Transporter The Series']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269650']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 269650: Resurrection US
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269650', u'Resurrection US']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269651']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 269651: Mind Games
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269651', u'Mind Games']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269653']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 269653: The Goldbergs
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269653', u'The Goldbergs']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 269653: The Goldbergs
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'269653', u'The Goldbergs']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'172381']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 172381: Silent Library (US)
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'172381', u'Silent Library (US)']
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'89991']
May-28 15:59:17 DEBUG    CHECKVERSION :: Adding exception 89991: Out of the Wild: The Alaskan Experiment
May-28 15:59:17 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'89991', u'Out of the Wild: The Alaskan Experiment']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 89991: Out of the Wild: Venezuela
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'89991', u'Out of the Wild: Venezuela']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253682']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 253682: Project Runway Allstars
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253682', u'Project Runway Allstars']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 253682: Project Runway All-Stars
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'253682', u'Project Runway All-Stars']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263365']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 263365: Marvels Agents of S H I E L D
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263365', u'Marvels Agents of S H I E L D']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 263365: Marvel Agents Of SHIELD
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263365', u'Marvel Agents Of SHIELD']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 263365: Agents of S H I E L D
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263365', u'Agents of S H I E L D']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271984']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 271984: Wonderland AU
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271984', u'Wonderland AU']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80646']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 80646: Frontline (US)
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80646', u'Frontline (US)']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 80646: Frontline
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'80646', u'Frontline']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250267']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 250267: The Food Truck NZ
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'250267', u'The Food Truck NZ']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'128521']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 128521: Million Dollar Listing
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'128521', u'Million Dollar Listing']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79771']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 79771: Air Crash Investigation
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79771', u'Air Crash Investigation']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 79771: Air Crash Investigation Mayday
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79771', u'Air Crash Investigation Mayday']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 79771: National Geographic Air Crash Investigation
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79771', u'National Geographic Air Crash Investigation']
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'165521']
May-28 15:59:18 DEBUG    CHECKVERSION :: Adding exception 165521: Girls Gone Wild The Search for the Hottest Girl in America
May-28 15:59:18 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'165521', u'Girls Gone Wild The Search for the Hottest Girl in America']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78075']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 78075: Beast Machines Transformers
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=wYa5cbm2s%2FE1opPJDOYH70u2iuY%3D', 1401249557, 1]
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup from the torrent link
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'78075', u'Beast Machines Transformers']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76703']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 76703: Pokemon
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76703', u'Pokemon']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79177']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 79177: Life On Mars UK
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'79177', u'Life On Mars UK']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76706']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 76706: Big Brother (US)
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'76706', u'Big Brother (US)']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83115']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 83115: The Worlds Strictest Parents UK
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'83115', u'The Worlds Strictest Parents UK']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'258773']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 258773: Zero Hour US
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'258773', u'Zero Hour US']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'247824']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 247824: The Voice (US)
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'247824', u'The Voice (US)']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 247824: The Voice
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'247824', u'The Voice']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263506']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 263506: Jamies 16 Minute Meals
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263506', u'Jamies 16 Minute Meals']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'95441']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 95441: NCIS: Los Angeles
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'95441', u'NCIS: Los Angeles']
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 95441: NCIS LA
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'95441', u'NCIS LA']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271728']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 271728: Pete Holmes Show
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'271728', u'Pete Holmes Show']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'166851']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 166851: Noise Control (NZ)
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'166851', u'Noise Control (NZ)']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263002']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 263002: Switch (2012)
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263002', u'Switch (2012)']
May-28 15:59:19 DEBUG    CHECKVERSION :: Adding exception 263002: Switch UK
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:19 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'263002', u'Switch UK']
May-28 15:59:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72301']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 72301: Penn and Teller Bullshit
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72301', u'Penn and Teller Bullshit']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249361']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup', 1, '|5|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=%2FqqiDCvOhaNo2gfv6xflPeECBAk%3D', 1401249560, 2]
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 249361: Boss (2011)
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Hit.the.Floor.S02E01.HDTV.x264-LOL.[eztv].torrent
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Hit.the.Floor.S02E01.HDTV.x264-LOL from the torrent link
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249361', u'Boss (2011)']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Hit the Floor
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 249361: Boss
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'249361', u'Boss']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'145541']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 145541: The Marriage Ref
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'145541', u'The Marriage Ref']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 145541: The Marriage Ref US
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'145541', u'The Marriage Ref US']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259418']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 259418: David Attenborough Kingdom Of Plants
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'259418', u'David Attenborough Kingdom Of Plants']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73641']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 73641: King of Queens
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'73641', u'King of Queens']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'246281']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 246281: King
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'246281', u'King']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 246281: King (2011)
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'246281', u'King (2011)']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262368']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 262368: Vikings (2012)
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262368', u'Vikings (2012)']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 262368: Vikings UK
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'262368', u'Vikings UK']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273761']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 273761: Master Chef Canada
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'273761', u'Master Chef Canada']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'90751']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 90751: Travel Channel Planet Food
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'90751', u'Travel Channel Planet Food']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'257645']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 257645: Ultimate Spider-man
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'257645', u'Ultimate Spider-man']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 257645: Ultimate Spiderman
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'257645', u'Ultimate Spiderman']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 257645: Ultimate Spider man
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'257645', u'Ultimate Spider man']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261222']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Hit the Floor in the DB
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 261222: The Burn With Jeff Ross
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Hit the Floor', u'Hit the Floor']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Hit the Floor
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Hit the Floor
May-28 15:59:20 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261222', u'The Burn With Jeff Ross']
May-28 15:59:20 DEBUG    CHECKVERSION :: Adding exception 261222: Jeff Ross
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Hit.the.Floor']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Hit the Floor', u'Hit the Floor']
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Hit the Floor
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Hit.the.Floor']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Hit.the.Floor.S02E01.HDTV.x264-LOL', 2, '|1|', 0, 0, 'http://re.zoink.it/0386665731', 1401249561, 1]
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Rookie.Blue.S05E02.HDTV.x264-KILLERS.[eztv].torrent
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Rookie.Blue.S05E02.HDTV.x264-KILLERS from the torrent link
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'261222', u'Jeff Ross']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75166']
May-28 15:59:21 DEBUG    CHECKVERSION :: Adding exception 75166: The Biggest Loser US
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'75166', u'The Biggest Loser US']
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72231']
May-28 15:59:21 DEBUG    CHECKVERSION :: Adding exception 72231: Real Time with Bill Maher
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72231', u'Real Time with Bill Maher']
May-28 15:59:21 DEBUG    CHECKVERSION :: Adding exception 72231: Real Time With Bill Maher Plus Overtime
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: INSERT INTO scene_exceptions (tvdb_id, show_name) VALUES (?,?) with args [u'72231', u'Real Time With Bill Maher Plus Overtime']
May-28 15:59:21 INFO     CHECKVERSION :: Updated scene exceptions
May-28 15:59:21 DEBUG    CHECKVERSION :: cache.db: DELETE FROM scene_names WHERE tvdb_id = ? with args [0]
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Rookie.Blue']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie.Blue.S05E02.HDTV.x264-KILLERS', 5, '|2|', 0, 0, 'http://re.zoink.it/E48665992D', 1401249561, 1]
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E08.HDTV.x264-LOL.[eztv].torrent
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E08.HDTV.x264-LOL from the torrent link
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E08.HDTV.x264-LOL
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: CREATE TABLE if not exists scene_num (tvdb_id INTEGER, season INTEGER, episode INTEGER, scene_season INTEGER, scene_episode INTEGER, PRIMARY KEY (tvdb_id, season, episode, scene_season, scene_episode))
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: CREATE TABLE if not exists xem_num (tvdb_id INTEGER, season INTEGER, episode INTEGER, scene_season INTEGER, scene_episode INTEGER, PRIMARY KEY (tvdb_id, season, episode, scene_season, scene_episode))
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: CREATE TABLE if not exists xem_refresh (tvdb_id INTEGER PRIMARY KEY, last_refreshed INTEGER)
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 15:59:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up xem mapping for 155201
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT OR REPLACE INTO xem_refresh (tvdb_id, last_refreshed) VALUES (?,?) with args [155201, 1401249562.6718631]
May-28 15:59:22 INFO     SEARCHQUEUE-RSS-SEARCH :: Failure getting thexem.de for show 155201 with message "no show with the tvdb_id 155201 found"
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Louie', u'Louie']
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Louie
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Louie']
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E08.HDTV.x264-LOL', 4, '|8|', 0, 0, 'http://piratebaytorrents.info/10235294/Louie_S04E08_HDTV_x264-LOL.10235294.TPB.torrent', 1401249562, 1]
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV.[eztv].torrent
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV from the torrent link
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Michael J Fox Show
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the michael j fox show']
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [269637]
May-28 15:59:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up xem mapping for 269637
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT OR REPLACE INTO xem_refresh (tvdb_id, last_refreshed) VALUES (?,?) with args [269637, 1401249563.7412231]
May-28 15:59:23 INFO     SEARCHQUEUE-RSS-SEARCH :: Failure getting thexem.de for show 269637 with message "no show with the tvdb_id 269637 found"
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Michael J Fox Show
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Michael.J.Fox.Show']
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Michael J Fox Show', u'The Michael J Fox Show']
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Michael J Fox Show
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Michael.J.Fox.Show']
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV', 1, '|18|', 0, 0, 'http://re.zoink.it/048664761F', 1401249563, 1]
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E07.HDTV.x264-LOL.[eztv].torrent
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E07.HDTV.x264-LOL from the torrent link
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E07.HDTV.x264-LOL
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E07.HDTV.x264-LOL', 4, '|7|', 0, 0, 'http://re.zoink.it/53866474B2', 1401249563, 1]
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.720p.HDTV.X264-DIMENSION from the torrent link
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.720p.HDTV.X264-DIMENSION', 9, '|5|', 0, 0, 'http://re.zoink.it/1C866424F0', 1401249564, 4]
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.HDTV.x264-LOL.[eztv].torrent
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.HDTV.x264-LOL from the torrent link
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.HDTV.x264-LOL
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.HDTV.x264-LOL', 9, '|5|', 0, 0, 'http://re.zoink.it/2E86640c04', 1401249564, 1]
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against MasterChef.US.S05E01.HDTV.x264-LOL.[eztv].torrent
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name MasterChef.US.S05E01.HDTV.x264-LOL from the torrent link
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef.US.S05E01.HDTV.x264-LOL
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 15:59:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'MasterChef.US']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef.US.S05E01.HDTV.x264-LOL', 5, '|1|', 0, 0, 'http://re.zoink.it/CA8663820D', 1401249565, 1]
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM ezrss
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.x264-2HD
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Playing.House.S01E06.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E08.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E07.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef.US.S05E01.HDTV.x264-LOL
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['publichd']
May-28 15:59:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: PublicHD cache update URL: http://publichd.se/rss.php
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401249566, 'publichd']
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO lastUpdate (time, provider) VALUES (?, ?) with args [1401249566, 'publichd']
May-28 15:59:26 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing PublicHD cache and updating with new information
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM publichd WHERE 1
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Until Death 2007 BluRay 1080p DTS x264-CHD into a valid episode
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 15:59:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Night.Shift']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV XviD-FUM[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=414ebb29b6385d075506a2edab7f60893443b6a5&f=The-Night-Shift-S01E01-HDTV-XviD-FUM[ettv]', 1401249567, 1]
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Fargo']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV XviD-FUM[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=bf304f51f39164d6fb4c5a57e7b45eee9c9b8552&f=Fargo-S01E07-HDTV-XviD-FUM[ettv]', 1401249567, 1]
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 15:59:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up xem mapping for 277169
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT OR REPLACE INTO xem_refresh (tvdb_id, last_refreshed) VALUES (?,?) with args [277169, 1401249568.230763]
May-28 15:59:28 INFO     SEARCHQUEUE-RSS-SEARCH :: Failure getting thexem.de for show 277169 with message "no show with the tvdb_id 277169 found"
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Faking It 2014', u'Faking It 2014']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match original name but trying to manually strip and specify show year
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE (show_name LIKE ? OR tvr_name LIKE ?) AND startyear = ? with args [u'Faking It%', u'Faking It%', u'2014']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Faking It 2014
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Faking.It.2014']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.HDTV.XviD-AFG', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=16c559d48f2f468d52266cd0510800378f365a2f&f=Faking.It.2014.S01E06.HDTV.XviD-AFG', 1401249568, 1]
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.XviD-AFG
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Awkward']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.XviD-AFG', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=88550e1085faab13903fa8eafd98ca3435ff0eb0&f=Awkward.S04E07.HDTV.XviD-AFG', 1401249568, 1]
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Black Sheep 1996 BDRip 720p x264 AAC-5
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Black.Sheep.1996.BDRip.720p.x264.AAC-5']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Black Sheep 1996 BDRip 720p x264 AAC 5', u'Black Sheep 1996 BDRip 720p x264 AAC 5']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Black Sheep 1996 BDRip 720p x264 AAC 5
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Black.Sheep.1996.BDRip.720p.x264.AAC-5']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode', 1, '|0|', 0, 0, 'http://publichd.se/download.php?id=e2a5fc36424ca42b9e5ed1e2fb45c9cd3714d2d1&f=Black-Sheep-1996-BDRip-720p-x264-AAC-5.0-multisub-HighCode', 1401249568, 32768]
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV x264-LOL[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=84454511ff6daa28b347d982269a88b5ea6c4959&f=The-Night-Shift-S01E01-HDTV-x264-LOL[ettv]', 1401249568, 1]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264-LOL[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=8f8e8bce5eee653ed5e72cfe077c2ff4dd675d27&f=Fargo-S01E07-HDTV-x264-LOL[ettv]', 1401249569, 1]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=6e44b4afe13b6ce8239bcc0e71b8b97fed2e7220&f=Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE-[PublicHD]', 1401249569, 4]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=eb825cc31f2d9b73428c598bd98611e72aeff40d&f=Fargo.S01E07.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401249569, 4]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode into a valid episode
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=91819221f42b1180a00c26b003ce6cfe411fa342&f=The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401249569, 4]
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.720p.HDTV.x264-2HD
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:59:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.720p.HDTV.x264-2HD', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=385c2bafcdfdff102fe3839195089ad74a3326f0&f=Awkward.S04E07.720p.HDTV.x264-2HD-[PublicHD]', 1401249570, 4]
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 HDTV x264-2HD[ettv]
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 HDTV x264-2HD[ettv]', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=523e054f909fda15fb214b596ec74d9788a8d850&f=Awkward-S04E07-HDTV-x264-2HD[ettv]', 1401249570, 1]
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Fockers Trilogy 2000-2010 BDRip 720p x264 DTS-HighCode
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename The Fockers Trilogy 2000-2010 BDRip 720p x264 DTS-HighCode into a valid episode
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: The Fockers Trilogy 2000-2010 BDRip 720p x264 DTS-HighCode
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Longmire
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Longmire']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Longmire', u'Longmire']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Longmire
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Longmire']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS', 2, '||', 0, 0, 'http://publichd.se/download.php?id=9efd8bf50a7abffef565127651a4aca58f6a6081&f=Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS-[PublicHD]', 1401249570, 64]
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Longmire
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Longmire']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS', 2, '||', 0, 0, 'http://publichd.se/download.php?id=9685079de53c3ab91fd9eb234b8d82696e291921&f=Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS-[PublicHD]', 1401249570, 32]
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Playing.House.S01E06.720p.HDTV.X264-DIMENSION
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Playing House
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Playing House in the DB
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Playing House
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Playing.House']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Playing.House']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Playing.House.S01E06.720p.HDTV.X264-DIMENSION', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=7bdc3412f049cd4cb335a913582907177f2bd665&f=Playing.House.S01E06.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401249570, 4]
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devils.Knot.2013.BluRay.1080p.x264.DTS-LTT
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Devils.Knot.2013.BluRay.1080p.x264.DTS-LTT into a valid episode
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Devils.Knot.2013.BluRay.1080p.x264.DTS-LTT
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.Granddad.Dates.a.Kardashian.720p.WEB-DL.DD5.1.H.264-NTb
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Boondocks']
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.Granddad.Dates.a.Kardashian.720p.WEB-DL.DD5.1.H.264-NTb', 4, '|6|', 0, 0, 'http://publichd.se/download.php?id=8c9cb4b861e0fb9db2f5dd890ec07564c6f9c5a9&f=The.Boondocks.S04E06.Granddad.Dates.a.Kardashian.720p.WEB-DL.DD5.1.H.264-NTb-[PublicHD]', 1401249571, 32]
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM publichd
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.XviD-AFG
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.720p.HDTV.x264-2HD
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 HDTV x264-2HD[ettv]
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Playing.House.S01E06.720p.HDTV.X264-DIMENSION
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.Granddad.Dates.a.Kardashian.720p.WEB-DL.DD5.1.H.264-NTb
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['showrss']
May-28 15:59:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: ShowRSS cache update URL: http://showrss.info/feeds/all.rss
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401249573, 'showrss']
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO lastUpdate (time, provider) VALUES (?, ?) with args [1401249573, 'showrss']
May-28 15:59:33 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing ShowRSS cache and updating with new information
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM showrss WHERE 1
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264 LOL
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264 LOL', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:572F3EBDA2745BB775368B0D1FEA9433347761FC&dn=Fargo+S01E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249573, 1]
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Holby City S16E33 720p HDTV x264 FTP
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Holby City
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 15:59:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Holby City in the DB
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Holby City', u'Holby City']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Holby City
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Holby City
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Holby.City']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Holby City', u'Holby City']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Holby City
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Holby.City']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Holby City S16E33 720p HDTV x264 FTP', 16, '|33|', 0, 0, 'magnet:?xt=urn:btih:4E0D330677F47066D1B941560CC3E3D94C8DB570&dn=Holby+City+S16E33+720p+HDTV+x264+FTP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249574, 4]
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Craig Ferguson', u'Craig Ferguson']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Craig Ferguson
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Craig.Ferguson']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:9A4DB37C54DC406073AD62B70B24909B30D01FB9&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249574, 4]
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:237880929E6358CA4F562F2D76E3272FA06EB615&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249574, 1]
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 HDTV x264 2HD
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:4C5C60F4F1F8FFDB9ED11AE9E68C2BE946E1F587&dn=The+Boondocks+S04E06+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249574, 1]
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 720p HDTV x264 2HD
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 720p HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:BA7701F16C4EB4375701C31C4669B898CC7F63C4&dn=The+Boondocks+S04E06+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249574, 4]
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Lizard Lick Towing
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Lizard Lick Towing in the DB
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Lizard Lick Towing', u'Lizard Lick Towing']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Lizard Lick Towing
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Lizard Lick Towing
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Lizard.Lick.Towing']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Lizard Lick Towing', u'Lizard Lick Towing']
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Lizard Lick Towing
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Lizard.Lick.Towing']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Lizard Lick Towing S06E15 720p HDTV x264 DHD', 6, '|15|', 0, 0, 'magnet:?xt=urn:btih:9A4252131430AD7153A25C68344A87589E61EC5C&dn=Lizard+Lick+Towing+S06E15+720p+HDTV+x264+DHD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249575, 4]
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'WWE Monday Night RAW', u'WWE Monday Night RAW']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for WWE Monday Night RAW
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'WWE.Monday.Night.RAW']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:E74FA4CB4E8416788F93821DA4D4725A2D8CEF5E&dn=WWE+Monday+Night+RAW+2014+05+26+720p+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249575, 4]
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:F5F1210DC1836810FB9AEE5A98F2F87CBBA44493&dn=WWE+Monday+Night+RAW+2014+05+26+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249575, 1]
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 HDTV x264 KILLERS
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:734F4FDD59C2EF30FB9E44FB9118CB5714DD8791&dn=The+Listener+S05E01+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249575, 1]
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 720p HDTV x264 KILLERS
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 720p HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:87115A3534197CB79E8086487EEF5F581C2F70BD&dn=The+Listener+S05E01+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249575, 4]
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:0F5775A8DF45CA9CFF42C3E6F151D3DFF1FDF082&dn=Rookie+Blue+S05E02+REPACK+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249575, 4]
May-28 15:59:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:A2038A49A0BD373AEB91948DCEFBC516F634B562&dn=Rookie+Blue+S05E02+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249576, 4]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 720p HDTV X264 DIMENSION
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 720p HDTV X264 DIMENSION', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:79EC9A95D13F17E2383AA7BBD57A4C3576F6BAC6&dn=Louie+S04E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249576, 4]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 720p HDTV X264 DIMENSION
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 720p HDTV X264 DIMENSION', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:75703900AFAB9B9947B7BFDCD8EB040F98018DFC&dn=Louie+S04E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249576, 4]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:E42DC2E867607E1608E8BBA6F58E0FDA016D0736&dn=Rookie+Blue+S05E02+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249576, 1]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 HDTV x264 LOL
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 HDTV x264 LOL', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:E2DB49D41FFC68577F23CD520B9CD5D71476551A&dn=Louie+S04E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249576, 1]
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 15:59:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 720p HDTV X264 DIMENSION', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:478332F210F5517186039CAA11B4D7DFCEB09A82&dn=MasterChef+US+S05E01+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249577, 4]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Friends.with.Better.Lives']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 720p HDTV X264 DIMENSION', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:D7CEE1E0DE16767EE22FE16C099809EB57FA1D7E&dn=Friends+with+Better+Lives+S01E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249577, 4]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 HDTV x264 LOL
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 HDTV x264 LOL', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:53B27792661929DD8F62965E268F0AD389926F3D&dn=Louie+S04E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249577, 1]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Marvel&#039;s Avengers Assemble
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Marvel&#039;s Avengers Assemble in the DB
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Marvel&#039;s Avengers Assemble', u'Marvel&#039;s Avengers Assemble']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Marvel&#039;s Avengers Assemble
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Marvel&#039;s Avengers Assemble
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Marveland#039;s.Avengers.Assemble']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Marvel&#039;s Avengers Assemble', u'Marvel&#039;s Avengers Assemble']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Marvel&#039;s Avengers Assemble
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Marveland#039;s.Avengers.Assemble']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264', 1, '|26|', 0, 0, 'magnet:?xt=urn:btih:9B3892AD2F089104E9F2B147AE40A04BD9FCF4A9&dn=Marvel%26%23039%3Bs+Avengers+Assemble+S01E26+720p+WEB+DL+DD5+1+AAC2+0+H264&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249577, 32]
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 720p HDTV X264 DIMENSION
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 720p HDTV X264 DIMENSION', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:1CF0CDF7CCE3FE3D86163DB3E3BE29CEE2AA2379&dn=24+S09E05+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249577, 4]
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 HDTV x264 LOL
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 HDTV x264 LOL', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:2E04A26B78AD06F8F3BEA69F610C111F9F408C43&dn=24+S09E05+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249578, 1]
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 HDTV x264 LOL
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 HDTV x264 LOL', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:CA0DEE1C9979E9E5B0BEA1104B6516397DC4C662&dn=MasterChef+US+S05E01+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249578, 1]
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 HDTV x264 LOL', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:AA9596E89CBAF8C710FFCF6A4B42AF37FB31E867&dn=Friends+with+Better+Lives+S01E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249578, 1]
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 15:59:38 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Nurse.Jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 720p HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:C60402A581BB299A74275F6485A6DAC8E6553F22&dn=Nurse+Jackie+S06E08+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249579, 4]
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 HDTV x264 BATV
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:D0365B9B5C2F6587CED418F623E87AB6082CB43D&dn=Nurse+Jackie+S06E08+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249579, 1]
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Californication S07E08 720p HDTV x264 DAA
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Californication
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Californication in the DB
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Californication', u'Californication']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Californication
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Californication
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Californication']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Californication', u'Californication']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Californication
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Californication']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Californication S07E08 720p HDTV x264 DAA', 7, '|8|', 0, 0, 'magnet:?xt=urn:btih:1757B1DA0682E7D13973F37DD080D2ED5FC82FE5&dn=Californication+S07E08+720p+HDTV+x264+DAA&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249579, 4]
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:2C09F4385E54FB1867E5037CB709A77674B103A8&dn=Craig+Ferguson+2014+05+23+Jon+Favreau+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249579, 4]
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:37B081381A7398AF5562C1E8A46ED74734AD316E&dn=Craig+Ferguson+2014+05+22+Tom+Lennon+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249579, 4]
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 15:59:39 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Robot.Chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:DD7E9E597B3DF86013ABC6A257F444E1576E5313&dn=Robot+Chicken+S07E07+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249580, 1]
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 720p HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:D8E50009720EB56A49D107AA9CBD4067407C5A57&dn=Robot+Chicken+S07E07+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249580, 4]
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 720p HDTV x264 2HD
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Continuum']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 720p HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:CBF011EE02EF39CF77798F0E2080215A4FE15F94&dn=Continuum+S03E09+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249580, 4]
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Mad.Men']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 720p HDTV X264 DIMENSION', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:2F14F61DDFB3A2D32EF42655D68F0E879FC96C5C&dn=Mad+Men+S07E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249580, 4]
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 15:59:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Devious.Maids']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:1B1E214521730E004DC6BA681DB33AD4E8B61787&dn=Devious+Maids+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249581, 4]
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Penny.Dreadful']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 720p HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:913EF0F8FBC9D864A6BD1D088AAC5527FB446C27&dn=Penny+Dreadful+S01E03+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249581, 4]
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Crisis']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 720p HDTV X264 DIMENSION', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:609623A405C6797C5C21209EBC9217B763D3F252&dn=Crisis+S01E09+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249581, 4]
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 720p HDTV X264 DIMENSION
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Salem']
May-28 15:59:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 720p HDTV X264 DIMENSION', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:C4E70E3E50691EE1369D86CD6F63FD9B9E898F66&dn=Salem+S01E06+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249581, 4]
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 720p HDTV x264 IMMERSE
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Turn']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 720p HDTV x264 IMMERSE', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:8C1580FDB4C9E333709DE30D517A340F91425BE1&dn=Turn+S01E08+720p+HDTV+x264+IMMERSE&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249582, 4]
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 720p HDTV X264 DIMENSION
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Believe']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 720p HDTV X264 DIMENSION', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:0A2768D3D794787CC867D011DBF087430EA84DAD&dn=Believe+S01E10+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249582, 4]
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 HDTV x264 KILLERS
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:DC49C9BF95984A7A435FAD2FAD87F992188A03FC&dn=Devious+Maids+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249582, 1]
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 HDTV x264 LOL
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 15:59:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 HDTV x264 LOL', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:4AC134EB2E9701B952CA28566600D76F4ADE5AD9&dn=Mad+Men+S07E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249583, 1]
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 HDTV x264 LOL
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 HDTV x264 LOL', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:A10DE6AB58F6DB3C607E289C16E7987B876A3A2A&dn=Salem+S01E06+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249583, 1]
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:F87A438AF6035745F0FDBF39BED492C59ACE8A34&dn=Penny+Dreadful+S01E03+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249583, 1]
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 HDTV x264 LOL
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 HDTV x264 LOL', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:F13724FE5DC1DBBA311AC35F146BFF0D2552DBA4&dn=Crisis+S01E09+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249583, 1]
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 HDTV x264 LOL
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 HDTV x264 LOL', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:FA80D091D84C5CC056661FF56106287F0A9AFB53&dn=Believe+S01E10+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249583, 1]
May-28 15:59:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 HDTV x264 2HD
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:9AF306F95B3A6B7C65217851263AFAEFF64B7D50&dn=Continuum+S03E09+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249584, 1]
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 HDTV x264 ASAP
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 HDTV x264 ASAP', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:59E71AD1231A2E42B56F67C75664DA8D29337EBC&dn=Turn+S01E08+HDTV+x264+ASAP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249584, 1]
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jimmy Fallon', u'Jimmy Fallon']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jimmy Fallon
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Jimmy.Fallon']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:A61B7EB77E6CFBD228A9979C3B3205F34B5240AB&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249584, 4]
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:48EE6604E195B2F59A8383C775BB28D0C3C2F03A&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249584, 1]
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rugby Super Rugby
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rugby.Super.Rugby']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rugby Super Rugby', u'Rugby Super Rugby']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rugby Super Rugby
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Rugby.Super.Rugby']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:305F8799ED8FEA2FB40249D42DEC3BDD25DAE7BB&dn=Rugby+Super+Rugby+2014+05+24+Force+vs+Lions+720p+AHDTV+x264+C4TV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249584, 4]
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 HDTV x264 KILLERS
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Orphan.Black']
May-28 15:59:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:A668266F4E4FF05C34A3518C7F64FA8B8E7F2AC7&dn=Orphan+Black+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249584, 1]
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:C09A6DF90B32845E5C4713F54E689A099249AD24&dn=Orphan+Black+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249585, 4]
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Survivor
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'survivor']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'survivor']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Survivor in the DB
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Survivor', u'Survivor']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Survivor
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Survivor
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Survivor']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Survivor', u'Survivor']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Survivor
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Survivor']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS', 28, '|14|', 0, 0, 'magnet:?xt=urn:btih:70D220D74A0C8D90454CDCAA2E10F04FFB328992&dn=Survivor+S28E14+720p+WEB+DL+AAC2+0+H264+KiNGS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249585, 32]
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rugby Super Rugby 2014 05 23 Bulls vs Brumbies 720p AHDTV x264 C
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rugby Super Rugby
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rugby.Super.Rugby']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rugby Super Rugby 2014 05 23 Bulls vs Brumbies 720p AHDTV x264 C', 1, '||', 0, 0, 'magnet:?xt=urn:btih:00CFDEEB2645C419F697457FCACBABD6AAC71C0C&dn=Rugby+Super+Rugby+2014+05+23+Bulls+vs+Brumbies+720p+AHDTV+x264+C&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249585, 4]
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Silicon Valley S01E07 PROPER 720p HDTV x264 BATV
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Silicon Valley
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'silicon valley']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'silicon valley']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Silicon Valley in the DB
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Silicon Valley', u'Silicon Valley']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Silicon Valley
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Silicon Valley
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Silicon.Valley']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Silicon Valley', u'Silicon Valley']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Silicon Valley
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Silicon.Valley']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Silicon Valley S01E07 PROPER 720p HDTV x264 BATV', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:8F709F6B061D1803C064D58358829131E7566D04&dn=Silicon+Valley+S01E07+PROPER+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249585, 4]
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE S02E10 HDTV x264 BATV
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on VICE
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 15:59:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up VICE in the DB
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'VICE', u'VICE']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for VICE
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'VICE', u'VICE']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for VICE
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'VICE']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE S02E10 HDTV x264 BATV', 2, '|10|', 0, 0, 'magnet:?xt=urn:btih:4D366DFA8FAFEE0FC5B43AD5976CA5F6A5EAC97D&dn=VICE+S02E10+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249586, 1]
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE S02E10 720p HDTV x264 BATV
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on VICE
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up VICE in the DB
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'VICE', u'VICE']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for VICE
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE S02E10 720p HDTV x264 BATV', 2, '|10|', 0, 0, 'magnet:?xt=urn:btih:82EFF29D50596AAD6CAB935479D8343AD1B58FC3&dn=VICE+S02E10+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249586, 4]
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Real Time with Bill Maher 2014 05 23 720p HDTV x264 BATV
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Real Time with Bill Maher
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Real.Time.with.Bill.Maher']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Real Time with Bill Maher', u'Real Time with Bill Maher']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Real Time with Bill Maher
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Real.Time.with.Bill.Maher']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Real Time with Bill Maher 2014 05 23 720p HDTV x264 BATV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:8938FF8B91C339EF87B71EEA356133D1950932BE&dn=Real+Time+with+Bill+Maher+2014+05+23+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249586, 4]
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Challenge Free Agents S25E07 After Show HDTV x264 YesTV
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Challenge Free Agents
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the challenge free agents']
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [70870, 25, 7]
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [70870]
May-28 15:59:46 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up xem mapping for 70870
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT OR REPLACE INTO xem_refresh (tvdb_id, last_refreshed) VALUES (?,?) with args [70870, 1401249587.4308889]
May-28 15:59:47 INFO     SEARCHQUEUE-RSS-SEARCH :: Failure getting thexem.de for show 70870 with message "no show with the tvdb_id 70870 found"
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [70870, 25, 7]
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Challenge Free Agents
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Challenge.Free.Agents']
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Challenge Free Agents', u'The Challenge Free Agents']
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Challenge Free Agents
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'The.Challenge.Free.Agents']
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Challenge Free Agents S25E07 After Show HDTV x264 YesTV', 25, '|7|', 0, 0, 'magnet:?xt=urn:btih:20441B4B6059B6F8688A985F060558F227F5DC8D&dn=The+Challenge+Free+Agents+S25E07+After+Show+HDTV+x264+YesTV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401249587, 1]
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM showrss
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Holby City S16E33 720p HDTV x264 FTP
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 HDTV x264 2HD
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 720p HDTV x264 2HD
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 HDTV x264 BATV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Californication S07E08 720p HDTV x264 DAA
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 720p HDTV x264 2HD
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 720p HDTV x264 IMMERSE
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 720p HDTV X264 DIMENSION
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 HDTV x264 LOL
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 HDTV x264 2HD
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 HDTV x264 ASAP
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rugby Super Rugby 2014 05 23 Bulls vs Brumbies 720p AHDTV x264 C
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Silicon Valley S01E07 PROPER 720p HDTV x264 BATV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE S02E10 HDTV x264 BATV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE S02E10 720p HDTV x264 BATV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Real Time with Bill Maher 2014 05 23 720p HDTV x264 BATV
May-28 15:59:47 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Challenge Free Agents S25E07 After Show HDTV x264 YesTV
May-28 15:59:47 INFO     SEARCHQUEUE-RSS-SEARCH :: No needed episodes found on the RSS feeds
May-28 16:02:53 DEBUG    MAIN :: importing downloader
May-28 16:02:53 INFO     MAIN :: libtorrent is NOT available
May-28 16:02:53 INFO     MAIN :: Checking database structure...
May-28 16:02:53 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
May-28 16:02:53 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Tvr Id database upgrade
May-28 16:02:53 DEBUG    MAIN :: AddTvrId upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Tvr Name database upgrade
May-28 16:02:53 DEBUG    MAIN :: AddTvrName upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Airdate Index database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('idx_tv_episodes_showid_airdate',)
May-28 16:02:53 DEBUG    MAIN :: AddAirdateIndex upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Numeric Providers database upgrade
May-28 16:02:53 DEBUG    MAIN :: NumericProviders upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking New Quality Settings database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
May-28 16:02:53 DEBUG    MAIN :: NewQualitySettings upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Drop Old History Table database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: DropOldHistoryTable upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Upgrade History For Generic Providers database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: UpgradeHistoryForGenericProviders upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Air By Date Option database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: AddAirByDateOption upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Change Sab Config From Ip To Host database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: ChangeSabConfigFromIpToHost upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Fix Sab Host database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: FixSabHostURL upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Lang database upgrade
May-28 16:02:53 DEBUG    MAIN :: AddLang upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Populate Root Dirs database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: PopulateRootDirs upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Set Nzb Torrent Settings database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: SetNzbTorrentSettings upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Fix Air By Date Setting database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: FixAirByDateSetting upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: AddSizeAndSceneNameFields upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: RenameSeasonFolders upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 16:02:53 DEBUG    MAIN :: Add1080pAndRawHDQualities upgrade not required
May-28 16:02:53 INFO     MAIN :: Checking database structure...
May-28 16:02:53 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 16:02:53 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
May-28 16:02:53 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
May-28 16:02:53 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
May-28 16:02:53 DEBUG    MAIN :: AddSceneExceptions upgrade not required
May-28 16:02:53 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
May-28 16:02:53 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
May-28 16:02:53 DEBUG    MAIN :: AddSceneNameCache upgrade not required
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
May-28 16:02:53 INFO     MAIN :: No duplicate show, check passed
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
May-28 16:02:53 INFO     MAIN :: No duplicate episode, check passed
May-28 16:02:53 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
May-28 16:02:53 INFO     MAIN :: No orphan episode, check passed
May-28 16:02:53 DEBUG    MAIN :: config_version -> 3
May-28 16:02:53 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /root/.xbmc/addons/service.downloadmanager.InternetPVR/SickBeard
May-28 16:02:54 DEBUG    MAIN :: git output: /bin/sh: git: not found

May-28 16:02:54 DEBUG    MAIN :: Unable to find git with command git symbolic-ref -q HEAD
May-28 16:02:54 DEBUG    MAIN :: Retrieving the last check time from the DB
May-28 16:02:54 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
May-28 16:02:54 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8082/
May-28 16:02:54 INFO     MAIN :: Loading initial show list
May-28 16:02:54 DEBUG    MAIN :: sickbeard.db: SELECT * FROM tv_shows
May-28 16:02:54 DEBUG    SEARCH :: Starting new thread: SEARCH
May-28 16:02:54 DEBUG    BACKLOG :: Starting new thread: BACKLOG
May-28 16:02:54 DEBUG    BACKLOG :: Retrieving the last check time from the DB
May-28 16:02:54 DEBUG    BACKLOG :: sickbeard.db: SELECT * FROM info
May-28 16:02:54 INFO     BACKLOG :: Running limited backlog on recently missed episodes only
May-28 16:02:54 DEBUG    BACKLOG :: Air-by-date segments: []
May-28 16:02:54 DEBUG    CHECKVERSION :: Starting new thread: CHECKVERSION
May-28 16:02:54 INFO     CHECKVERSION :: Version checking is disabled, not checking for the newest version
May-28 16:02:54 INFO     CHECKVERSION :: Check scene exceptions update
May-28 16:02:54 INFO     SEARCHQUEUE-RSS-SEARCH :: Changing all old missing episodes to status WANTED
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_episodes WHERE status = ? AND airdate < ? with args [1, 735381]
May-28 16:02:54 INFO     SEARCHQUEUE-RSS-SEARCH :: Beginning search for new episodes on RSS
May-28 16:02:54 INFO     SEARCHQUEUE-RSS-SEARCH :: Searching all providers for any needed episodes
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['ezrss']
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['ezrss']
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Last update was too soon, using old cache: today()-2014-05-28 15:58:29<0:15:00
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM ezrss
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['publichd']
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['publichd']
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Last update was too soon, using old cache: today()-2014-05-28 15:59:26<0:15:00
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM publichd
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['showrss']
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['showrss']
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Last update was too soon, using old cache: today()-2014-05-28 15:59:33<0:15:00
May-28 16:02:54 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM showrss
May-28 16:02:55 INFO     SEARCHQUEUE-RSS-SEARCH :: No needed episodes found on the RSS feeds
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73545']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72549']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'256300']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'140141']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72546']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76808']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'92091']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82448']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'164451']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'279603']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276360']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248699']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'120431']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264141']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71985']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'280446']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'100061']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'275493']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77444']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'256394']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'166251']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70994']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265467']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249708']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253323']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71462']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'120541']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273424']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'95521']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277169']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'178141']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72164']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'210171']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71489']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'212171']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262927']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259047']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81580']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'139481']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79040']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76237']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76235']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79668']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267206']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'202571']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271902']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'156771']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'210771']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'196351']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'257804']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79590']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77120']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74626']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'88321']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'168161']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249980']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73696']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'247381']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276148']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'131791']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80379']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'251418']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'193821']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270528']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262787']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70327']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269641']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'230371']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74281']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248835']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248834']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248836']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'139681']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250153']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250525']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264450']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83123']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81391']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262980']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74372']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'149101']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253543']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80159']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80625']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'198841']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'174681']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264776']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72829']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270307']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262353']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'268855']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75393']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82374']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73893']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72224']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'274129']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265252']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'139941']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78846']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72553']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248261']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83430']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'175101']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'275723']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'255045']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265406']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'213211']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70870']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'88631']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77780']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250445']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253485']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73387']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83897']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'187351']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71470']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248841']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263387']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'220441']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72073']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80665']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260586']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'222551']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81346']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264030']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78051']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'97731']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79824']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'278976']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75748']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80101']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'152831']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271936']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'205901']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261202']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75692']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77526']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'105521']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78804']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'204371']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70726']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73587']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'132591']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260165']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'85168']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250015']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'227161']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'254067']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248789']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'88771']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74768']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267543']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80964']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271241']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83268']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'194261']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'251334']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70336']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'155201']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269584']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82467']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83462']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269637']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277528']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'94551']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'122521']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75567']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73244']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73246']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'193501']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84489']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81491']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248935']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'252019']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74946']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261240']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'280361']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79905']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80018']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250331']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80226']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'212571']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78125']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76168']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79330']
May-28 16:02:56 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260839']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72716']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267260']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83714']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260206']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'195831']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84146']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75382']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265145']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81230']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80522']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248503']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73562']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'220141']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265393']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273383']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'255693']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75032']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270262']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'270261']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249892']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'221001']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71998']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'254112']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276515']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70760']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264535']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253982']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261690']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80915']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259669']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'110381']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'251807']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81386']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'118001']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74512']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'199031']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77733']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259106']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'85228']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71788']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76736']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277568']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83774']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249229']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79565']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79836']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273986']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72194']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'223161']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'260489']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250095']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271632']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'198861']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81670']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76133']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72663']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'256204']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72449']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'267709']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76119']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'77398']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80290']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269538']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'92361']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80552']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271958']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264679']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'168621']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71699']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'265373']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81559']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'122401']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'268591']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76817']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276526']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'254798']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269586']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269589']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84312']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82918']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'208111']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'113901']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'257550']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73255']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273005']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273002']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'264085']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'192061']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76779']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'74897']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'266388']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'277171']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76104']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76107']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248618']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'197001']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'252312']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253931']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'189931']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'252319']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70578']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'70572']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'274099']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'82135']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'272391']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72306']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'90621']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'84133']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248812']
May-28 16:02:57 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'194751']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'129261']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79212']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78949']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'275777']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80994']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'164951']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'238521']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'71256']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73599']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'90651']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73178']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75088']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'122281']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'276312']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73290']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'81563']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250544']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76925']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'248962']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269650']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269651']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'269653']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'172381']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'89991']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'253682']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263365']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271984']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'80646']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'250267']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'128521']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79771']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'165521']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'78075']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76703']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'79177']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'76706']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'83115']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'258773']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'247824']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263506']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'95441']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'271728']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'166851']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'263002']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72301']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'249361']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'145541']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'259418']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'73641']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'246281']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'262368']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'273761']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'90751']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'257645']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'261222']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'75166']
May-28 16:02:58 DEBUG    CHECKVERSION :: cache.db: SELECT * FROM scene_exceptions WHERE tvdb_id = ? with args [u'72231']
May-28 16:02:58 INFO     CHECKVERSION :: No scene exceptions update needed
May-28 16:03:29 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409) AND location != '')) AND season != 0 and episode != 0 AND airdate <= 735381 GROUP BY showid
May-28 16:03:29 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7 GROUP BY showid
May-28 16:03:29 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:03:29 DEBUG    CP Server Thread-4 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:03:37 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409) AND location != '')) AND season != 0 and episode != 0 AND airdate <= 735381 GROUP BY showid
May-28 16:03:37 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7 GROUP BY showid
May-28 16:03:37 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:03:37 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:03:41 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:03:41 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:05:26 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:05:26 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:06:10 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:06:10 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:06:51 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:06:51 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %SN - %Sx%0E - %EN -> Show Name - 2x03 - Ep Name
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%E.N -> Show.Name.S02E03.Ep.Name
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %Sx%0E - %EN -> 2x03 - Ep Name
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: S%0SE%0E - %EN -> S02E03 - Ep Name
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %SN - %A-D - %EN -> Show Name - 2011-03-09 - Ep Name
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.%A.D.%E.N.%Q.N -> Show.Name.2011.03.09.Ep.Name.HD.TV
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.%A.D.%E.N-%RG -> Show.Name.2011.03.09.Ep.Name-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:09 DEBUG    CP Server Thread-5 :: formatting pattern: %Y/%0M -> 2011/03
May-28 16:07:09 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:07:09 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:07:09 DEBUG    CP Server Thread-11 :: Checking whether the pattern %S.N.s%0Se%0E is valid for a single episode
May-28 16:07:09 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-2 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-11 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Trying to parse Show.Name.s02e03.ext
May-28 16:07:10 DEBUG    CP Server Thread-11 :: The name Show.Name.s02e03.ext parsed into Show Name - S2E3 [ABD: False]
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Checking whether the pattern %S.N.s%0Se%0E is valid for a multi episode
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-3 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-3 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-2 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-3 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03e04e05
May-28 16:07:10 DEBUG    CP Server Thread-11 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03e04e05
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Trying to parse Show.Name.s02e03e04e05.ext
May-28 16:07:10 DEBUG    CP Server Thread-11 :: The name Show.Name.s02e03e04e05.ext parsed into Show Name - S2E3E4E5 [ABD: False]
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-11 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Trying to parse Show.Name.s02e03.ext
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.s02e03.ext
May-28 16:07:10 DEBUG    CP Server Thread-11 :: The name Show.Name.s02e03.ext parsed into Show Name - S2E3 [ABD: False]
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:07:10 DEBUG    CP Server Thread-11 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03e04e05
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Trying to parse Show.Name.s02e03e04e05.ext
May-28 16:07:10 DEBUG    CP Server Thread-11 :: Using cached parse result for: Show.Name.s02e03e04e05.ext
May-28 16:07:10 DEBUG    CP Server Thread-11 :: The name Show.Name.s02e03e04e05.ext parsed into Show Name - S2E3E4E5 [ABD: False]
May-28 16:08:41 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Checking whether the pattern %S.N.s%0Se%0E is valid for a single episode
May-28 16:08:41 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Trying to parse Show.Name.s02e03.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.s02e03.ext
May-28 16:08:41 DEBUG    CP Server Thread-6 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03e04e05
May-28 16:08:41 DEBUG    CP Server Thread-4 :: The name Show.Name.s02e03.ext parsed into Show Name - S2E3 [ABD: False]
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Checking whether the pattern %S.N.s%0Se%0E is valid for a multi episode
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03e04e05
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Trying to parse Show.Name.s02e03e04e05.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.s02e03e04e05.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: The name Show.Name.s02e03e04e05.ext parsed into Show Name - S2E3E4E5 [ABD: False]
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Trying to parse Show.Name.s02e03.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.s02e03.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: The name Show.Name.s02e03.ext parsed into Show Name - S2E3 [ABD: False]
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:41 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.s%0Se%0E -> Show.Name.s02e03e04e05
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Trying to parse Show.Name.s02e03e04e05.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.s02e03e04e05.ext
May-28 16:08:41 DEBUG    CP Server Thread-4 :: The name Show.Name.s02e03e04e05.ext parsed into Show Name - S2E3E4E5 [ABD: False]
May-28 16:08:42 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Checking whether the pattern Season %0S/%S.N.S%0SE%0E.%Q.N-%RG is valid for a single episode
May-28 16:08:42 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:42 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Trying to parse Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:42 DEBUG    CP Server Thread-6 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-6 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-6 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:42 DEBUG    CP Server Thread-4 :: The name Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Checking whether the pattern Season %0S/%S.N.S%0SE%0E.%Q.N-%RG is valid for a multi episode
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Trying to parse Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:08:42 DEBUG    CP Server Thread-4 :: The name Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3E4E5 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Trying to parse Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:42 DEBUG    CP Server Thread-4 :: The name Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:42 DEBUG    CP Server Thread-4 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:42 DEBUG    CP Server Thread-4 :: Trying to parse Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:08:42 DEBUG    CP Server Thread-4 :: The name Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3E4E5 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Checking whether the pattern Season %0S/%S.N.S%0SE%0E.%Q.N-%RG is valid for a single episode
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Trying to parse Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: The name Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Checking whether the pattern Season %0S/%S.N.S%0SE%0E.%Q.N-%RG is valid for a multi episode
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Trying to parse Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: The name Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3E4E5 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Trying to parse Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: The name Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Trying to parse Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: The name Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3E4E5 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Trying to parse Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: The name Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Checking whether the pattern %SN - %A-D - %EN is valid for an air-by-date episode
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %SN - %A-D - %EN -> Show Name - 2011-03-09 - Ep Name
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Trying to parse Show Name - 2011-03-09 - Ep Name.ext
May-28 16:08:59 DEBUG    CP Server Thread-5 :: The name Show Name - 2011-03-09 - Ep Name.ext parsed into Show Name - 2011-03-09 - Ep Name [ABD: True]
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %SN - %Sx%0E - %EN -> Show Name - 2x03 - Ep Name
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%E.N -> Show.Name.S02E03.Ep.Name
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %Sx%0E - %EN -> 2x03 - Ep Name
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: S%0SE%0E - %EN -> S02E03 - Ep Name
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: Season %0S -> Season 02
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %SN - %A-D - %EN -> Show Name - 2011-03-09 - Ep Name
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.%A.D.%E.N.%Q.N -> Show.Name.2011.03.09.Ep.Name.HD.TV
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %S.N.%A.D.%E.N-%RG -> Show.Name.2011.03.09.Ep.Name-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:08:59 DEBUG    CP Server Thread-5 :: formatting pattern: %Y/%0M -> 2011/03
May-28 16:08:59 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:08:59 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:09:00 DEBUG    CP Server Thread-8 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Checking whether the pattern Season %0S/%S.N.S%0SE%0E.%Q.N-%RG is valid for a single episode
May-28 16:09:00 DEBUG    CP Server Thread-10 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-8 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-10 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-10 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-8 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: Season %0S -> Season 02
May-28 16:09:00 DEBUG    CP Server Thread-10 :: formatting pattern: Season %0S -> Season 02
May-28 16:09:00 DEBUG    CP Server Thread-8 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Trying to parse Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: The name Season 02/Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Checking whether the pattern Season %0S/%S.N.S%0SE%0E.%Q.N-%RG is valid for a multi episode
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-8 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-8 :: formatting pattern: Season %0S -> Season 02
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: Season %0S -> Season 02
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Trying to parse Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: The name Season 02/Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3E4E5 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03.HD.TV-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: Season %0S -> Season 02
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Trying to parse Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: The name Show.Name.S02E03.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: %S.N.S%0SE%0E.%Q.N-%RG -> Show.Name.S02E03E04E05.HD.TV-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HDTV.XviD-RLSGROUP
May-28 16:09:00 DEBUG    CP Server Thread-7 :: formatting pattern: Season %0S -> Season 02
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Trying to parse Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: Using cached parse result for: Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext
May-28 16:09:00 DEBUG    CP Server Thread-7 :: The name Show.Name.S02E03E04E05.HD.TV-RLSGROUP.ext parsed into Show Name - S2E3E4E5 - HD.TV (RLSGROUP) [ABD: False]
May-28 16:09:06 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:09:06 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:09:37 INFO     CP Server Thread-3 :: Sending XBMC notification to '127.0.0.1:80' - Testing XBMC notifications from Sick Beard
May-28 16:09:37 DEBUG    CP Server Thread-3 :: XBMC JSON command: {"jsonrpc":"2.0","method":"JSONRPC.Version","id":1}
May-28 16:09:37 DEBUG    CP Server Thread-3 :: Contacting XBMC via url: http://127.0.0.1:80/jsonrpc
May-28 16:09:37 DEBUG    CP Server Thread-3 :: XBMC JSON response: {u'jsonrpc': u'2.0', u'id': 1, u'result': {u'version': {u'major': 6, u'minor': 0, u'patch': 3}}}
May-28 16:09:37 DEBUG    CP Server Thread-3 :: Detected XBMC version >= 12, using XBMC JSON API
May-28 16:09:37 DEBUG    CP Server Thread-3 :: XBMC JSON command: {"jsonrpc":"2.0","method":"GUI.ShowNotification","params":{"title":"Test Notification","message":"Testing XBMC notifications from Sick Beard", "image": "http://www.sickbeard.com/xbmc-notify.png"},"id":1}
May-28 16:09:37 DEBUG    CP Server Thread-3 :: Contacting XBMC via url: http://127.0.0.1:80/jsonrpc
May-28 16:09:37 DEBUG    CP Server Thread-3 :: XBMC JSON response: {u'jsonrpc': u'2.0', u'id': 1, u'result': u'OK'}
May-28 16:09:46 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:09:46 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:10:12 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409) AND location != '')) AND season != 0 and episode != 0 AND airdate <= 735381 GROUP BY showid
May-28 16:10:12 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7 GROUP BY showid
May-28 16:10:12 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:10:12 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 16:10:13 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409) AND location != '')) AND season != 0 and episode != 0 AND airdate <= 735381 GROUP BY showid
May-28 16:10:13 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7 GROUP BY showid
May-28 16:10:13 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 16:10:13 DEBUG    CP Server Thread-5 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 17:02:54 DEBUG    SHOWUPDATER :: Starting new thread: SHOWUPDATER
May-28 17:02:54 DEBUG    SHOWUPDATER :: Checking update interval
May-28 17:02:54 DEBUG    SEARCH :: Starting new thread: SEARCH
May-28 17:02:54 DEBUG    FINDPROPERS :: Starting new thread: FINDPROPERS
May-28 17:02:54 DEBUG    FINDPROPERS :: Checking proper time
May-28 17:02:55 INFO     SEARCHQUEUE-RSS-SEARCH :: Changing all old missing episodes to status WANTED
May-28 17:02:55 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_episodes WHERE status = ? AND airdate < ? with args [1, 735381]
May-28 17:02:55 INFO     SEARCHQUEUE-RSS-SEARCH :: Beginning search for new episodes on RSS
May-28 17:02:55 INFO     SEARCHQUEUE-RSS-SEARCH :: Searching all providers for any needed episodes
May-28 17:02:55 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['ezrss']
May-28 17:02:55 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying EZRSS URL: https://www.ezrss.it/feed/
May-28 17:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Success with url: https://www.ezrss.it/feed/
May-28 17:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401253383, 'ezrss']
May-28 17:03:04 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing EZRSS cache and updating with new information
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM ezrss WHERE 1
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS.[eztv].torrent
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS from the torrent link
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: CREATE TABLE if not exists custom_exceptions (exception_id INTEGER PRIMARY KEY, tvdb_id INTEGER KEY, show_name TEXT)
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Inside.Amy.Schumer']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS', 2, '|9|', 0, 0, 'http://re.zoink.it/EB8678ba59', 1401253384, 1]
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.720p.HDTV.X264-DIMENSION from the torrent link
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://re.zoink.it/0786782797', 1401253384, 4]
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Awkward.S04E07.HDTV.x264-2HD.[eztv].torrent
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Awkward.S04E07.HDTV.x264-2HD from the torrent link
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.x264-2HD
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.x264-2HD', 4, '|7|', 0, 0, 'http://re.zoink.it/7E86780eBE', 1401253384, 1]
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Riot.S01E02.HDTV.x264-BAJSKORV.[eztv].torrent
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Riot.S01E02.HDTV.x264-BAJSKORV from the torrent link
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Riot
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 17:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Riot in the DB
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Riot', u'Riot']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Riot
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Riot
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Riot']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Riot', u'Riot']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Riot
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Riot']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Riot.S01E02.HDTV.x264-BAJSKORV', 1, '|2|', 0, 0, 'http://re.zoink.it/7F86780aCC', 1401253385, 1]
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Night.Shift.S01E01.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Night.Shift.S01E01.HDTV.x264-LOL from the torrent link
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Night.Shift.S01E01.HDTV.x264-LOL', 1, '|1|', 0, 0, 'http://re.zoink.it/868678063E', 1401253385, 1]
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.HDTV.x264-LOL from the torrent link
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.HDTV.x264-LOL
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.HDTV.x264-LOL', 1, '|7|', 0, 0, 'http://re.zoink.it/578677d62F', 1401253385, 1]
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Playing.House.S01E06.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Playing.House.S01E06.HDTV.x264-LOL from the torrent link
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Playing.House.S01E06.HDTV.x264-LOL
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Playing House
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Playing House in the DB
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Playing House
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Playing.House']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Playing.House.S01E06.HDTV.x264-LOL', 1, '|6|', 0, 0, 'http://re.zoink.it/2486768838', 1401253385, 1]
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F.[eztv].torrent
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F from the torrent link
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Anthony Bourdain Parts Unknown
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 17:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Anthony Bourdain Parts Unknown in the DB
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Anthony Bourdain Parts Unknown', u'Anthony Bourdain Parts Unknown']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Anthony Bourdain Parts Unknown
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Anthony Bourdain Parts Unknown
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Anthony.Bourdain.Parts.Unknown']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Anthony Bourdain Parts Unknown', u'Anthony Bourdain Parts Unknown']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Anthony Bourdain Parts Unknown
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Anthony.Bourdain.Parts.Unknown']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F', 3, '|6|', 0, 0, 'http://re.zoink.it/E879ec89eEB', 1401253386, 1]
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Happy.Valley.S01E05.HDTV.x264-TLA.[eztv].torrent
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Happy.Valley.S01E05.HDTV.x264-TLA from the torrent link
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Happy Valley
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Happy Valley in the DB
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Happy Valley', u'Happy Valley']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Happy Valley
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Happy Valley
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Happy.Valley']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Happy Valley', u'Happy Valley']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Happy Valley
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Happy.Valley']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Happy.Valley.S01E05.HDTV.x264-TLA', 1, '|5|', 0, 0, 'http://re.zoink.it/488675d3CD', 1401253386, 1]
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup from the torrent link
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup into a valid episode
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup.[MVGroup.org].torrent
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup from the torrent link
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup into a valid episode
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Jonah.From.Tonga.S01E03.HDTV.x264-RiVER.[eztv].torrent
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Jonah.From.Tonga.S01E03.HDTV.x264-RiVER from the torrent link
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Jonah From Tonga
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Jonah From Tonga in the DB
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jonah From Tonga', u'Jonah From Tonga']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jonah From Tonga
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jonah From Tonga
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jonah.From.Tonga']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jonah From Tonga', u'Jonah From Tonga']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jonah From Tonga
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Jonah.From.Tonga']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jonah.From.Tonga.S01E03.HDTV.x264-RiVER', 1, '|3|', 0, 0, 'http://re.zoink.it/7A8672f3CB', 1401253386, 1]
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup from the torrent link
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Tims.Vermeer']
May-28 17:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup', 1, '|6|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=NbXVq5lF6DqYPi4MqcO9XzWI%2F5I%3D', 1401253386, 2]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Great Crimes And Trials Collection', u'Great Crimes And Trials Collection']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Great Crimes And Trials Collection
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Great.Crimes.And.Trials.Collection']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=EFRTNO4n%2BSjhqqyZJtyQsDM2VZ8%3D', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=y6hsBryKUyTKN1R7Q9NFjUBf%2FiE%3D', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS.[eztv].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS', 1, '||', 0, 0, 'http://re.zoink.it/236ec13378', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.HDTV.x264-2HD.[eztv].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.HDTV.x264-2HD from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.HDTV.x264-2HD', 4, '|6|', 0, 0, 'http://re.zoink.it/41866ed9D2', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL', 4, '|6|', 0, 0, 'http://re.zoink.it/EE866ed155', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Listener.S05E01.HDTV.x264-KILLERS.[eztv].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Listener.S05E01.HDTV.x264-KILLERS from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Listener.S05E01.HDTV.x264-KILLERS', 5, '|1|', 0, 0, 'http://piratebaytorrents.info/10238027/The_Listener_S05E01_HDTV_x264-KILLERS.10238027.TPB.torrent', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=kDhIQ7kNBt%2BZJJqCJAcIPFT5mjM%3D', 1401253387, 1]
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup from the torrent link
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=2mmsjqyR2H8JVgtEs069pPwzyf0%3D', 1401253387, 1]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup from the torrent link
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=wYa5cbm2s%2FE1opPJDOYH70u2iuY%3D', 1401253388, 1]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup from the torrent link
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup', 1, '|5|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=%2FqqiDCvOhaNo2gfv6xflPeECBAk%3D', 1401253388, 2]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Hit.the.Floor.S02E01.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Hit.the.Floor.S02E01.HDTV.x264-LOL from the torrent link
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Hit the Floor
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Hit the Floor in the DB
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Hit the Floor', u'Hit the Floor']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Hit the Floor
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Hit the Floor
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Hit.the.Floor']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Hit the Floor', u'Hit the Floor']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Hit the Floor
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Hit.the.Floor']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Hit.the.Floor.S02E01.HDTV.x264-LOL', 2, '|1|', 0, 0, 'http://re.zoink.it/0386665731', 1401253388, 1]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Rookie.Blue.S05E02.HDTV.x264-KILLERS.[eztv].torrent
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Rookie.Blue.S05E02.HDTV.x264-KILLERS from the torrent link
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie.Blue.S05E02.HDTV.x264-KILLERS', 5, '|2|', 0, 0, 'http://re.zoink.it/E48665992D', 1401253388, 1]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E08.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E08.HDTV.x264-LOL from the torrent link
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E08.HDTV.x264-LOL
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: CREATE TABLE if not exists scene_num (tvdb_id INTEGER, season INTEGER, episode INTEGER, scene_season INTEGER, scene_episode INTEGER, PRIMARY KEY (tvdb_id, season, episode, scene_season, scene_episode))
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: CREATE TABLE if not exists xem_num (tvdb_id INTEGER, season INTEGER, episode INTEGER, scene_season INTEGER, scene_episode INTEGER, PRIMARY KEY (tvdb_id, season, episode, scene_season, scene_episode))
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: CREATE TABLE if not exists xem_refresh (tvdb_id INTEGER PRIMARY KEY, last_refreshed INTEGER)
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E08.HDTV.x264-LOL', 4, '|8|', 0, 0, 'http://piratebaytorrents.info/10235294/Louie_S04E08_HDTV_x264-LOL.10235294.TPB.torrent', 1401253388, 1]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV.[eztv].torrent
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV from the torrent link
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Michael J Fox Show
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the michael j fox show']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [269637]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Michael J Fox Show
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Michael.J.Fox.Show']
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV', 1, '|18|', 0, 0, 'http://re.zoink.it/048664761F', 1401253388, 1]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E07.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E07.HDTV.x264-LOL from the torrent link
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E07.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E07.HDTV.x264-LOL', 4, '|7|', 0, 0, 'http://re.zoink.it/53866474B2', 1401253389, 1]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.720p.HDTV.X264-DIMENSION from the torrent link
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.720p.HDTV.X264-DIMENSION', 9, '|5|', 0, 0, 'http://re.zoink.it/1C866424F0', 1401253389, 4]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.HDTV.x264-LOL.[eztv].torrent
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.HDTV.x264-LOL from the torrent link
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.HDTV.x264-LOL', 9, '|5|', 0, 0, 'http://re.zoink.it/2E86640c04', 1401253389, 1]
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM ezrss
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.x264-2HD
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Playing.House.S01E06.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E08.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E07.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.HDTV.x264-LOL
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['publichd']
May-28 17:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: PublicHD cache update URL: http://publichd.se/rss.php
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401253392, 'publichd']
May-28 17:03:12 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing PublicHD cache and updating with new information
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM publichd WHERE 1
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tosh.0.S06E15.720p.HDTV.x264-KILLERS
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tosh 0
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tosh 0']
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [97731, 6, 15]
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [97731]
May-28 17:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up xem mapping for 97731
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT OR REPLACE INTO xem_refresh (tvdb_id, last_refreshed) VALUES (?,?) with args [97731, 1401253393.6106949]
May-28 17:03:13 INFO     SEARCHQUEUE-RSS-SEARCH :: Failure getting thexem.de for show 97731 with message "no show with the tvdb_id 97731 found"
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [97731, 6, 15]
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tosh 0
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tosh.0']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tosh 0', u'Tosh 0']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tosh 0
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Tosh.0']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tosh.0.S06E15.720p.HDTV.x264-KILLERS', 6, '|15|', 0, 0, 'http://publichd.se/download.php?id=96522c4f2987d63f790097465d6bc52f14403ba6&f=Tosh.0.S06E15.720p.HDTV.x264-KILLERS-[PublicHD]', 1401253393, 4]
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Deadliest Catch
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Deadliest Catch in the DB
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Deadliest Catch', u'Deadliest Catch']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Deadliest Catch
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Deadliest Catch
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Deadliest.Catch']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Deadliest Catch', u'Deadliest Catch']
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Deadliest Catch
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 17:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Deadliest.Catch']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]', 10, '|6|', 0, 0, 'http://publichd.se/download.php?id=f4df57bff8dd8f50f735df022c48a5d7f9363ff7&f=Deadliest-Catch-S10E06-Falling-Down-HDTV-x264-FUM[ettv]', 1401253394, 1]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Until Death 2007 BluRay 1080p DTS x264-CHD into a valid episode
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV XviD-FUM[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=414ebb29b6385d075506a2edab7f60893443b6a5&f=The-Night-Shift-S01E01-HDTV-XviD-FUM[ettv]', 1401253394, 1]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV XviD-FUM[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=bf304f51f39164d6fb4c5a57e7b45eee9c9b8552&f=Fargo-S01E07-HDTV-XviD-FUM[ettv]', 1401253394, 1]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.HDTV.XviD-AFG', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=16c559d48f2f468d52266cd0510800378f365a2f&f=Faking.It.2014.S01E06.HDTV.XviD-AFG', 1401253394, 1]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.XviD-AFG
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.XviD-AFG', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=88550e1085faab13903fa8eafd98ca3435ff0eb0&f=Awkward.S04E07.HDTV.XviD-AFG', 1401253394, 1]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Black Sheep 1996 BDRip 720p x264 AAC-5
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Black.Sheep.1996.BDRip.720p.x264.AAC-5']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode', 1, '|0|', 0, 0, 'http://publichd.se/download.php?id=e2a5fc36424ca42b9e5ed1e2fb45c9cd3714d2d1&f=Black-Sheep-1996-BDRip-720p-x264-AAC-5.0-multisub-HighCode', 1401253394, 32768]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV x264-LOL[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=84454511ff6daa28b347d982269a88b5ea6c4959&f=The-Night-Shift-S01E01-HDTV-x264-LOL[ettv]', 1401253395, 1]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264-LOL[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=8f8e8bce5eee653ed5e72cfe077c2ff4dd675d27&f=Fargo-S01E07-HDTV-x264-LOL[ettv]', 1401253395, 1]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=6e44b4afe13b6ce8239bcc0e71b8b97fed2e7220&f=Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE-[PublicHD]', 1401253395, 4]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=eb825cc31f2d9b73428c598bd98611e72aeff40d&f=Fargo.S01E07.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401253395, 4]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode into a valid episode
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=91819221f42b1180a00c26b003ce6cfe411fa342&f=The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401253395, 4]
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.720p.HDTV.x264-2HD
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.720p.HDTV.x264-2HD', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=385c2bafcdfdff102fe3839195089ad74a3326f0&f=Awkward.S04E07.720p.HDTV.x264-2HD-[PublicHD]', 1401253396, 4]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 HDTV x264-2HD[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 HDTV x264-2HD[ettv]', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=523e054f909fda15fb214b596ec74d9788a8d850&f=Awkward-S04E07-HDTV-x264-2HD[ettv]', 1401253396, 1]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Fockers Trilogy 2000-2010 BDRip 720p x264 DTS-HighCode
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename The Fockers Trilogy 2000-2010 BDRip 720p x264 DTS-HighCode into a valid episode
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: The Fockers Trilogy 2000-2010 BDRip 720p x264 DTS-HighCode
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Longmire
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Longmire']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS', 2, '||', 0, 0, 'http://publichd.se/download.php?id=9efd8bf50a7abffef565127651a4aca58f6a6081&f=Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS-[PublicHD]', 1401253396, 64]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Longmire
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Longmire']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS', 2, '||', 0, 0, 'http://publichd.se/download.php?id=9685079de53c3ab91fd9eb234b8d82696e291921&f=Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS-[PublicHD]', 1401253396, 32]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Playing.House.S01E06.720p.HDTV.X264-DIMENSION
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Playing House
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Playing House in the DB
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Playing House
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Playing.House']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Playing.House.S01E06.720p.HDTV.X264-DIMENSION', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=7bdc3412f049cd4cb335a913582907177f2bd665&f=Playing.House.S01E06.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401253396, 4]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM publichd
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tosh.0.S06E15.720p.HDTV.x264-KILLERS
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.XviD-AFG
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Night.Shift.S01E01.720p.HDTV.X264-DIMENSION
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.720p.HDTV.x264-2HD
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 HDTV x264-2HD[ettv]
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.1080p.WEB-DL.AAC2.0.h264-QUEENS
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Longmire.S02.The.Cameras.Eye.Realizing.The.World.Of.Longmire.720p.WEB-DL.AAC2.0.h264-QUEENS
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Playing.House.S01E06.720p.HDTV.X264-DIMENSION
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['showrss']
May-28 17:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: ShowRSS cache update URL: http://showrss.info/feeds/all.rss
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401253399, 'showrss']
May-28 17:03:19 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing ShowRSS cache and updating with new information
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM showrss WHERE 1
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 HDTV x264 2HD
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 HDTV x264 2HD', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:7EBEECA9D840EFBA356E6AD5CC1882C55E3B8B08&dn=Awkward+S04E07+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253399, 1]
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 720p HDTV X264 DIMENSION
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 720p HDTV X264 DIMENSION', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:079748D09F17B3DC02A6BEE2A8D9C62B1AC3C149&dn=Fargo+S01E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253399, 4]
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264 LOL
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264 LOL', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:572F3EBDA2745BB775368B0D1FEA9433347761FC&dn=Fargo+S01E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253400, 1]
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Holby City S16E33 720p HDTV x264 FTP
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Holby City
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Holby City in the DB
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Holby City', u'Holby City']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Holby City
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Holby City
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Holby.City']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Holby City S16E33 720p HDTV x264 FTP', 16, '|33|', 0, 0, 'magnet:?xt=urn:btih:4E0D330677F47066D1B941560CC3E3D94C8DB570&dn=Holby+City+S16E33+720p+HDTV+x264+FTP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253400, 4]
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:9A4DB37C54DC406073AD62B70B24909B30D01FB9&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253400, 4]
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:237880929E6358CA4F562F2D76E3272FA06EB615&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253400, 1]
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 HDTV x264 2HD
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:4C5C60F4F1F8FFDB9ED11AE9E68C2BE946E1F587&dn=The+Boondocks+S04E06+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253400, 1]
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 720p HDTV x264 2HD
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 720p HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:BA7701F16C4EB4375701C31C4669B898CC7F63C4&dn=The+Boondocks+S04E06+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253400, 4]
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 17:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Lizard Lick Towing
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Lizard Lick Towing in the DB
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Lizard Lick Towing', u'Lizard Lick Towing']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Lizard Lick Towing
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Lizard Lick Towing
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Lizard.Lick.Towing']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Lizard Lick Towing S06E15 720p HDTV x264 DHD', 6, '|15|', 0, 0, 'magnet:?xt=urn:btih:9A4252131430AD7153A25C68344A87589E61EC5C&dn=Lizard+Lick+Towing+S06E15+720p+HDTV+x264+DHD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253401, 4]
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:E74FA4CB4E8416788F93821DA4D4725A2D8CEF5E&dn=WWE+Monday+Night+RAW+2014+05+26+720p+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253401, 4]
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:F5F1210DC1836810FB9AEE5A98F2F87CBBA44493&dn=WWE+Monday+Night+RAW+2014+05+26+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253401, 1]
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 HDTV x264 KILLERS
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:734F4FDD59C2EF30FB9E44FB9118CB5714DD8791&dn=The+Listener+S05E01+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253401, 1]
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 720p HDTV x264 KILLERS
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 720p HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:87115A3534197CB79E8086487EEF5F581C2F70BD&dn=The+Listener+S05E01+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253401, 4]
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:0F5775A8DF45CA9CFF42C3E6F151D3DFF1FDF082&dn=Rookie+Blue+S05E02+REPACK+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253402, 4]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:A2038A49A0BD373AEB91948DCEFBC516F634B562&dn=Rookie+Blue+S05E02+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253402, 4]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 720p HDTV X264 DIMENSION
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 720p HDTV X264 DIMENSION', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:79EC9A95D13F17E2383AA7BBD57A4C3576F6BAC6&dn=Louie+S04E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253402, 4]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 720p HDTV X264 DIMENSION
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 720p HDTV X264 DIMENSION', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:75703900AFAB9B9947B7BFDCD8EB040F98018DFC&dn=Louie+S04E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253402, 4]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:E42DC2E867607E1608E8BBA6F58E0FDA016D0736&dn=Rookie+Blue+S05E02+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253402, 1]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 HDTV x264 LOL
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 HDTV x264 LOL', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:E2DB49D41FFC68577F23CD520B9CD5D71476551A&dn=Louie+S04E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253402, 1]
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 17:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 720p HDTV X264 DIMENSION', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:478332F210F5517186039CAA11B4D7DFCEB09A82&dn=MasterChef+US+S05E01+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253403, 4]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 720p HDTV X264 DIMENSION', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:D7CEE1E0DE16767EE22FE16C099809EB57FA1D7E&dn=Friends+with+Better+Lives+S01E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253403, 4]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 HDTV x264 LOL
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 HDTV x264 LOL', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:53B27792661929DD8F62965E268F0AD389926F3D&dn=Louie+S04E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253403, 1]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Marvel&#039;s Avengers Assemble
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Marvel&#039;s Avengers Assemble in the DB
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Marvel&#039;s Avengers Assemble', u'Marvel&#039;s Avengers Assemble']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Marvel&#039;s Avengers Assemble
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Marvel&#039;s Avengers Assemble
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Marveland#039;s.Avengers.Assemble']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264', 1, '|26|', 0, 0, 'magnet:?xt=urn:btih:9B3892AD2F089104E9F2B147AE40A04BD9FCF4A9&dn=Marvel%26%23039%3Bs+Avengers+Assemble+S01E26+720p+WEB+DL+DD5+1+AAC2+0+H264&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253403, 32]
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 720p HDTV X264 DIMENSION
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 720p HDTV X264 DIMENSION', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:1CF0CDF7CCE3FE3D86163DB3E3BE29CEE2AA2379&dn=24+S09E05+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253403, 4]
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 HDTV x264 LOL
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 HDTV x264 LOL', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:2E04A26B78AD06F8F3BEA69F610C111F9F408C43&dn=24+S09E05+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253404, 1]
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 HDTV x264 LOL
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 HDTV x264 LOL', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:CA0DEE1C9979E9E5B0BEA1104B6516397DC4C662&dn=MasterChef+US+S05E01+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253404, 1]
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 HDTV x264 LOL', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:AA9596E89CBAF8C710FFCF6A4B42AF37FB31E867&dn=Friends+with+Better+Lives+S01E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253404, 1]
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 17:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 720p HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:C60402A581BB299A74275F6485A6DAC8E6553F22&dn=Nurse+Jackie+S06E08+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253405, 4]
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 HDTV x264 BATV
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:D0365B9B5C2F6587CED418F623E87AB6082CB43D&dn=Nurse+Jackie+S06E08+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253405, 1]
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Californication S07E08 720p HDTV x264 DAA
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Californication
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Californication in the DB
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Californication', u'Californication']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Californication
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Californication
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Californication']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Californication S07E08 720p HDTV x264 DAA', 7, '|8|', 0, 0, 'magnet:?xt=urn:btih:1757B1DA0682E7D13973F37DD080D2ED5FC82FE5&dn=Californication+S07E08+720p+HDTV+x264+DAA&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253405, 4]
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:2C09F4385E54FB1867E5037CB709A77674B103A8&dn=Craig+Ferguson+2014+05+23+Jon+Favreau+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253405, 4]
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:37B081381A7398AF5562C1E8A46ED74734AD316E&dn=Craig+Ferguson+2014+05+22+Tom+Lennon+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253405, 4]
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:DD7E9E597B3DF86013ABC6A257F444E1576E5313&dn=Robot+Chicken+S07E07+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253405, 1]
May-28 17:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 720p HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:D8E50009720EB56A49D107AA9CBD4067407C5A57&dn=Robot+Chicken+S07E07+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253406, 4]
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 720p HDTV x264 2HD
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 720p HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:CBF011EE02EF39CF77798F0E2080215A4FE15F94&dn=Continuum+S03E09+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253406, 4]
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 720p HDTV X264 DIMENSION', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:2F14F61DDFB3A2D32EF42655D68F0E879FC96C5C&dn=Mad+Men+S07E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253406, 4]
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:1B1E214521730E004DC6BA681DB33AD4E8B61787&dn=Devious+Maids+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253406, 4]
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 17:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 720p HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:913EF0F8FBC9D864A6BD1D088AAC5527FB446C27&dn=Penny+Dreadful+S01E03+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253407, 4]
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 720p HDTV X264 DIMENSION', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:609623A405C6797C5C21209EBC9217B763D3F252&dn=Crisis+S01E09+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253407, 4]
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 720p HDTV X264 DIMENSION
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 720p HDTV X264 DIMENSION', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:C4E70E3E50691EE1369D86CD6F63FD9B9E898F66&dn=Salem+S01E06+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253407, 4]
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 720p HDTV x264 IMMERSE
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 720p HDTV x264 IMMERSE', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:8C1580FDB4C9E333709DE30D517A340F91425BE1&dn=Turn+S01E08+720p+HDTV+x264+IMMERSE&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253408, 4]
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 720p HDTV X264 DIMENSION
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 17:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 720p HDTV X264 DIMENSION', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:0A2768D3D794787CC867D011DBF087430EA84DAD&dn=Believe+S01E10+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253409, 4]
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 HDTV x264 KILLERS
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:DC49C9BF95984A7A435FAD2FAD87F992188A03FC&dn=Devious+Maids+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253409, 1]
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 HDTV x264 LOL
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 HDTV x264 LOL', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:4AC134EB2E9701B952CA28566600D76F4ADE5AD9&dn=Mad+Men+S07E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253409, 1]
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 HDTV x264 LOL
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 HDTV x264 LOL', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:A10DE6AB58F6DB3C607E289C16E7987B876A3A2A&dn=Salem+S01E06+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253409, 1]
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:F87A438AF6035745F0FDBF39BED492C59ACE8A34&dn=Penny+Dreadful+S01E03+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253409, 1]
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 HDTV x264 LOL
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 HDTV x264 LOL', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:F13724FE5DC1DBBA311AC35F146BFF0D2552DBA4&dn=Crisis+S01E09+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253410, 1]
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 HDTV x264 LOL
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 HDTV x264 LOL', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:FA80D091D84C5CC056661FF56106287F0A9AFB53&dn=Believe+S01E10+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253410, 1]
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 HDTV x264 2HD
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:9AF306F95B3A6B7C65217851263AFAEFF64B7D50&dn=Continuum+S03E09+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253410, 1]
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 HDTV x264 ASAP
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 HDTV x264 ASAP', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:59E71AD1231A2E42B56F67C75664DA8D29337EBC&dn=Turn+S01E08+HDTV+x264+ASAP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253410, 1]
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:A61B7EB77E6CFBD228A9979C3B3205F34B5240AB&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253410, 4]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:48EE6604E195B2F59A8383C775BB28D0C3C2F03A&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253411, 1]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rugby Super Rugby
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rugby.Super.Rugby']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:305F8799ED8FEA2FB40249D42DEC3BDD25DAE7BB&dn=Rugby+Super+Rugby+2014+05+24+Force+vs+Lions+720p+AHDTV+x264+C4TV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253411, 4]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 HDTV x264 KILLERS
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:A668266F4E4FF05C34A3518C7F64FA8B8E7F2AC7&dn=Orphan+Black+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253411, 1]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:C09A6DF90B32845E5C4713F54E689A099249AD24&dn=Orphan+Black+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253411, 4]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Survivor
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'survivor']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'survivor']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Survivor in the DB
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Survivor', u'Survivor']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Survivor
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Survivor
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Survivor']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS', 28, '|14|', 0, 0, 'magnet:?xt=urn:btih:70D220D74A0C8D90454CDCAA2E10F04FFB328992&dn=Survivor+S28E14+720p+WEB+DL+AAC2+0+H264+KiNGS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253411, 32]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rugby Super Rugby 2014 05 23 Bulls vs Brumbies 720p AHDTV x264 C
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rugby Super Rugby
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rugby.Super.Rugby']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rugby Super Rugby 2014 05 23 Bulls vs Brumbies 720p AHDTV x264 C', 1, '||', 0, 0, 'magnet:?xt=urn:btih:00CFDEEB2645C419F697457FCACBABD6AAC71C0C&dn=Rugby+Super+Rugby+2014+05+23+Bulls+vs+Brumbies+720p+AHDTV+x264+C&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253411, 4]
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Silicon Valley S01E07 PROPER 720p HDTV x264 BATV
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Silicon Valley
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'silicon valley']
May-28 17:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'silicon valley']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Silicon Valley in the DB
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Silicon Valley', u'Silicon Valley']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Silicon Valley
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Silicon Valley
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Silicon.Valley']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Silicon Valley S01E07 PROPER 720p HDTV x264 BATV', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:8F709F6B061D1803C064D58358829131E7566D04&dn=Silicon+Valley+S01E07+PROPER+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253412, 4]
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE S02E10 HDTV x264 BATV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on VICE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up VICE in the DB
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'VICE', u'VICE']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for VICE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE S02E10 HDTV x264 BATV', 2, '|10|', 0, 0, 'magnet:?xt=urn:btih:4D366DFA8FAFEE0FC5B43AD5976CA5F6A5EAC97D&dn=VICE+S02E10+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253412, 1]
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: VICE S02E10 720p HDTV x264 BATV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on VICE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'vice']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up VICE in the DB
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'VICE', u'VICE']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for VICE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of VICE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'VICE']
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['VICE S02E10 720p HDTV x264 BATV', 2, '|10|', 0, 0, 'magnet:?xt=urn:btih:82EFF29D50596AAD6CAB935479D8343AD1B58FC3&dn=VICE+S02E10+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401253412, 4]
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM showrss
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 HDTV x264 2HD
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Holby City S16E33 720p HDTV x264 FTP
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 HDTV x264 2HD
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 720p HDTV x264 2HD
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 HDTV x264 BATV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Californication S07E08 720p HDTV x264 DAA
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 720p HDTV x264 2HD
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 720p HDTV x264 IMMERSE
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 720p HDTV X264 DIMENSION
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 HDTV x264 LOL
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 HDTV x264 2HD
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 HDTV x264 ASAP
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rugby Super Rugby 2014 05 23 Bulls vs Brumbies 720p AHDTV x264 C
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Silicon Valley S01E07 PROPER 720p HDTV x264 BATV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE S02E10 HDTV x264 BATV
May-28 17:03:32 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: VICE S02E10 720p HDTV x264 BATV
May-28 17:03:32 INFO     SEARCHQUEUE-RSS-SEARCH :: No needed episodes found on the RSS feeds
May-28 17:08:42 DEBUG    MAIN :: importing downloader
May-28 17:08:42 INFO     MAIN :: libtorrent is NOT available
May-28 17:08:42 INFO     MAIN :: Checking database structure...
May-28 17:08:42 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
May-28 17:08:42 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Tvr Id database upgrade
May-28 17:08:42 DEBUG    MAIN :: AddTvrId upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Tvr Name database upgrade
May-28 17:08:42 DEBUG    MAIN :: AddTvrName upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Airdate Index database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('idx_tv_episodes_showid_airdate',)
May-28 17:08:42 DEBUG    MAIN :: AddAirdateIndex upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Numeric Providers database upgrade
May-28 17:08:42 DEBUG    MAIN :: NumericProviders upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking New Quality Settings database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
May-28 17:08:42 DEBUG    MAIN :: NewQualitySettings upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Drop Old History Table database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: DropOldHistoryTable upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Upgrade History For Generic Providers database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: UpgradeHistoryForGenericProviders upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Air By Date Option database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: AddAirByDateOption upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Change Sab Config From Ip To Host database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: ChangeSabConfigFromIpToHost upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Fix Sab Host database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: FixSabHostURL upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Lang database upgrade
May-28 17:08:42 DEBUG    MAIN :: AddLang upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Populate Root Dirs database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: PopulateRootDirs upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Set Nzb Torrent Settings database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: SetNzbTorrentSettings upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Fix Air By Date Setting database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: FixAirByDateSetting upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: AddSizeAndSceneNameFields upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: RenameSeasonFolders upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 17:08:42 DEBUG    MAIN :: Add1080pAndRawHDQualities upgrade not required
May-28 17:08:42 INFO     MAIN :: Checking database structure...
May-28 17:08:42 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 17:08:42 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
May-28 17:08:42 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
May-28 17:08:42 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
May-28 17:08:42 DEBUG    MAIN :: AddSceneExceptions upgrade not required
May-28 17:08:42 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
May-28 17:08:42 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
May-28 17:08:42 DEBUG    MAIN :: AddSceneNameCache upgrade not required
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
May-28 17:08:42 INFO     MAIN :: No duplicate show, check passed
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
May-28 17:08:42 INFO     MAIN :: No duplicate episode, check passed
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
May-28 17:08:42 INFO     MAIN :: No orphan episode, check passed
May-28 17:08:42 DEBUG    MAIN :: config_version -> 3
May-28 17:08:42 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /root/.xbmc/addons/service.downloadmanager.InternetPVR/SickBeard
May-28 17:08:42 DEBUG    MAIN :: git output: /bin/sh: git: not found

May-28 17:08:42 DEBUG    MAIN :: Unable to find git with command git symbolic-ref -q HEAD
May-28 17:08:42 DEBUG    MAIN :: Retrieving the last check time from the DB
May-28 17:08:42 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
May-28 17:08:43 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8082/
May-28 17:08:48 ERROR    MAIN :: Unable to start web server, is something else running on port 8082?
May-28 18:02:54 DEBUG    SHOWUPDATER :: Starting new thread: SHOWUPDATER
May-28 18:02:54 DEBUG    SEARCH :: Starting new thread: SEARCH
May-28 18:02:54 DEBUG    SHOWUPDATER :: Checking update interval
May-28 18:02:54 DEBUG    FINDPROPERS :: Starting new thread: FINDPROPERS
May-28 18:02:54 DEBUG    FINDPROPERS :: Checking proper time
May-28 18:02:56 INFO     SEARCHQUEUE-RSS-SEARCH :: Changing all old missing episodes to status WANTED
May-28 18:02:57 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_episodes WHERE status = ? AND airdate < ? with args [1, 735381]
May-28 18:02:57 INFO     SEARCHQUEUE-RSS-SEARCH :: Beginning search for new episodes on RSS
May-28 18:02:57 INFO     SEARCHQUEUE-RSS-SEARCH :: Searching all providers for any needed episodes
May-28 18:02:57 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['ezrss']
May-28 18:02:57 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying EZRSS URL: https://www.ezrss.it/feed/
May-28 18:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Success with url: https://www.ezrss.it/feed/
May-28 18:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401256984, 'ezrss']
May-28 18:03:04 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing EZRSS cache and updating with new information
May-28 18:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM ezrss WHERE 1
May-28 18:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS.[eztv].torrent
May-28 18:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS from the torrent link
May-28 18:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS', 2, '|9|', 0, 0, 'http://re.zoink.it/EB8678ba59', 1401256985, 1]
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.720p.HDTV.X264-DIMENSION from the torrent link
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://re.zoink.it/0786782797', 1401256985, 4]
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Awkward.S04E07.HDTV.x264-2HD.[eztv].torrent
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Awkward.S04E07.HDTV.x264-2HD from the torrent link
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.x264-2HD
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.x264-2HD', 4, '|7|', 0, 0, 'http://re.zoink.it/7E86780eBE', 1401256985, 1]
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Riot.S01E02.HDTV.x264-BAJSKORV.[eztv].torrent
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Riot.S01E02.HDTV.x264-BAJSKORV from the torrent link
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Riot
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 18:03:05 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Riot in the DB
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Riot', u'Riot']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Riot
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Riot
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Riot']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Riot.S01E02.HDTV.x264-BAJSKORV', 1, '|2|', 0, 0, 'http://re.zoink.it/7F86780aCC', 1401256986, 1]
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Night.Shift.S01E01.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Night.Shift.S01E01.HDTV.x264-LOL from the torrent link
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Night.Shift.S01E01.HDTV.x264-LOL', 1, '|1|', 0, 0, 'http://re.zoink.it/868678063E', 1401256986, 1]
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.HDTV.x264-LOL from the torrent link
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.HDTV.x264-LOL
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.HDTV.x264-LOL', 1, '|7|', 0, 0, 'http://re.zoink.it/578677d62F', 1401256986, 1]
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Playing.House.S01E06.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Playing.House.S01E06.HDTV.x264-LOL from the torrent link
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Playing.House.S01E06.HDTV.x264-LOL
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Playing House
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 18:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Playing House in the DB
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Playing House
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Playing.House']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Playing.House.S01E06.HDTV.x264-LOL', 1, '|6|', 0, 0, 'http://re.zoink.it/2486768838', 1401256987, 1]
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F.[eztv].torrent
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F from the torrent link
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Anthony Bourdain Parts Unknown
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Anthony Bourdain Parts Unknown in the DB
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Anthony Bourdain Parts Unknown', u'Anthony Bourdain Parts Unknown']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Anthony Bourdain Parts Unknown
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Anthony Bourdain Parts Unknown
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Anthony.Bourdain.Parts.Unknown']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F', 3, '|6|', 0, 0, 'http://re.zoink.it/E879ec89eEB', 1401256987, 1]
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Happy.Valley.S01E05.HDTV.x264-TLA.[eztv].torrent
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Happy.Valley.S01E05.HDTV.x264-TLA from the torrent link
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Happy Valley
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Happy Valley in the DB
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Happy Valley', u'Happy Valley']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Happy Valley
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Happy Valley
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Happy.Valley']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Happy.Valley.S01E05.HDTV.x264-TLA', 1, '|5|', 0, 0, 'http://re.zoink.it/488675d3CD', 1401256987, 1]
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup from the torrent link
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup into a valid episode
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup.[MVGroup.org].torrent
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup from the torrent link
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup into a valid episode
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Jonah.From.Tonga.S01E03.HDTV.x264-RiVER.[eztv].torrent
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Jonah.From.Tonga.S01E03.HDTV.x264-RiVER from the torrent link
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Jonah From Tonga
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 18:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Jonah From Tonga in the DB
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jonah From Tonga', u'Jonah From Tonga']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jonah From Tonga
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jonah From Tonga
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jonah.From.Tonga']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jonah.From.Tonga.S01E03.HDTV.x264-RiVER', 1, '|3|', 0, 0, 'http://re.zoink.it/7A8672f3CB', 1401256988, 1]
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup from the torrent link
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup', 1, '|6|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=NbXVq5lF6DqYPi4MqcO9XzWI%2F5I%3D', 1401256988, 2]
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup from the torrent link
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=EFRTNO4n%2BSjhqqyZJtyQsDM2VZ8%3D', 1401256988, 1]
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup from the torrent link
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=y6hsBryKUyTKN1R7Q9NFjUBf%2FiE%3D', 1401256988, 1]
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS.[eztv].torrent
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS from the torrent link
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS', 1, '||', 0, 0, 'http://re.zoink.it/236ec13378', 1401256988, 1]
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.HDTV.x264-2HD.[eztv].torrent
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.HDTV.x264-2HD from the torrent link
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.HDTV.x264-2HD', 4, '|6|', 0, 0, 'http://re.zoink.it/41866ed9D2', 1401256988, 1]
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL from the torrent link
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL', 4, '|6|', 0, 0, 'http://re.zoink.it/EE866ed155', 1401256989, 1]
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Listener.S05E01.HDTV.x264-KILLERS.[eztv].torrent
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Listener.S05E01.HDTV.x264-KILLERS from the torrent link
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Listener.S05E01.HDTV.x264-KILLERS', 5, '|1|', 0, 0, 'http://piratebaytorrents.info/10238027/The_Listener_S05E01_HDTV_x264-KILLERS.10238027.TPB.torrent', 1401256989, 1]
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup from the torrent link
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=kDhIQ7kNBt%2BZJJqCJAcIPFT5mjM%3D', 1401256989, 1]
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup from the torrent link
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=2mmsjqyR2H8JVgtEs069pPwzyf0%3D', 1401256989, 1]
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup from the torrent link
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=wYa5cbm2s%2FE1opPJDOYH70u2iuY%3D', 1401256989, 1]
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup from the torrent link
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup', 1, '|5|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=%2FqqiDCvOhaNo2gfv6xflPeECBAk%3D', 1401256989, 2]
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Hit.the.Floor.S02E01.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Hit.the.Floor.S02E01.HDTV.x264-LOL from the torrent link
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Hit the Floor
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 18:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Hit the Floor in the DB
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Hit the Floor', u'Hit the Floor']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Hit the Floor
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Hit the Floor
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Hit.the.Floor']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Hit.the.Floor.S02E01.HDTV.x264-LOL', 2, '|1|', 0, 0, 'http://re.zoink.it/0386665731', 1401256990, 1]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Rookie.Blue.S05E02.HDTV.x264-KILLERS.[eztv].torrent
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Rookie.Blue.S05E02.HDTV.x264-KILLERS from the torrent link
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie.Blue.S05E02.HDTV.x264-KILLERS', 5, '|2|', 0, 0, 'http://re.zoink.it/E48665992D', 1401256990, 1]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E08.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E08.HDTV.x264-LOL from the torrent link
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E08.HDTV.x264-LOL
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E08.HDTV.x264-LOL', 4, '|8|', 0, 0, 'http://piratebaytorrents.info/10235294/Louie_S04E08_HDTV_x264-LOL.10235294.TPB.torrent', 1401256990, 1]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV.[eztv].torrent
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV from the torrent link
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Michael J Fox Show
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the michael j fox show']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [269637]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Michael J Fox Show
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Michael.J.Fox.Show']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV', 1, '|18|', 0, 0, 'http://re.zoink.it/048664761F', 1401256990, 1]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E07.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E07.HDTV.x264-LOL from the torrent link
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E07.HDTV.x264-LOL
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E07.HDTV.x264-LOL', 4, '|7|', 0, 0, 'http://re.zoink.it/53866474B2', 1401256990, 1]
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.720p.HDTV.X264-DIMENSION from the torrent link
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.720p.HDTV.X264-DIMENSION', 9, '|5|', 0, 0, 'http://re.zoink.it/1C866424F0', 1401256991, 4]
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.HDTV.x264-LOL.[eztv].torrent
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.HDTV.x264-LOL from the torrent link
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.HDTV.x264-LOL', 9, '|5|', 0, 0, 'http://re.zoink.it/2E86640c04', 1401256991, 1]
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM ezrss
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.x264-2HD
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Playing.House.S01E06.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E08.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E07.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.HDTV.x264-LOL
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['publichd']
May-28 18:03:11 DEBUG    SEARCHQUEUE-RSS-SEARCH :: PublicHD cache update URL: http://publichd.se/rss.php
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401256993, 'publichd']
May-28 18:03:13 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing PublicHD cache and updating with new information
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM publichd WHERE 1
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA 5.1-HighCode
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Saving.Mr.Banks.2013.BDRip.1080p.x264.DTS-HD.MA']
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Saving Mr  Banks 2013 BDRip 1080p x264 DTS HD MA', u'Saving Mr  Banks 2013 BDRip 1080p x264 DTS HD MA']
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Saving Mr  Banks 2013 BDRip 1080p x264 DTS HD MA
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Saving.Mr.Banks.2013.BDRip.1080p.x264.DTS-HD.MA']
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA 5.1-HighCode', 1, '|5|', 0, 0, 'http://publichd.se/download.php?id=d60428bda76fc8fec0aaecd89bd58a7a9682d1e0&f=Saving-Mr.-Banks-2013-BDRip-1080p-x264-DTS-HD-MA-5.1-HighCode', 1401256993, 32768]
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Mia.and.Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ["Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD", 1, '|8|', 0, 0, "http://publichd.se/download.php?id=98a8e3e877a1af58fde6c30d0e8b630507c406cd&f=Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]", 1401256994, 64]
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ["Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD", 1, '|8|', 0, 0, "http://publichd.se/download.php?id=59aa6adcd49086ca9991673a9509eb3cde687b88&f=Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]", 1401256994, 32]
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=164c0ae8a477df747c2eb90b8a68a09fb16cff85&f=Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]', 1401256995, 32]
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=af812235a8e6f9497c2cbdcd4f10a07e7c1e9aa3&f=Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]', 1401256995, 64]
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Freakshow.S02E07.720p.HDTV.x264-KILLERS
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Freakshow
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'freakshow']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'freakshow']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Freakshow in the DB
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Freakshow', u'Freakshow']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Freakshow
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Freakshow
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Freakshow']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: No cache results returned, continuing on with the search
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying to look the show up in the show database
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Freakshow', u'Freakshow']
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Freakshow
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Couldn't figure out a show name straight from the DB, trying a regex search instead
May-28 18:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO scene_names (tvdb_id, name) VALUES (?, ?) with args [0, u'Freakshow']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Freakshow.S02E07.720p.HDTV.x264-KILLERS', 2, '|7|', 0, 0, 'http://publichd.se/download.php?id=fcaadfa5a8ab8c04d5763a6860b7bed1f2ac1fc9&f=Freakshow.S02E07.720p.HDTV.x264-KILLERS-[PublicHD]', 1401256996, 4]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS', 2, '|9|', 0, 0, 'http://publichd.se/download.php?id=5c6064334e920a0d9bc424d6610c91c3995cc804&f=Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS-[PublicHD]', 1401256996, 4]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tosh.0.S06E15.720p.HDTV.x264-KILLERS
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tosh 0
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tosh 0']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [97731, 6, 15]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [97731]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [97731, 6, 15]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tosh 0
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tosh.0']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tosh.0.S06E15.720p.HDTV.x264-KILLERS', 6, '|15|', 0, 0, 'http://publichd.se/download.php?id=96522c4f2987d63f790097465d6bc52f14403ba6&f=Tosh.0.S06E15.720p.HDTV.x264-KILLERS-[PublicHD]', 1401256996, 4]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Deadliest Catch
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Deadliest Catch in the DB
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Deadliest Catch', u'Deadliest Catch']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Deadliest Catch
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Deadliest Catch
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Deadliest.Catch']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]', 10, '|6|', 0, 0, 'http://publichd.se/download.php?id=f4df57bff8dd8f50f735df022c48a5d7f9363ff7&f=Deadliest-Catch-S10E06-Falling-Down-HDTV-x264-FUM[ettv]', 1401256996, 1]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Until Death 2007 BluRay 1080p DTS x264-CHD into a valid episode
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV XviD-FUM[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=414ebb29b6385d075506a2edab7f60893443b6a5&f=The-Night-Shift-S01E01-HDTV-XviD-FUM[ettv]', 1401256996, 1]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV XviD-FUM[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=bf304f51f39164d6fb4c5a57e7b45eee9c9b8552&f=Fargo-S01E07-HDTV-XviD-FUM[ettv]', 1401256997, 1]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.HDTV.XviD-AFG', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=16c559d48f2f468d52266cd0510800378f365a2f&f=Faking.It.2014.S01E06.HDTV.XviD-AFG', 1401256997, 1]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.XviD-AFG
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.XviD-AFG', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=88550e1085faab13903fa8eafd98ca3435ff0eb0&f=Awkward.S04E07.HDTV.XviD-AFG', 1401256997, 1]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Black Sheep 1996 BDRip 720p x264 AAC-5
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Black.Sheep.1996.BDRip.720p.x264.AAC-5']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode', 1, '|0|', 0, 0, 'http://publichd.se/download.php?id=e2a5fc36424ca42b9e5ed1e2fb45c9cd3714d2d1&f=Black-Sheep-1996-BDRip-720p-x264-AAC-5.0-multisub-HighCode', 1401256997, 32768]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV x264-LOL[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=84454511ff6daa28b347d982269a88b5ea6c4959&f=The-Night-Shift-S01E01-HDTV-x264-LOL[ettv]', 1401256997, 1]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264-LOL[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=8f8e8bce5eee653ed5e72cfe077c2ff4dd675d27&f=Fargo-S01E07-HDTV-x264-LOL[ettv]', 1401256998, 1]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=6e44b4afe13b6ce8239bcc0e71b8b97fed2e7220&f=Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE-[PublicHD]', 1401256998, 4]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=eb825cc31f2d9b73428c598bd98611e72aeff40d&f=Fargo.S01E07.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401256998, 4]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode into a valid episode
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM publichd
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA 5.1-HighCode
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Freakshow.S02E07.720p.HDTV.x264-KILLERS
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tosh.0.S06E15.720p.HDTV.x264-KILLERS
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.XviD-AFG
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['showrss']
May-28 18:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: ShowRSS cache update URL: http://showrss.info/feeds/all.rss
May-28 18:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401257000, 'showrss']
May-28 18:03:20 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing ShowRSS cache and updating with new information
May-28 18:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM showrss WHERE 1
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking It 2014 S01E06 HDTV x264 2HD
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking It 2014 S01E06 HDTV x264 2HD', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:6F008B3350CB9FFC97417209B38C98D8F8B588DC&dn=Faking+It+2014+S01E06+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257001, 1]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking It 2014 S01E06 720p HDTV x264 IMMERSE
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking It 2014 S01E06 720p HDTV x264 IMMERSE', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:6E44B4AFE13B6CE8239BCC0E71B8B97FED2E7220&dn=Faking+It+2014+S01E06+720p+HDTV+x264+IMMERSE&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257001, 4]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 720p HDTV x264 2HD
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 720p HDTV x264 2HD', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:385C2BAFCDFDFF102FE3839195089AD74A3326F0&dn=Awkward+S04E07+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257001, 4]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside Amy Schumer S02E09 HDTV x264 KILLERS
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside Amy Schumer S02E09 HDTV x264 KILLERS', 2, '|9|', 0, 0, 'magnet:?xt=urn:btih:EB59234B43F150321685587012AEFD5DB74323B9&dn=Inside+Amy+Schumer+S02E09+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257001, 1]
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 HDTV x264 2HD
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 18:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 HDTV x264 2HD', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:7EBEECA9D840EFBA356E6AD5CC1882C55E3B8B08&dn=Awkward+S04E07+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257002, 1]
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 720p HDTV X264 DIMENSION
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 720p HDTV X264 DIMENSION', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:079748D09F17B3DC02A6BEE2A8D9C62B1AC3C149&dn=Fargo+S01E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257002, 4]
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264 LOL
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264 LOL', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:572F3EBDA2745BB775368B0D1FEA9433347761FC&dn=Fargo+S01E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257002, 1]
May-28 18:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Holby City S16E33 720p HDTV x264 FTP
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Holby City
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Holby City in the DB
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Holby City', u'Holby City']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Holby City
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Holby City
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Holby.City']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Holby City S16E33 720p HDTV x264 FTP', 16, '|33|', 0, 0, 'magnet:?xt=urn:btih:4E0D330677F47066D1B941560CC3E3D94C8DB570&dn=Holby+City+S16E33+720p+HDTV+x264+FTP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257003, 4]
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:9A4DB37C54DC406073AD62B70B24909B30D01FB9&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257003, 4]
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:237880929E6358CA4F562F2D76E3272FA06EB615&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257003, 1]
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 HDTV x264 2HD
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:4C5C60F4F1F8FFDB9ED11AE9E68C2BE946E1F587&dn=The+Boondocks+S04E06+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257003, 1]
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 720p HDTV x264 2HD
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 720p HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:BA7701F16C4EB4375701C31C4669B898CC7F63C4&dn=The+Boondocks+S04E06+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257004, 4]
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Lizard Lick Towing
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Lizard Lick Towing in the DB
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Lizard Lick Towing', u'Lizard Lick Towing']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Lizard Lick Towing
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Lizard Lick Towing
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Lizard.Lick.Towing']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Lizard Lick Towing S06E15 720p HDTV x264 DHD', 6, '|15|', 0, 0, 'magnet:?xt=urn:btih:9A4252131430AD7153A25C68344A87589E61EC5C&dn=Lizard+Lick+Towing+S06E15+720p+HDTV+x264+DHD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257004, 4]
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:E74FA4CB4E8416788F93821DA4D4725A2D8CEF5E&dn=WWE+Monday+Night+RAW+2014+05+26+720p+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257004, 4]
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:F5F1210DC1836810FB9AEE5A98F2F87CBBA44493&dn=WWE+Monday+Night+RAW+2014+05+26+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257004, 1]
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 HDTV x264 KILLERS
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 18:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:734F4FDD59C2EF30FB9E44FB9118CB5714DD8791&dn=The+Listener+S05E01+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257005, 1]
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 720p HDTV x264 KILLERS
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 720p HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:87115A3534197CB79E8086487EEF5F581C2F70BD&dn=The+Listener+S05E01+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257005, 4]
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:0F5775A8DF45CA9CFF42C3E6F151D3DFF1FDF082&dn=Rookie+Blue+S05E02+REPACK+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257005, 4]
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:A2038A49A0BD373AEB91948DCEFBC516F634B562&dn=Rookie+Blue+S05E02+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257006, 4]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 720p HDTV X264 DIMENSION
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 720p HDTV X264 DIMENSION', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:79EC9A95D13F17E2383AA7BBD57A4C3576F6BAC6&dn=Louie+S04E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257006, 4]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 720p HDTV X264 DIMENSION
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 720p HDTV X264 DIMENSION', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:75703900AFAB9B9947B7BFDCD8EB040F98018DFC&dn=Louie+S04E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257006, 4]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:E42DC2E867607E1608E8BBA6F58E0FDA016D0736&dn=Rookie+Blue+S05E02+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257006, 1]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 HDTV x264 LOL
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 HDTV x264 LOL', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:E2DB49D41FFC68577F23CD520B9CD5D71476551A&dn=Louie+S04E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257006, 1]
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 18:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 720p HDTV X264 DIMENSION', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:478332F210F5517186039CAA11B4D7DFCEB09A82&dn=MasterChef+US+S05E01+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257007, 4]
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 720p HDTV X264 DIMENSION', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:D7CEE1E0DE16767EE22FE16C099809EB57FA1D7E&dn=Friends+with+Better+Lives+S01E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257007, 4]
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 HDTV x264 LOL
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 HDTV x264 LOL', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:53B27792661929DD8F62965E268F0AD389926F3D&dn=Louie+S04E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257007, 1]
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Marvel&#039;s Avengers Assemble
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 18:03:27 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Marvel&#039;s Avengers Assemble in the DB
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Marvel&#039;s Avengers Assemble', u'Marvel&#039;s Avengers Assemble']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Marvel&#039;s Avengers Assemble
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Marvel&#039;s Avengers Assemble
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Marveland#039;s.Avengers.Assemble']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264', 1, '|26|', 0, 0, 'magnet:?xt=urn:btih:9B3892AD2F089104E9F2B147AE40A04BD9FCF4A9&dn=Marvel%26%23039%3Bs+Avengers+Assemble+S01E26+720p+WEB+DL+DD5+1+AAC2+0+H264&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257008, 32]
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 720p HDTV X264 DIMENSION
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 720p HDTV X264 DIMENSION', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:1CF0CDF7CCE3FE3D86163DB3E3BE29CEE2AA2379&dn=24+S09E05+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257008, 4]
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 HDTV x264 LOL
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 18:03:28 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 HDTV x264 LOL', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:2E04A26B78AD06F8F3BEA69F610C111F9F408C43&dn=24+S09E05+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257009, 1]
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 HDTV x264 LOL
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 HDTV x264 LOL', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:CA0DEE1C9979E9E5B0BEA1104B6516397DC4C662&dn=MasterChef+US+S05E01+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257009, 1]
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:29 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 HDTV x264 LOL', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:AA9596E89CBAF8C710FFCF6A4B42AF37FB31E867&dn=Friends+with+Better+Lives+S01E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257009, 1]
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 720p HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:C60402A581BB299A74275F6485A6DAC8E6553F22&dn=Nurse+Jackie+S06E08+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257010, 4]
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 HDTV x264 BATV
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:D0365B9B5C2F6587CED418F623E87AB6082CB43D&dn=Nurse+Jackie+S06E08+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257010, 1]
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Californication S07E08 720p HDTV x264 DAA
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Californication
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Californication in the DB
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Californication', u'Californication']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Californication
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Californication
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Californication']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Californication S07E08 720p HDTV x264 DAA', 7, '|8|', 0, 0, 'magnet:?xt=urn:btih:1757B1DA0682E7D13973F37DD080D2ED5FC82FE5&dn=Californication+S07E08+720p+HDTV+x264+DAA&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257010, 4]
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:2C09F4385E54FB1867E5037CB709A77674B103A8&dn=Craig+Ferguson+2014+05+23+Jon+Favreau+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257010, 4]
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:37B081381A7398AF5562C1E8A46ED74734AD316E&dn=Craig+Ferguson+2014+05+22+Tom+Lennon+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257010, 4]
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 18:03:30 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:31 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:DD7E9E597B3DF86013ABC6A257F444E1576E5313&dn=Robot+Chicken+S07E07+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257011, 1]
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 18:03:33 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 720p HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:D8E50009720EB56A49D107AA9CBD4067407C5A57&dn=Robot+Chicken+S07E07+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257014, 4]
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 720p HDTV x264 2HD
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 720p HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:CBF011EE02EF39CF77798F0E2080215A4FE15F94&dn=Continuum+S03E09+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257014, 4]
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 720p HDTV X264 DIMENSION', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:2F14F61DDFB3A2D32EF42655D68F0E879FC96C5C&dn=Mad+Men+S07E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257014, 4]
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 18:03:34 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:1B1E214521730E004DC6BA681DB33AD4E8B61787&dn=Devious+Maids+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257015, 4]
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 720p HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:913EF0F8FBC9D864A6BD1D088AAC5527FB446C27&dn=Penny+Dreadful+S01E03+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257015, 4]
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 720p HDTV X264 DIMENSION', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:609623A405C6797C5C21209EBC9217B763D3F252&dn=Crisis+S01E09+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257015, 4]
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 720p HDTV X264 DIMENSION
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:35 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 720p HDTV X264 DIMENSION', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:C4E70E3E50691EE1369D86CD6F63FD9B9E898F66&dn=Salem+S01E06+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257015, 4]
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 720p HDTV x264 IMMERSE
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 720p HDTV x264 IMMERSE', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:8C1580FDB4C9E333709DE30D517A340F91425BE1&dn=Turn+S01E08+720p+HDTV+x264+IMMERSE&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257016, 4]
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 720p HDTV X264 DIMENSION
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 720p HDTV X264 DIMENSION', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:0A2768D3D794787CC867D011DBF087430EA84DAD&dn=Believe+S01E10+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257016, 4]
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 HDTV x264 KILLERS
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 18:03:36 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:37 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:DC49C9BF95984A7A435FAD2FAD87F992188A03FC&dn=Devious+Maids+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257017, 1]
May-28 18:03:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 HDTV x264 LOL
May-28 18:03:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 18:03:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 18:03:40 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:41 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 HDTV x264 LOL', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:4AC134EB2E9701B952CA28566600D76F4ADE5AD9&dn=Mad+Men+S07E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257021, 1]
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 HDTV x264 LOL
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 HDTV x264 LOL', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:A10DE6AB58F6DB3C607E289C16E7987B876A3A2A&dn=Salem+S01E06+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257022, 1]
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:F87A438AF6035745F0FDBF39BED492C59ACE8A34&dn=Penny+Dreadful+S01E03+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257022, 1]
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 HDTV x264 LOL
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 18:03:42 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 HDTV x264 LOL', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:F13724FE5DC1DBBA311AC35F146BFF0D2552DBA4&dn=Crisis+S01E09+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257023, 1]
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 HDTV x264 LOL
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 HDTV x264 LOL', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:FA80D091D84C5CC056661FF56106287F0A9AFB53&dn=Believe+S01E10+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257023, 1]
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 HDTV x264 2HD
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:9AF306F95B3A6B7C65217851263AFAEFF64B7D50&dn=Continuum+S03E09+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257023, 1]
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 HDTV x264 ASAP
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 18:03:43 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 HDTV x264 ASAP', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:59E71AD1231A2E42B56F67C75664DA8D29337EBC&dn=Turn+S01E08+HDTV+x264+ASAP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257024, 1]
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:A61B7EB77E6CFBD228A9979C3B3205F34B5240AB&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257024, 4]
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:48EE6604E195B2F59A8383C775BB28D0C3C2F03A&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257024, 1]
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rugby Super Rugby
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rugby.Super.Rugby']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:305F8799ED8FEA2FB40249D42DEC3BDD25DAE7BB&dn=Rugby+Super+Rugby+2014+05+24+Force+vs+Lions+720p+AHDTV+x264+C4TV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257024, 4]
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 HDTV x264 KILLERS
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:A668266F4E4FF05C34A3518C7F64FA8B8E7F2AC7&dn=Orphan+Black+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257024, 1]
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:C09A6DF90B32845E5C4713F54E689A099249AD24&dn=Orphan+Black+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257024, 4]
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Survivor
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'survivor']
May-28 18:03:44 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'survivor']
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Survivor in the DB
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Survivor', u'Survivor']
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Survivor
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Survivor
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Survivor']
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS', 28, '|14|', 0, 0, 'magnet:?xt=urn:btih:70D220D74A0C8D90454CDCAA2E10F04FFB328992&dn=Survivor+S28E14+720p+WEB+DL+AAC2+0+H264+KiNGS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401257025, 32]
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM showrss
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking It 2014 S01E06 HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking It 2014 S01E06 720p HDTV x264 IMMERSE
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 720p HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside Amy Schumer S02E09 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Holby City S16E33 720p HDTV x264 FTP
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 720p HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 HDTV x264 BATV
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Californication S07E08 720p HDTV x264 DAA
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 720p HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 720p HDTV x264 IMMERSE
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 720p HDTV X264 DIMENSION
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 HDTV x264 LOL
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 HDTV x264 2HD
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 HDTV x264 ASAP
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 18:03:45 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Survivor S28E14 720p WEB DL AAC2 0 H264 KiNGS
May-28 18:03:45 INFO     SEARCHQUEUE-RSS-SEARCH :: No needed episodes found on the RSS feeds
May-28 19:02:55 DEBUG    SEARCH :: Starting new thread: SEARCH
May-28 19:02:55 DEBUG    SHOWUPDATER :: Starting new thread: SHOWUPDATER
May-28 19:02:55 DEBUG    SHOWUPDATER :: Checking update interval
May-28 19:02:55 DEBUG    FINDPROPERS :: Starting new thread: FINDPROPERS
May-28 19:02:55 DEBUG    FINDPROPERS :: Checking proper time
May-28 19:02:57 INFO     SEARCHQUEUE-RSS-SEARCH :: Changing all old missing episodes to status WANTED
May-28 19:02:57 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_episodes WHERE status = ? AND airdate < ? with args [1, 735381]
May-28 19:02:57 INFO     SEARCHQUEUE-RSS-SEARCH :: Beginning search for new episodes on RSS
May-28 19:02:57 INFO     SEARCHQUEUE-RSS-SEARCH :: Searching all providers for any needed episodes
May-28 19:02:57 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['ezrss']
May-28 19:02:57 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Trying EZRSS URL: https://www.ezrss.it/feed/
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Success with url: https://www.ezrss.it/feed/
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401260579, 'ezrss']
May-28 19:02:59 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing EZRSS cache and updating with new information
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM ezrss WHERE 1
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS.[eztv].torrent
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS from the torrent link
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS', 2, '|9|', 0, 0, 'http://re.zoink.it/EB8678ba59', 1401260579, 1]
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.720p.HDTV.X264-DIMENSION from the torrent link
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:02:59 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://re.zoink.it/0786782797', 1401260580, 4]
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Awkward.S04E07.HDTV.x264-2HD.[eztv].torrent
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Awkward.S04E07.HDTV.x264-2HD from the torrent link
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.x264-2HD
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.x264-2HD', 4, '|7|', 0, 0, 'http://re.zoink.it/7E86780eBE', 1401260580, 1]
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Riot.S01E02.HDTV.x264-BAJSKORV.[eztv].torrent
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Riot.S01E02.HDTV.x264-BAJSKORV from the torrent link
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Riot
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'riot']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Riot in the DB
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Riot', u'Riot']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Riot
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Riot
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Riot']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Riot.S01E02.HDTV.x264-BAJSKORV', 1, '|2|', 0, 0, 'http://re.zoink.it/7F86780aCC', 1401260580, 1]
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Night.Shift.S01E01.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Night.Shift.S01E01.HDTV.x264-LOL from the torrent link
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Night.Shift.S01E01.HDTV.x264-LOL', 1, '|1|', 0, 0, 'http://re.zoink.it/868678063E', 1401260580, 1]
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Fargo.S01E07.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Fargo.S01E07.HDTV.x264-LOL from the torrent link
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.HDTV.x264-LOL
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:00 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.HDTV.x264-LOL', 1, '|7|', 0, 0, 'http://re.zoink.it/578677d62F', 1401260581, 1]
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Playing.House.S01E06.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Playing.House.S01E06.HDTV.x264-LOL from the torrent link
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Playing.House.S01E06.HDTV.x264-LOL
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Playing House
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'playing house']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Playing House in the DB
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Playing House', u'Playing House']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Playing House
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Playing House
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Playing.House']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Playing.House.S01E06.HDTV.x264-LOL', 1, '|6|', 0, 0, 'http://re.zoink.it/2486768838', 1401260581, 1]
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F.[eztv].torrent
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F from the torrent link
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Anthony Bourdain Parts Unknown
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'anthony bourdain parts unknown']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Anthony Bourdain Parts Unknown in the DB
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Anthony Bourdain Parts Unknown', u'Anthony Bourdain Parts Unknown']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Anthony Bourdain Parts Unknown
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Anthony Bourdain Parts Unknown
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Anthony.Bourdain.Parts.Unknown']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F', 3, '|6|', 0, 0, 'http://re.zoink.it/E879ec89eEB', 1401260581, 1]
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Happy.Valley.S01E05.HDTV.x264-TLA.[eztv].torrent
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Happy.Valley.S01E05.HDTV.x264-TLA from the torrent link
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Happy Valley
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'happy valley']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Happy Valley in the DB
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Happy Valley', u'Happy Valley']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Happy Valley
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Happy Valley
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Happy.Valley']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Happy.Valley.S01E05.HDTV.x264-TLA', 1, '|5|', 0, 0, 'http://re.zoink.it/488675d3CD', 1401260581, 1]
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup from the torrent link
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup into a valid episode
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: History.of.The.World.In.Two.Hours.BDRip.x264-MVGroup
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup.[MVGroup.org].torrent
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup from the torrent link
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup into a valid episode
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Steve.Coogan.The.Inside.Story.x264.HDTV-MVGroup
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Jonah.From.Tonga.S01E03.HDTV.x264-RiVER.[eztv].torrent
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Jonah.From.Tonga.S01E03.HDTV.x264-RiVER from the torrent link
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Jonah From Tonga
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'jonah from tonga']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Jonah From Tonga in the DB
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Jonah From Tonga', u'Jonah From Tonga']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Jonah From Tonga
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jonah From Tonga
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jonah.From.Tonga']
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:01 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jonah.From.Tonga.S01E03.HDTV.x264-RiVER', 1, '|3|', 0, 0, 'http://re.zoink.it/7A8672f3CB', 1401260581, 1]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup', 1, '|6|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=NbXVq5lF6DqYPi4MqcO9XzWI%2F5I%3D', 1401260582, 2]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=EFRTNO4n%2BSjhqqyZJtyQsDM2VZ8%3D', 1401260582, 1]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=y6hsBryKUyTKN1R7Q9NFjUBf%2FiE%3D', 1401260582, 1]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS.[eztv].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS', 1, '||', 0, 0, 'http://re.zoink.it/236ec13378', 1401260582, 1]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.HDTV.x264-2HD.[eztv].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.HDTV.x264-2HD from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.HDTV.x264-2HD', 4, '|6|', 0, 0, 'http://re.zoink.it/41866ed9D2', 1401260582, 1]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL', 4, '|6|', 0, 0, 'http://re.zoink.it/EE866ed155', 1401260582, 1]
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Listener.S05E01.HDTV.x264-KILLERS.[eztv].torrent
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Listener.S05E01.HDTV.x264-KILLERS from the torrent link
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 19:03:02 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Listener.S05E01.HDTV.x264-KILLERS', 5, '|1|', 0, 0, 'http://piratebaytorrents.info/10238027/The_Listener_S05E01_HDTV_x264-KILLERS.10238027.TPB.torrent', 1401260583, 1]
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup from the torrent link
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=kDhIQ7kNBt%2BZJJqCJAcIPFT5mjM%3D', 1401260583, 1]
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup from the torrent link
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=2mmsjqyR2H8JVgtEs069pPwzyf0%3D', 1401260583, 1]
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup from the torrent link
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Great Crimes And Trials Collection
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Great.Crimes.And.Trials.Collection']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup', 1, '|1|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=wYa5cbm2s%2FE1opPJDOYH70u2iuY%3D', 1401260583, 1]
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup.[MVGroup.org].torrent
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup from the torrent link
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tims Vermeer
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'tims vermeer']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Tims Vermeer in the DB
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Tims Vermeer', u'Tims Vermeer']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Tims Vermeer
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tims Vermeer
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tims.Vermeer']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup', 1, '|5|', 0, 0, 'http://forums.mvgroup.org/tracker/get.php?id=%2FqqiDCvOhaNo2gfv6xflPeECBAk%3D', 1401260583, 2]
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Hit.the.Floor.S02E01.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Hit.the.Floor.S02E01.HDTV.x264-LOL from the torrent link
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Hit the Floor
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'hit the floor']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Hit the Floor in the DB
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Hit the Floor', u'Hit the Floor']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Hit the Floor
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Hit the Floor
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Hit.the.Floor']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Hit.the.Floor.S02E01.HDTV.x264-LOL', 2, '|1|', 0, 0, 'http://re.zoink.it/0386665731', 1401260583, 1]
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Rookie.Blue.S05E02.HDTV.x264-KILLERS.[eztv].torrent
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Rookie.Blue.S05E02.HDTV.x264-KILLERS from the torrent link
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:03 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie.Blue.S05E02.HDTV.x264-KILLERS', 5, '|2|', 0, 0, 'http://re.zoink.it/E48665992D', 1401260584, 1]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E08.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E08.HDTV.x264-LOL from the torrent link
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E08.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E08.HDTV.x264-LOL', 4, '|8|', 0, 0, 'http://piratebaytorrents.info/10235294/Louie_S04E08_HDTV_x264-LOL.10235294.TPB.torrent', 1401260584, 1]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV.[eztv].torrent
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV from the torrent link
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Michael J Fox Show
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the michael j fox show']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [269637]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [269637, 1, 18]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Michael J Fox Show
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Michael.J.Fox.Show']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV', 1, '|18|', 0, 0, 'http://re.zoink.it/048664761F', 1401260584, 1]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against Louie.S04E07.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name Louie.S04E07.HDTV.x264-LOL from the torrent link
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie.S04E07.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie.S04E07.HDTV.x264-LOL', 4, '|7|', 0, 0, 'http://re.zoink.it/53866474B2', 1401260584, 1]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.720p.HDTV.X264-DIMENSION.[eztv].torrent
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.720p.HDTV.X264-DIMENSION from the torrent link
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.720p.HDTV.X264-DIMENSION', 9, '|5|', 0, 0, 'http://re.zoink.it/1C866424F0', 1401260584, 4]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Comparing (.*?)\.?(\[.*]|\d+\.TPB)\.torrent$ against 24.S09E05.HDTV.x264-LOL.[eztv].torrent
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Extracted the name 24.S09E05.HDTV.x264-LOL from the torrent link
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24.S09E05.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO ezrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24.S09E05.HDTV.x264-LOL', 9, '|5|', 0, 0, 'http://re.zoink.it/2E86640c04', 1401260584, 1]
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM ezrss
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside.Amy.Schumer.S02E09.HDTV.x264-KILLERS
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.x264-2HD
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Riot.S01E02.HDTV.x264-BAJSKORV
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Night.Shift.S01E01.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Playing.House.S01E06.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Anthony.Bourdain.Parts.Unknown.S03E06.Mississippi.Delta.HDTV.x264-W4F
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Happy.Valley.S01E05.HDTV.x264-TLA
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jonah.From.Tonga.S01E03.HDTV.x264-RiVER
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.6of6.Extra.Extended.and.Alternate.Scenes.DVDRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.05of22.John.Dillinger.1992.TVRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.04of22.The.Hillside.Stranglers.1992.TVRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig.Ferguson.2014.05.26.Shailene.Woodley.HDTV.x264-CROOKS
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.HDTV.x264-2HD
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Boondocks.S04E06.UNCENSORED.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Listener.S05E01.HDTV.x264-KILLERS
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.03of22.Son.Of.Sam.1992.TVRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.02of22.The.Story.of.Al.Capone.1992.TVRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Great.Crimes.And.Trials.Collection.1.01of22.The.Lindbergh.Baby.Kidnap.1992.TVRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tims.Vermeer.5of6.Extra.Toronto.Film.Festival.DVDRip.x264-MVGroup
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Hit.the.Floor.S02E01.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie.Blue.S05E02.HDTV.x264-KILLERS
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E08.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The.Michael.J.Fox.Show.S01E18.Biking.PDTV.x264-FiHTV
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie.S04E07.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.720p.HDTV.X264-DIMENSION
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24.S09E05.HDTV.x264-LOL
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['publichd']
May-28 19:03:04 DEBUG    SEARCHQUEUE-RSS-SEARCH :: PublicHD cache update URL: http://publichd.se/rss.php
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401260586, 'publichd']
May-28 19:03:06 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing PublicHD cache and updating with new information
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM publichd WHERE 1
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA 5.1-HighCode
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Saving.Mr.Banks.2013.BDRip.1080p.x264.DTS-HD.MA']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA 5.1-HighCode', 1, '|5|', 0, 0, 'http://publichd.se/download.php?id=d60428bda76fc8fec0aaecd89bd58a7a9682d1e0&f=Saving-Mr.-Banks-2013-BDRip-1080p-x264-DTS-HD-MA-5.1-HighCode', 1401260586, 32768]
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ["Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD", 1, '|8|', 0, 0, "http://publichd.se/download.php?id=98a8e3e877a1af58fde6c30d0e8b630507c406cd&f=Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]", 1401260586, 64]
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:06 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ["Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD", 1, '|8|', 0, 0, "http://publichd.se/download.php?id=59aa6adcd49086ca9991673a9509eb3cde687b88&f=Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]", 1401260587, 32]
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=164c0ae8a477df747c2eb90b8a68a09fb16cff85&f=Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]', 1401260587, 32]
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia and me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mia & Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mia & me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia and Me in the DB
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia and Me', u'Mia and Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mia & Me in the DB
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mia & Me', u'Mia & Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mia & Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mia and Me
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mia.and.Me']
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:07 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=af812235a8e6f9497c2cbdcd4f10a07e7c1e9aa3&f=Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD-[PublicHD]', 1401260587, 64]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Freakshow.S02E07.720p.HDTV.x264-KILLERS
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Freakshow
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'freakshow']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'freakshow']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Freakshow in the DB
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Freakshow', u'Freakshow']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Freakshow
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Freakshow
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Freakshow']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Freakshow.S02E07.720p.HDTV.x264-KILLERS', 2, '|7|', 0, 0, 'http://publichd.se/download.php?id=fcaadfa5a8ab8c04d5763a6860b7bed1f2ac1fc9&f=Freakshow.S02E07.720p.HDTV.x264-KILLERS-[PublicHD]', 1401260588, 4]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS', 2, '|9|', 0, 0, 'http://publichd.se/download.php?id=5c6064334e920a0d9bc424d6610c91c3995cc804&f=Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS-[PublicHD]', 1401260588, 4]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Tosh.0.S06E15.720p.HDTV.x264-KILLERS
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Tosh 0
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'tosh 0']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [97731, 6, 15]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [97731]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [97731, 6, 15]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Tosh 0
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Tosh.0']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Tosh.0.S06E15.720p.HDTV.x264-KILLERS', 6, '|15|', 0, 0, 'http://publichd.se/download.php?id=96522c4f2987d63f790097465d6bc52f14403ba6&f=Tosh.0.S06E15.720p.HDTV.x264-KILLERS-[PublicHD]', 1401260588, 4]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Deadliest Catch
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Deadliest Catch in the DB
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Deadliest Catch', u'Deadliest Catch']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Deadliest Catch
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Deadliest Catch
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Deadliest.Catch']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]', 10, '|6|', 0, 0, 'http://publichd.se/download.php?id=f4df57bff8dd8f50f735df022c48a5d7f9363ff7&f=Deadliest-Catch-S10E06-Falling-Down-HDTV-x264-FUM[ettv]', 1401260588, 1]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename Until Death 2007 BluRay 1080p DTS x264-CHD into a valid episode
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: Until Death 2007 BluRay 1080p DTS x264-CHD
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 19:03:08 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV XviD-FUM[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=414ebb29b6385d075506a2edab7f60893443b6a5&f=The-Night-Shift-S01E01-HDTV-XviD-FUM[ettv]', 1401260589, 1]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV XviD-FUM[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=bf304f51f39164d6fb4c5a57e7b45eee9c9b8552&f=Fargo-S01E07-HDTV-XviD-FUM[ettv]', 1401260589, 1]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.HDTV.XviD-AFG', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=16c559d48f2f468d52266cd0510800378f365a2f&f=Faking.It.2014.S01E06.HDTV.XviD-AFG', 1401260589, 1]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward.S04E07.HDTV.XviD-AFG
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward.S04E07.HDTV.XviD-AFG', 4, '|7|', 0, 0, 'http://publichd.se/download.php?id=88550e1085faab13903fa8eafd98ca3435ff0eb0&f=Awkward.S04E07.HDTV.XviD-AFG', 1401260589, 1]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Black Sheep 1996 BDRip 720p x264 AAC-5
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Black.Sheep.1996.BDRip.720p.x264.AAC-5']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode', 1, '|0|', 0, 0, 'http://publichd.se/download.php?id=e2a5fc36424ca42b9e5ed1e2fb45c9cd3714d2d1&f=Black-Sheep-1996-BDRip-720p-x264-AAC-5.0-multisub-HighCode', 1401260589, 32768]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Night Shift
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the night shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Night Shift in the DB
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Night Shift', u'The Night Shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Night Shift
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Night Shift
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Night.Shift']
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:09 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Night Shift S01E01 HDTV x264-LOL[ettv]', 1, '|1|', 0, 0, 'http://publichd.se/download.php?id=84454511ff6daa28b347d982269a88b5ea6c4959&f=The-Night-Shift-S01E01-HDTV-x264-LOL[ettv]', 1401260589, 1]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264-LOL[ettv]', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=8f8e8bce5eee653ed5e72cfe077c2ff4dd675d27&f=Fargo-S01E07-HDTV-x264-LOL[ettv]', 1401260590, 1]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE', 1, '|6|', 0, 0, 'http://publichd.se/download.php?id=6e44b4afe13b6ce8239bcc0e71b8b97fed2e7220&f=Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE-[PublicHD]', 1401260590, 4]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO publichd (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo.S01E07.720p.HDTV.X264-DIMENSION', 1, '|7|', 0, 0, 'http://publichd.se/download.php?id=eb825cc31f2d9b73428c598bd98611e72aeff40d&f=Fargo.S01E07.720p.HDTV.X264-DIMENSION-[PublicHD]', 1401260590, 4]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to parse the filename The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode into a valid episode
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Giving up because I'm unable to parse this name: The Siege 1998 BDRip 1080p x264 DTS multisub-HighCode
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM publichd
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Saving Mr. Banks 2013 BDRip 1080p x264 DTS-HD MA 5.1-HighCode
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E08.Ziggo's.Day.Off.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E08.Ziggo's.Day.Off.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E07.Hope.in.Pieces.720p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mia.and.Me.S01E07.Hope.in.Pieces.1080p.WEB-DL.AAC2.0.H.264-CtrlHD
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Freakshow.S02E07.720p.HDTV.x264-KILLERS
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside.Amy.Schumer.S02E09.720p.HDTV.x264-KILLERS
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Tosh.0.S06E15.720p.HDTV.x264-KILLERS
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Deadliest Catch S10E06 Falling Down HDTV x264-FUM[ettv]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV XviD-FUM[ettv]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV XviD-FUM[ettv]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.HDTV.XviD-AFG
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward.S04E07.HDTV.XviD-AFG
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Black Sheep 1996 BDRip 720p x264 AAC-5.0 multisub HighCode
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Night Shift S01E01 HDTV x264-LOL[ettv]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264-LOL[ettv]
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking.It.2014.S01E06.720p.HDTV.x264-IMMERSE
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo.S01E07.720p.HDTV.X264-DIMENSION
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT time FROM lastUpdate WHERE provider = ? with args ['showrss']
May-28 19:03:10 DEBUG    SEARCHQUEUE-RSS-SEARCH :: ShowRSS cache update URL: http://showrss.info/feeds/all.rss
May-28 19:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: UPDATE lastUpdate SET time = ? WHERE provider = ? with args [1401260592, 'showrss']
May-28 19:03:12 INFO     SEARCHQUEUE-RSS-SEARCH :: Clearing ShowRSS cache and updating with new information
May-28 19:03:12 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: DELETE FROM showrss WHERE 1
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Deadliest Catch S10E06 Falling Down 720p HDTV x264 TERRA
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Deadliest Catch
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'deadliest catch']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Deadliest Catch in the DB
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Deadliest Catch', u'Deadliest Catch']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Deadliest Catch
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Deadliest Catch
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Deadliest.Catch']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Deadliest Catch S10E06 Falling Down 720p HDTV x264 TERRA', 10, '|6|', 0, 0, 'magnet:?xt=urn:btih:77F2AAF105C1CAE246FF617CD691E122CB92F43B&dn=Deadliest+Catch+S10E06+Falling+Down+720p+HDTV+x264+TERRA&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260593, 4]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking It 2014 S01E06 HDTV x264 2HD
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking It 2014 S01E06 HDTV x264 2HD', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:6F008B3350CB9FFC97417209B38C98D8F8B588DC&dn=Faking+It+2014+S01E06+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260593, 1]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Faking It 2014 S01E06 720p HDTV x264 IMMERSE
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Faking It 2014
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'faking it 2014']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [277169]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [277169, 1, 6]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Faking It 2014
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Faking.It.2014']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Faking It 2014 S01E06 720p HDTV x264 IMMERSE', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:6E44B4AFE13B6CE8239BCC0E71B8B97FED2E7220&dn=Faking+It+2014+S01E06+720p+HDTV+x264+IMMERSE&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260593, 4]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 720p HDTV x264 2HD
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 720p HDTV x264 2HD', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:385C2BAFCDFDFF102FE3839195089AD74A3326F0&dn=Awkward+S04E07+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260593, 4]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Inside Amy Schumer S02E09 HDTV x264 KILLERS
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Inside Amy Schumer
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'inside amy schumer']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Inside Amy Schumer in the DB
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Inside Amy Schumer', u'Inside Amy Schumer']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Inside Amy Schumer
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Inside Amy Schumer
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Inside.Amy.Schumer']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Inside Amy Schumer S02E09 HDTV x264 KILLERS', 2, '|9|', 0, 0, 'magnet:?xt=urn:btih:EB59234B43F150321685587012AEFD5DB74323B9&dn=Inside+Amy+Schumer+S02E09+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260593, 1]
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Awkward S04E07 HDTV x264 2HD
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Awkward
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:13 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'awkward']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Awkward in the DB
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Awkward', u'Awkward']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Awkward
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Awkward
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Awkward']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Awkward S04E07 HDTV x264 2HD', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:7EBEECA9D840EFBA356E6AD5CC1882C55E3B8B08&dn=Awkward+S04E07+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260594, 1]
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 720p HDTV X264 DIMENSION
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 720p HDTV X264 DIMENSION', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:079748D09F17B3DC02A6BEE2A8D9C62B1AC3C149&dn=Fargo+S01E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260594, 4]
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Fargo S01E07 HDTV x264 LOL
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Fargo
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Fargo in the DB
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Fargo', u'Fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Fargo
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Fargo
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Fargo']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Fargo S01E07 HDTV x264 LOL', 1, '|7|', 0, 0, 'magnet:?xt=urn:btih:572F3EBDA2745BB775368B0D1FEA9433347761FC&dn=Fargo+S01E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260594, 1]
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Holby City S16E33 720p HDTV x264 FTP
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Holby City
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'holby city']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Holby City in the DB
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Holby City', u'Holby City']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Holby City
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Holby City
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Holby.City']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Holby City S16E33 720p HDTV x264 FTP', 16, '|33|', 0, 0, 'magnet:?xt=urn:btih:4E0D330677F47066D1B941560CC3E3D94C8DB570&dn=Holby+City+S16E33+720p+HDTV+x264+FTP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260594, 4]
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:9A4DB37C54DC406073AD62B70B24909B30D01FB9&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260594, 4]
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:14 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:237880929E6358CA4F562F2D76E3272FA06EB615&dn=Craig+Ferguson+2014+05+26+Shailene+Woodley+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260594, 1]
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 HDTV x264 2HD
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:4C5C60F4F1F8FFDB9ED11AE9E68C2BE946E1F587&dn=The+Boondocks+S04E06+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260595, 1]
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Boondocks S04E06 720p HDTV x264 2HD
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Boondocks
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Boondocks in the DB
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Boondocks', u'The Boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Boondocks
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Boondocks
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Boondocks']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Boondocks S04E06 720p HDTV x264 2HD', 4, '|6|', 0, 0, 'magnet:?xt=urn:btih:BA7701F16C4EB4375701C31C4669B898CC7F63C4&dn=The+Boondocks+S04E06+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260595, 4]
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Lizard Lick Towing
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'lizard lick towing']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Lizard Lick Towing in the DB
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Lizard Lick Towing', u'Lizard Lick Towing']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Lizard Lick Towing
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Lizard Lick Towing
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Lizard.Lick.Towing']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Lizard Lick Towing S06E15 720p HDTV x264 DHD', 6, '|15|', 0, 0, 'magnet:?xt=urn:btih:9A4252131430AD7153A25C68344A87589E61EC5C&dn=Lizard+Lick+Towing+S06E15+720p+HDTV+x264+DHD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260595, 4]
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:E74FA4CB4E8416788F93821DA4D4725A2D8CEF5E&dn=WWE+Monday+Night+RAW+2014+05+26+720p+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260595, 4]
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of WWE Monday Night RAW
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'WWE.Monday.Night.RAW']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['WWE Monday Night RAW 2014 05 26 HDTV x264 KYR', 1, '||', 0, 0, 'magnet:?xt=urn:btih:F5F1210DC1836810FB9AEE5A98F2F87CBBA44493&dn=WWE+Monday+Night+RAW+2014+05+26+HDTV+x264+KYR&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260595, 1]
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 HDTV x264 KILLERS
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 19:03:15 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:734F4FDD59C2EF30FB9E44FB9118CB5714DD8791&dn=The+Listener+S05E01+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260596, 1]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: The Listener S05E01 720p HDTV x264 KILLERS
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on The Listener
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'the listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up The Listener in the DB
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'The Listener', u'The Listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for The Listener
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of The Listener
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'The.Listener']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['The Listener S05E01 720p HDTV x264 KILLERS', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:87115A3534197CB79E8086487EEF5F581C2F70BD&dn=The+Listener+S05E01+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260596, 4]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:0F5775A8DF45CA9CFF42C3E6F151D3DFF1FDF082&dn=Rookie+Blue+S05E02+REPACK+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260596, 4]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 720p HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:A2038A49A0BD373AEB91948DCEFBC516F634B562&dn=Rookie+Blue+S05E02+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260596, 4]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 720p HDTV X264 DIMENSION
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 720p HDTV X264 DIMENSION', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:79EC9A95D13F17E2383AA7BBD57A4C3576F6BAC6&dn=Louie+S04E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260596, 4]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 720p HDTV X264 DIMENSION
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:16 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 720p HDTV X264 DIMENSION', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:75703900AFAB9B9947B7BFDCD8EB040F98018DFC&dn=Louie+S04E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260596, 4]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Rookie Blue
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'rookie blue']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Rookie Blue in the DB
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Rookie Blue', u'Rookie Blue']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Rookie Blue
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rookie Blue
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rookie.Blue']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rookie Blue S05E02 HDTV x264 KILLERS', 5, '|2|', 0, 0, 'magnet:?xt=urn:btih:E42DC2E867607E1608E8BBA6F58E0FDA016D0736&dn=Rookie+Blue+S05E02+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260597, 1]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E08 HDTV x264 LOL
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 8]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E08 HDTV x264 LOL', 4, '|8|', 0, 0, 'magnet:?xt=urn:btih:E2DB49D41FFC68577F23CD520B9CD5D71476551A&dn=Louie+S04E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260597, 1]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 720p HDTV X264 DIMENSION', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:478332F210F5517186039CAA11B4D7DFCEB09A82&dn=MasterChef+US+S05E01+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260597, 4]
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:17 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 720p HDTV X264 DIMENSION', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:D7CEE1E0DE16767EE22FE16C099809EB57FA1D7E&dn=Friends+with+Better+Lives+S01E08+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260597, 4]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Louie S04E07 HDTV x264 LOL
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Louie
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'louie']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT season, episode FROM scene_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT last_refreshed FROM xem_refresh WHERE tvdb_id = ? with args [155201]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT season, episode FROM xem_num WHERE tvdb_id = ? and scene_season = ? and scene_episode = ? with args [155201, 4, 7]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Louie
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Louie']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Louie S04E07 HDTV x264 LOL', 4, '|7|', 0, 0, 'magnet:?xt=urn:btih:53B27792661929DD8F62965E268F0AD389926F3D&dn=Louie+S04E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260598, 1]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Marvel&#039;s Avengers Assemble
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'marvel&#039;s avengers assemble']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Marvel&#039;s Avengers Assemble in the DB
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Marvel&#039;s Avengers Assemble', u'Marvel&#039;s Avengers Assemble']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Marvel&#039;s Avengers Assemble
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Marvel&#039;s Avengers Assemble
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Marveland#039;s.Avengers.Assemble']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264', 1, '|26|', 0, 0, 'magnet:?xt=urn:btih:9B3892AD2F089104E9F2B147AE40A04BD9FCF4A9&dn=Marvel%26%23039%3Bs+Avengers+Assemble+S01E26+720p+WEB+DL+DD5+1+AAC2+0+H264&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260598, 32]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 720p HDTV X264 DIMENSION
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 720p HDTV X264 DIMENSION', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:1CF0CDF7CCE3FE3D86163DB3E3BE29CEE2AA2379&dn=24+S09E05+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260598, 4]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: 24 S09E05 HDTV x264 LOL
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on 24
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up 24 in the DB
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'24', u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for 24
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of 24
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'24']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['24 S09E05 HDTV x264 LOL', 9, '|5|', 0, 0, 'magnet:?xt=urn:btih:2E04A26B78AD06F8F3BEA69F610C111F9F408C43&dn=24+S09E05+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260598, 1]
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: MasterChef US S05E01 HDTV x264 LOL
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef (US)
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 19:03:18 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef (us)']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on MasterChef US
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'masterchef us']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef (US) in the DB
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef (US)', u'MasterChef (US)']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef (US)
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up MasterChef US in the DB
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'MasterChef US', u'MasterChef US']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for MasterChef US
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of MasterChef US
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'MasterChef.US']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['MasterChef US S05E01 HDTV x264 LOL', 5, '|1|', 0, 0, 'magnet:?xt=urn:btih:CA0DEE1C9979E9E5B0BEA1104B6516397DC4C662&dn=MasterChef+US+S05E01+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260599, 1]
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Friends with Better Lives
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'friends with better lives']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Friends with Better Lives in the DB
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Friends with Better Lives', u'Friends with Better Lives']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Friends with Better Lives
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Friends with Better Lives
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Friends.with.Better.Lives']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Friends with Better Lives S01E08 HDTV x264 LOL', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:AA9596E89CBAF8C710FFCF6A4B42AF37FB31E867&dn=Friends+with+Better+Lives+S01E08+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260599, 1]
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 720p HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:C60402A581BB299A74275F6485A6DAC8E6553F22&dn=Nurse+Jackie+S06E08+720p+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260599, 4]
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Nurse Jackie S06E08 HDTV x264 BATV
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Nurse Jackie
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 19:03:19 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'nurse jackie']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Nurse Jackie in the DB
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Nurse Jackie', u'Nurse Jackie']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Nurse Jackie
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Nurse Jackie
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Nurse.Jackie']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Nurse Jackie S06E08 HDTV x264 BATV', 6, '|8|', 0, 0, 'magnet:?xt=urn:btih:D0365B9B5C2F6587CED418F623E87AB6082CB43D&dn=Nurse+Jackie+S06E08+HDTV+x264+BATV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260600, 1]
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Californication S07E08 720p HDTV x264 DAA
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Californication
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'californication']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Californication in the DB
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Californication', u'Californication']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Californication
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Californication
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Californication']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Californication S07E08 720p HDTV x264 DAA', 7, '|8|', 0, 0, 'magnet:?xt=urn:btih:1757B1DA0682E7D13973F37DD080D2ED5FC82FE5&dn=Californication+S07E08+720p+HDTV+x264+DAA&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260600, 4]
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:2C09F4385E54FB1867E5037CB709A77674B103A8&dn=Craig+Ferguson+2014+05+23+Jon+Favreau+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260600, 4]
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Craig Ferguson
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Craig.Ferguson']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:37B081381A7398AF5562C1E8A46ED74734AD316E&dn=Craig+Ferguson+2014+05+22+Tom+Lennon+720p+HDTV+x264+BAJSKORV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260600, 4]
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:DD7E9E597B3DF86013ABC6A257F444E1576E5313&dn=Robot+Chicken+S07E07+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260600, 1]
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Robot Chicken
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 19:03:20 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'robot chicken']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Robot Chicken in the DB
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Robot Chicken', u'Robot Chicken']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Robot Chicken
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Robot Chicken
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Robot.Chicken']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Robot Chicken S07E07 720p HDTV x264 KILLERS', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:D8E50009720EB56A49D107AA9CBD4067407C5A57&dn=Robot+Chicken+S07E07+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260601, 4]
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 720p HDTV x264 2HD
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 720p HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:CBF011EE02EF39CF77798F0E2080215A4FE15F94&dn=Continuum+S03E09+720p+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260601, 4]
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 720p HDTV X264 DIMENSION', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:2F14F61DDFB3A2D32EF42655D68F0E879FC96C5C&dn=Mad+Men+S07E07+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260601, 4]
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:1B1E214521730E004DC6BA681DB33AD4E8B61787&dn=Devious+Maids+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260601, 4]
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 19:03:21 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 720p HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:913EF0F8FBC9D864A6BD1D088AAC5527FB446C27&dn=Penny+Dreadful+S01E03+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260602, 4]
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 720p HDTV X264 DIMENSION', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:609623A405C6797C5C21209EBC9217B763D3F252&dn=Crisis+S01E09+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260602, 4]
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 720p HDTV X264 DIMENSION
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 720p HDTV X264 DIMENSION', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:C4E70E3E50691EE1369D86CD6F63FD9B9E898F66&dn=Salem+S01E06+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260602, 4]
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 720p HDTV x264 IMMERSE
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 720p HDTV x264 IMMERSE', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:8C1580FDB4C9E333709DE30D517A340F91425BE1&dn=Turn+S01E08+720p+HDTV+x264+IMMERSE&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260602, 4]
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 720p HDTV X264 DIMENSION
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 19:03:22 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 720p HDTV X264 DIMENSION', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:0A2768D3D794787CC867D011DBF087430EA84DAD&dn=Believe+S01E10+720p+HDTV+X264+DIMENSION&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260603, 4]
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Devious Maids S02E06 HDTV x264 KILLERS
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Devious Maids
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'devious maids']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Devious Maids in the DB
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Devious Maids', u'Devious Maids']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Devious Maids
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Devious Maids
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Devious.Maids']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Devious Maids S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:DC49C9BF95984A7A435FAD2FAD87F992188A03FC&dn=Devious+Maids+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260603, 1]
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Mad Men S07E07 HDTV x264 LOL
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Mad Men
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'mad men']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Mad Men in the DB
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Mad Men', u'Mad Men']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Mad Men
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Mad Men
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Mad.Men']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Mad Men S07E07 HDTV x264 LOL', 7, '|7|', 0, 0, 'magnet:?xt=urn:btih:4AC134EB2E9701B952CA28566600D76F4ADE5AD9&dn=Mad+Men+S07E07+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260603, 1]
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Salem S01E06 HDTV x264 LOL
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Salem
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'salem']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Salem in the DB
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Salem', u'Salem']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Salem
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Salem
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Salem']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Salem S01E06 HDTV x264 LOL', 1, '|6|', 0, 0, 'magnet:?xt=urn:btih:A10DE6AB58F6DB3C607E289C16E7987B876A3A2A&dn=Salem+S01E06+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260603, 1]
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Penny Dreadful
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 19:03:23 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'penny dreadful']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Penny Dreadful in the DB
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Penny Dreadful', u'Penny Dreadful']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Penny Dreadful
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Penny Dreadful
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Penny.Dreadful']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Penny Dreadful S01E03 HDTV x264 KILLERS', 1, '|3|', 0, 0, 'magnet:?xt=urn:btih:F87A438AF6035745F0FDBF39BED492C59ACE8A34&dn=Penny+Dreadful+S01E03+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260604, 1]
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Crisis S01E09 HDTV x264 LOL
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Crisis
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'crisis']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Crisis in the DB
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Crisis', u'Crisis']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Crisis
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Crisis
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Crisis']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Crisis S01E09 HDTV x264 LOL', 1, '|9|', 0, 0, 'magnet:?xt=urn:btih:F13724FE5DC1DBBA311AC35F146BFF0D2552DBA4&dn=Crisis+S01E09+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260604, 1]
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Believe S01E10 HDTV x264 LOL
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Believe
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'believe']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Believe in the DB
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Believe', u'Believe']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Believe
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Believe
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Believe']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Believe S01E10 HDTV x264 LOL', 1, '|10|', 0, 0, 'magnet:?xt=urn:btih:FA80D091D84C5CC056661FF56106287F0A9AFB53&dn=Believe+S01E10+HDTV+x264+LOL&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260604, 1]
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Continuum S03E09 HDTV x264 2HD
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Continuum
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'continuum']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Continuum in the DB
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Continuum', u'Continuum']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Continuum
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Continuum
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Continuum']
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:24 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Continuum S03E09 HDTV x264 2HD', 3, '|9|', 0, 0, 'magnet:?xt=urn:btih:9AF306F95B3A6B7C65217851263AFAEFF64B7D50&dn=Continuum+S03E09+HDTV+x264+2HD&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260604, 1]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Turn S01E08 HDTV x264 ASAP
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Turn
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'turn']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Turn in the DB
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Turn', u'Turn']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Turn
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Turn
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Turn']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Turn S01E08 HDTV x264 ASAP', 1, '|8|', 0, 0, 'magnet:?xt=urn:btih:59E71AD1231A2E42B56F67C75664DA8D29337EBC&dn=Turn+S01E08+HDTV+x264+ASAP&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260605, 1]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:A61B7EB77E6CFBD228A9979C3B3205F34B5240AB&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+720p+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260605, 4]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Jimmy Fallon
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Jimmy.Fallon']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS', 1, '||', 0, 0, 'magnet:?xt=urn:btih:48EE6604E195B2F59A8383C775BB28D0C3C2F03A&dn=Jimmy+Fallon+2014+05+23+Seth+MacFarlane+HDTV+x264+CROOKS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260605, 1]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Rugby Super Rugby
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Rugby.Super.Rugby']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV', 1, '||', 0, 0, 'magnet:?xt=urn:btih:305F8799ED8FEA2FB40249D42DEC3BDD25DAE7BB&dn=Rugby+Super+Rugby+2014+05+24+Force+vs+Lions+720p+AHDTV+x264+C4TV&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260605, 4]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:A668266F4E4FF05C34A3518C7F64FA8B8E7F2AC7&dn=Orphan+Black+S02E06+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260605, 1]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Adding item from RSS to cache: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking scene exceptions for a match on Orphan Black
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT tvdb_id FROM scene_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT show_name, tvdb_id FROM scene_exceptions
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT tvdb_id FROM custom_exceptions WHERE LOWER(show_name) = ? with args [u'orphan black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT show_name, tvdb_id FROM custom_exceptions
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Looking up Orphan Black in the DB
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: sickbeard.db: SELECT * FROM tv_shows WHERE show_name LIKE ? OR tvr_name LIKE ? with args [u'Orphan Black', u'Orphan Black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Unable to match a record in the DB for Orphan Black
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Checking the cache to see if we already know the tvdb id of Orphan Black
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM scene_names WHERE name = ? with args [u'Orphan.Black']
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Cache lookup found 0, using that
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: INSERT INTO showrss (name, season, episodes, tvrid, tvdbid, url, time, quality) VALUES (?,?,?,?,?,?,?,?) with args ['Orphan Black S02E06 720p HDTV x264 KILLERS', 2, '|6|', 0, 0, 'magnet:?xt=urn:btih:C09A6DF90B32845E5C4713F54E689A099249AD24&dn=Orphan+Black+S02E06+720p+HDTV+x264+KILLERS&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.istole.it:80&tr=http://tracker.istole.it&tr=http://fr33dom.h33t.com:3310/announce', 1401260605, 4]
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: cache.db: SELECT * FROM showrss
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Deadliest Catch S10E06 Falling Down 720p HDTV x264 TERRA
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking It 2014 S01E06 HDTV x264 2HD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Faking It 2014 S01E06 720p HDTV x264 IMMERSE
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 720p HDTV x264 2HD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Inside Amy Schumer S02E09 HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Awkward S04E07 HDTV x264 2HD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Fargo S01E07 HDTV x264 LOL
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Holby City S16E33 720p HDTV x264 FTP
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley 720p HDTV x264 CROOKS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 26 Shailene Woodley HDTV x264 CROOKS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 HDTV x264 2HD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Boondocks S04E06 720p HDTV x264 2HD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Lizard Lick Towing S06E15 720p HDTV x264 DHD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 720p HDTV x264 KYR
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: WWE Monday Night RAW 2014 05 26 HDTV x264 KYR
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: The Listener S05E01 720p HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 REPACK 720p HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 720p HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rookie Blue S05E02 HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E08 HDTV x264 LOL
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Louie S04E07 HDTV x264 LOL
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Marvel&#039;s Avengers Assemble S01E26 720p WEB DL DD5 1 AAC2 0 H264
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: 24 S09E05 HDTV x264 LOL
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: MasterChef US S05E01 HDTV x264 LOL
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Friends with Better Lives S01E08 HDTV x264 LOL
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 720p HDTV x264 BATV
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Nurse Jackie S06E08 HDTV x264 BATV
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Californication S07E08 720p HDTV x264 DAA
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 23 Jon Favreau 720p HDTV x264 BAJSKORV
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Craig Ferguson 2014 05 22 Tom Lennon 720p HDTV x264 BAJSKORV
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Robot Chicken S07E07 720p HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 720p HDTV x264 2HD
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 720p HDTV X264 DIMENSION
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 720p HDTV x264 KILLERS
May-28 19:03:25 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 720p HDTV x264 KILLERS
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 720p HDTV X264 DIMENSION
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 720p HDTV X264 DIMENSION
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 720p HDTV x264 IMMERSE
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 720p HDTV X264 DIMENSION
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Devious Maids S02E06 HDTV x264 KILLERS
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Mad Men S07E07 HDTV x264 LOL
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Salem S01E06 HDTV x264 LOL
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Penny Dreadful S01E03 HDTV x264 KILLERS
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Crisis S01E09 HDTV x264 LOL
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Believe S01E10 HDTV x264 LOL
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Continuum S03E09 HDTV x264 2HD
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Turn S01E08 HDTV x264 ASAP
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane 720p HDTV x264 CROOKS
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Jimmy Fallon 2014 05 23 Seth MacFarlane HDTV x264 CROOKS
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Rugby Super Rugby 2014 05 24 Force vs Lions 720p AHDTV x264 C4TV
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 HDTV x264 KILLERS
May-28 19:03:26 DEBUG    SEARCHQUEUE-RSS-SEARCH :: Using cached parse result for: Orphan Black S02E06 720p HDTV x264 KILLERS
May-28 19:03:26 INFO     SEARCHQUEUE-RSS-SEARCH :: No needed episodes found on the RSS feeds
May-28 19:26:31 DEBUG    MAIN :: importing downloader
May-28 19:26:31 INFO     MAIN :: libtorrent is NOT available
May-28 19:26:31 INFO     MAIN :: Checking database structure...
May-28 19:26:31 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
May-28 19:26:31 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Tvr Id database upgrade
May-28 19:26:31 DEBUG    MAIN :: AddTvrId upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Tvr Name database upgrade
May-28 19:26:31 DEBUG    MAIN :: AddTvrName upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Airdate Index database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('idx_tv_episodes_showid_airdate',)
May-28 19:26:31 DEBUG    MAIN :: AddAirdateIndex upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Numeric Providers database upgrade
May-28 19:26:31 DEBUG    MAIN :: NumericProviders upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking New Quality Settings database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
May-28 19:26:31 DEBUG    MAIN :: NewQualitySettings upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Drop Old History Table database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: DropOldHistoryTable upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Upgrade History For Generic Providers database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: UpgradeHistoryForGenericProviders upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Air By Date Option database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: AddAirByDateOption upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Change Sab Config From Ip To Host database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: ChangeSabConfigFromIpToHost upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Fix Sab Host database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: FixSabHostURL upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Lang database upgrade
May-28 19:26:31 DEBUG    MAIN :: AddLang upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Populate Root Dirs database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: PopulateRootDirs upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Set Nzb Torrent Settings database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: SetNzbTorrentSettings upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Fix Air By Date Setting database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: FixAirByDateSetting upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: AddSizeAndSceneNameFields upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: RenameSeasonFolders upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:26:31 DEBUG    MAIN :: Add1080pAndRawHDQualities upgrade not required
May-28 19:26:31 INFO     MAIN :: Checking database structure...
May-28 19:26:31 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 19:26:31 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
May-28 19:26:31 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
May-28 19:26:31 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
May-28 19:26:31 DEBUG    MAIN :: AddSceneExceptions upgrade not required
May-28 19:26:31 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
May-28 19:26:31 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
May-28 19:26:31 DEBUG    MAIN :: AddSceneNameCache upgrade not required
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
May-28 19:26:31 INFO     MAIN :: No duplicate show, check passed
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
May-28 19:26:31 INFO     MAIN :: No duplicate episode, check passed
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
May-28 19:26:31 INFO     MAIN :: No orphan episode, check passed
May-28 19:26:31 DEBUG    MAIN :: config_version -> 3
May-28 19:26:31 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /root/.xbmc/addons/service.downloadmanager.InternetPVR/SickBeard
May-28 19:26:31 DEBUG    MAIN :: git output: /bin/sh: git: not found

May-28 19:26:31 DEBUG    MAIN :: Unable to find git with command git symbolic-ref -q HEAD
May-28 19:26:31 DEBUG    MAIN :: Retrieving the last check time from the DB
May-28 19:26:31 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
May-28 19:26:31 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8082/
May-28 19:26:36 ERROR    MAIN :: Unable to start web server, is something else running on port 8082?
May-28 19:31:52 DEBUG    MAIN :: importing downloader
May-28 19:31:52 INFO     MAIN :: libtorrent is NOT available
May-28 19:31:52 INFO     MAIN :: Checking database structure...
May-28 19:31:52 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
May-28 19:31:52 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Tvr Id database upgrade
May-28 19:31:52 DEBUG    MAIN :: AddTvrId upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Tvr Name database upgrade
May-28 19:31:52 DEBUG    MAIN :: AddTvrName upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Airdate Index database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('idx_tv_episodes_showid_airdate',)
May-28 19:31:52 DEBUG    MAIN :: AddAirdateIndex upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Numeric Providers database upgrade
May-28 19:31:52 DEBUG    MAIN :: NumericProviders upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking New Quality Settings database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
May-28 19:31:52 DEBUG    MAIN :: NewQualitySettings upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Drop Old History Table database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: DropOldHistoryTable upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Upgrade History For Generic Providers database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: UpgradeHistoryForGenericProviders upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Air By Date Option database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: AddAirByDateOption upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Change Sab Config From Ip To Host database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: ChangeSabConfigFromIpToHost upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Fix Sab Host database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: FixSabHostURL upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Lang database upgrade
May-28 19:31:52 DEBUG    MAIN :: AddLang upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Populate Root Dirs database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: PopulateRootDirs upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Set Nzb Torrent Settings database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: SetNzbTorrentSettings upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Fix Air By Date Setting database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: FixAirByDateSetting upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: AddSizeAndSceneNameFields upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: RenameSeasonFolders upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:31:52 DEBUG    MAIN :: Add1080pAndRawHDQualities upgrade not required
May-28 19:31:52 INFO     MAIN :: Checking database structure...
May-28 19:31:52 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 19:31:52 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
May-28 19:31:52 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
May-28 19:31:52 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
May-28 19:31:52 DEBUG    MAIN :: AddSceneExceptions upgrade not required
May-28 19:31:52 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
May-28 19:31:52 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
May-28 19:31:52 DEBUG    MAIN :: AddSceneNameCache upgrade not required
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
May-28 19:31:52 INFO     MAIN :: No duplicate show, check passed
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
May-28 19:31:52 INFO     MAIN :: No duplicate episode, check passed
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
May-28 19:31:52 INFO     MAIN :: No orphan episode, check passed
May-28 19:31:52 DEBUG    MAIN :: config_version -> 3
May-28 19:31:52 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /root/.xbmc/addons/service.downloadmanager.InternetPVR/SickBeard
May-28 19:31:52 DEBUG    MAIN :: git output: /bin/sh: git: not found

May-28 19:31:52 DEBUG    MAIN :: Unable to find git with command git symbolic-ref -q HEAD
May-28 19:31:52 DEBUG    MAIN :: Retrieving the last check time from the DB
May-28 19:31:52 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
May-28 19:31:52 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8082/
May-28 19:31:58 ERROR    MAIN :: Unable to start web server, is something else running on port 8082?
May-28 19:37:01 DEBUG    MAIN :: importing downloader
May-28 19:37:01 INFO     MAIN :: libtorrent is NOT available
May-28 19:37:01 INFO     MAIN :: Checking database structure...
May-28 19:37:01 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('tv_shows',)
May-28 19:37:01 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Tvr Id database upgrade
May-28 19:37:01 DEBUG    MAIN :: AddTvrId upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Tvr Name database upgrade
May-28 19:37:01 DEBUG    MAIN :: AddTvrName upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Airdate Index database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('idx_tv_episodes_showid_airdate',)
May-28 19:37:01 DEBUG    MAIN :: AddAirdateIndex upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Numeric Providers database upgrade
May-28 19:37:01 DEBUG    MAIN :: NumericProviders upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking New Quality Settings database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('db_version',)
May-28 19:37:01 DEBUG    MAIN :: NewQualitySettings upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Drop Old History Table database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: DropOldHistoryTable upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Upgrade History For Generic Providers database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: UpgradeHistoryForGenericProviders upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Air By Date Option database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: AddAirByDateOption upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Change Sab Config From Ip To Host database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: ChangeSabConfigFromIpToHost upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Fix Sab Host database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: FixSabHostURL upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Lang database upgrade
May-28 19:37:01 DEBUG    MAIN :: AddLang upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Populate Root Dirs database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: PopulateRootDirs upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Set Nzb Torrent Settings database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: SetNzbTorrentSettings upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Fix Air By Date Setting database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: FixAirByDateSetting upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Size And Scene Name Fields database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: AddSizeAndSceneNameFields upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Rename Season Folders database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: RenameSeasonFolders upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add1080p And Raw Qualities database upgrade
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT db_version FROM db_version
May-28 19:37:01 DEBUG    MAIN :: Add1080pAndRawHDQualities upgrade not required
May-28 19:37:01 INFO     MAIN :: Checking database structure...
May-28 19:37:01 DEBUG    MAIN :: Checking Initial Schema database upgrade
May-28 19:37:01 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('lastUpdate',)
May-28 19:37:01 DEBUG    MAIN :: InitialSchema upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Scene Exceptions database upgrade
May-28 19:37:01 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_exceptions',)
May-28 19:37:01 DEBUG    MAIN :: AddSceneExceptions upgrade not required
May-28 19:37:01 DEBUG    MAIN :: Checking Add Scene Name Cache database upgrade
May-28 19:37:01 DEBUG    MAIN :: cache.db: SELECT 1 FROM sqlite_master WHERE name = ?; with args ('scene_names',)
May-28 19:37:01 DEBUG    MAIN :: AddSceneNameCache upgrade not required
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT show_id, tvdb_id, COUNT(tvdb_id) as count FROM tv_shows GROUP BY tvdb_id HAVING count > 1
May-28 19:37:01 INFO     MAIN :: No duplicate show, check passed
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT showid, season, episode, COUNT(showid) as count FROM tv_episodes GROUP BY showid, season, episode HAVING count > 1
May-28 19:37:01 INFO     MAIN :: No duplicate episode, check passed
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT episode_id, showid, tv_shows.tvdb_id FROM tv_episodes LEFT JOIN tv_shows ON tv_episodes.showid=tv_shows.tvdb_id WHERE tv_shows.tvdb_id is NULL
May-28 19:37:01 INFO     MAIN :: No orphan episode, check passed
May-28 19:37:01 DEBUG    MAIN :: config_version -> 3
May-28 19:37:01 DEBUG    MAIN :: Executing git symbolic-ref -q HEAD with your shell in /root/.xbmc/addons/service.downloadmanager.InternetPVR/SickBeard
May-28 19:37:01 DEBUG    MAIN :: git output: /bin/sh: git: not found

May-28 19:37:01 DEBUG    MAIN :: Unable to find git with command git symbolic-ref -q HEAD
May-28 19:37:01 DEBUG    MAIN :: Retrieving the last check time from the DB
May-28 19:37:01 DEBUG    MAIN :: sickbeard.db: SELECT * FROM info
May-28 19:37:01 INFO     MAIN :: Starting Sick Beard on http://0.0.0.0:8082/
May-28 19:37:06 ERROR    MAIN :: Unable to start web server, is something else running on port 8082?
May-28 19:42:48 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE (status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) OR (status IN (2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409) AND location != '')) AND season != 0 and episode != 0 AND airdate <= 735381 GROUP BY showid
May-28 19:42:48 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7 GROUP BY showid
May-28 19:42:48 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 19:42:48 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 19:42:51 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 19:42:51 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 19:42:56 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 19:42:56 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
May-28 19:43:00 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,6) AND season != 0 and episode != 0 AND airdate <= 735381
May-28 19:43:00 DEBUG    CP Server Thread-8 :: sickbeard.db: SELECT COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN (4,3276804,204,404,104,804,12804,25604,1604,3204,6404,2,3276802,202,402,102,802,12802,25602,1602,3202,6402,9,3276809,209,409,109,809,12809,25609,1609,3209,6409,6)) AND airdate <= 735381 AND status != 7
